
Proy_SEU_S5_23_00PROF06_PPB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08009e30  08009e30  00019e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a354  0800a354  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a35c  0800a35c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a360  0800a360  0001a360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000150b8  200001e0  0800a544  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015298  0800a544  00025298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162f1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003273  00000000  00000000  00036501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00039778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  0003a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019329  00000000  00000000  0003b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a0b  00000000  00000000  00054af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009da9b  00000000  00000000  00068504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105f9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005588  00000000  00000000  00105ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e14 	.word	0x08009e14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009e14 	.word	0x08009e14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <_write>:
#include <string.h>
#include "comunicaciones.h"
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e00b      	b.n	8000ee6 <_write+0x2a>
	{
	    //ITM_SendChar( *ptr++ );
	   HAL_UART_Transmit(&huart2, (uint8_t*)ptr++,1,1000);
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	1c4b      	adds	r3, r1, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <_write+0x3c>)
 8000edc:	f002 fd37 	bl	800394e <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbef      	blt.n	8000ece <_write+0x12>
	}

	return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000288 	.word	0x20000288

08000efc <ESP8266_RESET>:


void ESP8266_RESET(void){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	// RESET
	unsigned int ct;
	 HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2102      	movs	r1, #2
 8000f06:	483b      	ldr	r0, [pc, #236]	; (8000ff4 <ESP8266_RESET+0xf8>)
 8000f08:	f002 f822 	bl	8002f50 <HAL_GPIO_WritePin>
	 for (ct=0;ct<1000000;ct++);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	e002      	b.n	8000f18 <ESP8266_RESET+0x1c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3301      	adds	r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a37      	ldr	r2, [pc, #220]	; (8000ff8 <ESP8266_RESET+0xfc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d9f8      	bls.n	8000f12 <ESP8266_RESET+0x16>
	 HAL_UART_Init(&huart1);
 8000f20:	4836      	ldr	r0, [pc, #216]	; (8000ffc <ESP8266_RESET+0x100>)
 8000f22:	f002 fcc7 	bl	80038b4 <HAL_UART_Init>
	 for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	e007      	b.n	8000f3c <ESP8266_RESET+0x40>
 8000f2c:	4a34      	ldr	r2, [pc, #208]	; (8001000 <ESP8266_RESET+0x104>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f42:	d3f3      	bcc.n	8000f2c <ESP8266_RESET+0x30>
	 HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8000f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f48:	492d      	ldr	r1, [pc, #180]	; (8001000 <ESP8266_RESET+0x104>)
 8000f4a:	482c      	ldr	r0, [pc, #176]	; (8000ffc <ESP8266_RESET+0x100>)
 8000f4c:	f002 fd91 	bl	8003a72 <HAL_UART_Receive_DMA>

	 HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2110      	movs	r1, #16
 8000f54:	482b      	ldr	r0, [pc, #172]	; (8001004 <ESP8266_RESET+0x108>)
 8000f56:	f001 fffb 	bl	8002f50 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f60:	4828      	ldr	r0, [pc, #160]	; (8001004 <ESP8266_RESET+0x108>)
 8000f62:	f001 fff5 	bl	8002f50 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <ESP8266_RESET+0x10c>)
 8000f6e:	f001 ffef 	bl	8002f50 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2120      	movs	r1, #32
 8000f76:	4823      	ldr	r0, [pc, #140]	; (8001004 <ESP8266_RESET+0x108>)
 8000f78:	f001 ffea 	bl	8002f50 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	4820      	ldr	r0, [pc, #128]	; (8001004 <ESP8266_RESET+0x108>)
 8000f82:	f001 ffe5 	bl	8002f50 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2140      	movs	r1, #64	; 0x40
 8000f8a:	481f      	ldr	r0, [pc, #124]	; (8001008 <ESP8266_RESET+0x10c>)
 8000f8c:	f001 ffe0 	bl	8002f50 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2101      	movs	r1, #1
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <ESP8266_RESET+0x108>)
 8000f96:	f001 ffdb 	bl	8002f50 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	481a      	ldr	r0, [pc, #104]	; (8001008 <ESP8266_RESET+0x10c>)
 8000fa0:	f001 ffd6 	bl	8002f50 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4816      	ldr	r0, [pc, #88]	; (8001004 <ESP8266_RESET+0x108>)
 8000faa:	f001 ffd1 	bl	8002f50 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <ESP8266_RESET+0xf8>)
 8000fb4:	f001 ffcc 	bl	8002f50 <HAL_GPIO_WritePin>

	 for (ct=0;ct<10000000;ct++);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	e002      	b.n	8000fc4 <ESP8266_RESET+0xc8>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a11      	ldr	r2, [pc, #68]	; (800100c <ESP8266_RESET+0x110>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d3f8      	bcc.n	8000fbe <ESP8266_RESET+0xc2>
	 HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2120      	movs	r1, #32
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <ESP8266_RESET+0x10c>)
 8000fd2:	f001 ffbd 	bl	8002f50 <HAL_GPIO_WritePin>
   	 HAL_UART_DMAStop(&huart1);
 8000fd6:	4809      	ldr	r0, [pc, #36]	; (8000ffc <ESP8266_RESET+0x100>)
 8000fd8:	f002 fd7b 	bl	8003ad2 <HAL_UART_DMAStop>
	 printf("XXXXX %s",buff_recv);
 8000fdc:	4908      	ldr	r1, [pc, #32]	; (8001000 <ESP8266_RESET+0x104>)
 8000fde:	480c      	ldr	r0, [pc, #48]	; (8001010 <ESP8266_RESET+0x114>)
 8000fe0:	f006 ff0e 	bl	8007e00 <iprintf>
	 printf("XXXXX\r\n\n\n\n");
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <ESP8266_RESET+0x118>)
 8000fe6:	f006 ff91 	bl	8007f0c <puts>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	000f423f 	.word	0x000f423f
 8000ffc:	20000244 	.word	0x20000244
 8001000:	200003f0 	.word	0x200003f0
 8001004:	40020400 	.word	0x40020400
 8001008:	40020000 	.word	0x40020000
 800100c:	00989680 	.word	0x00989680
 8001010:	08009e30 	.word	0x08009e30
 8001014:	08009e3c 	.word	0x08009e3c

08001018 <ESP8266_Boot>:


void ESP8266_Boot(void)

{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
	unsigned int ct;

 	printf("Reseting...\r\n");
 800101e:	4891      	ldr	r0, [pc, #580]	; (8001264 <ESP8266_Boot+0x24c>)
 8001020:	f006 ff74 	bl	8007f0c <puts>

 	ESP8266_RESET();
 8001024:	f7ff ff6a 	bl	8000efc <ESP8266_RESET>
 	printf("Init...\r\n");
 8001028:	488f      	ldr	r0, [pc, #572]	; (8001268 <ESP8266_Boot+0x250>)
 800102a:	f006 ff6f 	bl	8007f0c <puts>

 	HAL_UART_Init(&huart1);
 800102e:	488f      	ldr	r0, [pc, #572]	; (800126c <ESP8266_Boot+0x254>)
 8001030:	f002 fc40 	bl	80038b4 <HAL_UART_Init>

 	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2101      	movs	r1, #1
 8001038:	488d      	ldr	r0, [pc, #564]	; (8001270 <ESP8266_Boot+0x258>)
 800103a:	f001 ff89 	bl	8002f50 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2120      	movs	r1, #32
 8001042:	488c      	ldr	r0, [pc, #560]	; (8001274 <ESP8266_Boot+0x25c>)
 8001044:	f001 ff84 	bl	8002f50 <HAL_GPIO_WritePin>

 	// version
 	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	e007      	b.n	800105e <ESP8266_Boot+0x46>
 800104e:	4a8a      	ldr	r2, [pc, #552]	; (8001278 <ESP8266_Boot+0x260>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4413      	add	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001064:	d3f3      	bcc.n	800104e <ESP8266_Boot+0x36>
 	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8001066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106a:	4983      	ldr	r1, [pc, #524]	; (8001278 <ESP8266_Boot+0x260>)
 800106c:	487f      	ldr	r0, [pc, #508]	; (800126c <ESP8266_Boot+0x254>)
 800106e:	f002 fd00 	bl	8003a72 <HAL_UART_Receive_DMA>
 	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT\r\n",strlen("AT\r\n"),10000);
 8001072:	f242 7310 	movw	r3, #10000	; 0x2710
 8001076:	2204      	movs	r2, #4
 8001078:	4980      	ldr	r1, [pc, #512]	; (800127c <ESP8266_Boot+0x264>)
 800107a:	487c      	ldr	r0, [pc, #496]	; (800126c <ESP8266_Boot+0x254>)
 800107c:	f002 fc67 	bl	800394e <HAL_UART_Transmit>
 	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2101      	movs	r1, #1
 8001084:	487a      	ldr	r0, [pc, #488]	; (8001270 <ESP8266_Boot+0x258>)
 8001086:	f001 ff63 	bl	8002f50 <HAL_GPIO_WritePin>
 	for (ct=0;ct<2000000;ct++);
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	e002      	b.n	8001096 <ESP8266_Boot+0x7e>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3301      	adds	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a79      	ldr	r2, [pc, #484]	; (8001280 <ESP8266_Boot+0x268>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d9f8      	bls.n	8001090 <ESP8266_Boot+0x78>
 	HAL_UART_DMAStop(&huart1);
 800109e:	4873      	ldr	r0, [pc, #460]	; (800126c <ESP8266_Boot+0x254>)
 80010a0:	f002 fd17 	bl	8003ad2 <HAL_UART_DMAStop>
 	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2120      	movs	r1, #32
 80010a8:	4872      	ldr	r0, [pc, #456]	; (8001274 <ESP8266_Boot+0x25c>)
 80010aa:	f001 ff51 	bl	8002f50 <HAL_GPIO_WritePin>
	printf("1: %s",buff_recv);
 80010ae:	4972      	ldr	r1, [pc, #456]	; (8001278 <ESP8266_Boot+0x260>)
 80010b0:	4874      	ldr	r0, [pc, #464]	; (8001284 <ESP8266_Boot+0x26c>)
 80010b2:	f006 fea5 	bl	8007e00 <iprintf>




	// version
	for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	e007      	b.n	80010cc <ESP8266_Boot+0xb4>
 80010bc:	4a6e      	ldr	r2, [pc, #440]	; (8001278 <ESP8266_Boot+0x260>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3301      	adds	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010d2:	d3f3      	bcc.n	80010bc <ESP8266_Boot+0xa4>
	HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 80010d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010d8:	4967      	ldr	r1, [pc, #412]	; (8001278 <ESP8266_Boot+0x260>)
 80010da:	4864      	ldr	r0, [pc, #400]	; (800126c <ESP8266_Boot+0x254>)
 80010dc:	f002 fcc9 	bl	8003a72 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+CWMODE=3\r\n",strlen("AT+CWMODE=3\r\n"),10000);
 80010e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80010e4:	220d      	movs	r2, #13
 80010e6:	4968      	ldr	r1, [pc, #416]	; (8001288 <ESP8266_Boot+0x270>)
 80010e8:	4860      	ldr	r0, [pc, #384]	; (800126c <ESP8266_Boot+0x254>)
 80010ea:	f002 fc30 	bl	800394e <HAL_UART_Transmit>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2101      	movs	r1, #1
 80010f2:	485f      	ldr	r0, [pc, #380]	; (8001270 <ESP8266_Boot+0x258>)
 80010f4:	f001 ff2c 	bl	8002f50 <HAL_GPIO_WritePin>
	for (ct=0;ct<2000000;ct++);
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	e002      	b.n	8001104 <ESP8266_Boot+0xec>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a5e      	ldr	r2, [pc, #376]	; (8001280 <ESP8266_Boot+0x268>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d9f8      	bls.n	80010fe <ESP8266_Boot+0xe6>
	HAL_UART_DMAStop(&huart1);
 800110c:	4857      	ldr	r0, [pc, #348]	; (800126c <ESP8266_Boot+0x254>)
 800110e:	f002 fce0 	bl	8003ad2 <HAL_UART_DMAStop>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2120      	movs	r1, #32
 8001116:	4857      	ldr	r0, [pc, #348]	; (8001274 <ESP8266_Boot+0x25c>)
 8001118:	f001 ff1a 	bl	8002f50 <HAL_GPIO_WritePin>

	printf("3: %s",buff_recv);
 800111c:	4956      	ldr	r1, [pc, #344]	; (8001278 <ESP8266_Boot+0x260>)
 800111e:	485b      	ldr	r0, [pc, #364]	; (800128c <ESP8266_Boot+0x274>)
 8001120:	f006 fe6e 	bl	8007e00 <iprintf>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, GPIO_PIN_SET);

	printf("6: %s",buff_recv);
	*/
	    // Tiene IP?
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	e007      	b.n	800113a <ESP8266_Boot+0x122>
 800112a:	4a53      	ldr	r2, [pc, #332]	; (8001278 <ESP8266_Boot+0x260>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001140:	d3f3      	bcc.n	800112a <ESP8266_Boot+0x112>
		HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8001142:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001146:	494c      	ldr	r1, [pc, #304]	; (8001278 <ESP8266_Boot+0x260>)
 8001148:	4848      	ldr	r0, [pc, #288]	; (800126c <ESP8266_Boot+0x254>)
 800114a:	f002 fc92 	bl	8003a72 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 800114e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001152:	220a      	movs	r2, #10
 8001154:	494e      	ldr	r1, [pc, #312]	; (8001290 <ESP8266_Boot+0x278>)
 8001156:	4845      	ldr	r0, [pc, #276]	; (800126c <ESP8266_Boot+0x254>)
 8001158:	f002 fbf9 	bl	800394e <HAL_UART_Transmit>
		osDelay(500);
 800115c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001160:	f003 fb74 	bl	800484c <osDelay>
		HAL_UART_DMAStop(&huart1);
 8001164:	4841      	ldr	r0, [pc, #260]	; (800126c <ESP8266_Boot+0x254>)
 8001166:	f002 fcb4 	bl	8003ad2 <HAL_UART_DMAStop>
		printf("4: %s",buff_recv);
 800116a:	4943      	ldr	r1, [pc, #268]	; (8001278 <ESP8266_Boot+0x260>)
 800116c:	4849      	ldr	r0, [pc, #292]	; (8001294 <ESP8266_Boot+0x27c>)
 800116e:	f006 fe47 	bl	8007e00 <iprintf>
		//HAL_UART_Transmit(&huart2, buff_recv,strlen(buff_recv),10000);


		// Pon en modo station=1,  station+access_point=3
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	e007      	b.n	8001188 <ESP8266_Boot+0x170>
 8001178:	4a3f      	ldr	r2, [pc, #252]	; (8001278 <ESP8266_Boot+0x260>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800118e:	d3f3      	bcc.n	8001178 <ESP8266_Boot+0x160>
		HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 8001190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001194:	4938      	ldr	r1, [pc, #224]	; (8001278 <ESP8266_Boot+0x260>)
 8001196:	4835      	ldr	r0, [pc, #212]	; (800126c <ESP8266_Boot+0x254>)
 8001198:	f002 fc6b 	bl	8003a72 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(&huart1, ( unsigned char *) "AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"),100000);
 800119c:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <ESP8266_Boot+0x280>)
 800119e:	220d      	movs	r2, #13
 80011a0:	493e      	ldr	r1, [pc, #248]	; (800129c <ESP8266_Boot+0x284>)
 80011a2:	4832      	ldr	r0, [pc, #200]	; (800126c <ESP8266_Boot+0x254>)
 80011a4:	f002 fbd3 	bl	800394e <HAL_UART_Transmit>
		osDelay(4000);
 80011a8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80011ac:	f003 fb4e 	bl	800484c <osDelay>
		HAL_UART_DMAStop(&huart1);
 80011b0:	482e      	ldr	r0, [pc, #184]	; (800126c <ESP8266_Boot+0x254>)
 80011b2:	f002 fc8e 	bl	8003ad2 <HAL_UART_DMAStop>
		//HAL_UART_Transmit(&huart2, buff_recv,strlen(buff_recv),10000);
		printf("5: %s",buff_recv);
 80011b6:	4930      	ldr	r1, [pc, #192]	; (8001278 <ESP8266_Boot+0x260>)
 80011b8:	4839      	ldr	r0, [pc, #228]	; (80012a0 <ESP8266_Boot+0x288>)
 80011ba:	f006 fe21 	bl	8007e00 <iprintf>

		// Programa la contraseña del access-point
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	e007      	b.n	80011d4 <ESP8266_Boot+0x1bc>
 80011c4:	4a2c      	ldr	r2, [pc, #176]	; (8001278 <ESP8266_Boot+0x260>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011da:	d3f3      	bcc.n	80011c4 <ESP8266_Boot+0x1ac>
		HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 80011dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e0:	4925      	ldr	r1, [pc, #148]	; (8001278 <ESP8266_Boot+0x260>)
 80011e2:	4822      	ldr	r0, [pc, #136]	; (800126c <ESP8266_Boot+0x254>)
 80011e4:	f002 fc45 	bl	8003a72 <HAL_UART_Receive_DMA>

		HAL_UART_Transmit(&huart1,( unsigned char *) "AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n",strlen("AT+CWJAP=\"" SSID "\",\"" SSID_PASS "\"\r\n"),10000);
 80011e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80011ec:	2221      	movs	r2, #33	; 0x21
 80011ee:	492d      	ldr	r1, [pc, #180]	; (80012a4 <ESP8266_Boot+0x28c>)
 80011f0:	481e      	ldr	r0, [pc, #120]	; (800126c <ESP8266_Boot+0x254>)
 80011f2:	f002 fbac 	bl	800394e <HAL_UART_Transmit>
		osDelay(7000);
 80011f6:	f641 3058 	movw	r0, #7000	; 0x1b58
 80011fa:	f003 fb27 	bl	800484c <osDelay>
		HAL_UART_DMAStop(&huart1);
 80011fe:	481b      	ldr	r0, [pc, #108]	; (800126c <ESP8266_Boot+0x254>)
 8001200:	f002 fc67 	bl	8003ad2 <HAL_UART_DMAStop>
		printf("6: %s",buff_recv);
 8001204:	491c      	ldr	r1, [pc, #112]	; (8001278 <ESP8266_Boot+0x260>)
 8001206:	4828      	ldr	r0, [pc, #160]	; (80012a8 <ESP8266_Boot+0x290>)
 8001208:	f006 fdfa 	bl	8007e00 <iprintf>

		//HAL_UART_Transmit(&huart2, buff_recv,strlen(buff_recv),10000);


		// verifica si hay IP
		for (ct=0;ct<2048;ct++) buff_recv[ct]=0;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	e007      	b.n	8001222 <ESP8266_Boot+0x20a>
 8001212:	4a19      	ldr	r2, [pc, #100]	; (8001278 <ESP8266_Boot+0x260>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3301      	adds	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001228:	d3f3      	bcc.n	8001212 <ESP8266_Boot+0x1fa>
		HAL_UART_Receive_DMA(&huart1, buff_recv,2048);
 800122a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800122e:	4912      	ldr	r1, [pc, #72]	; (8001278 <ESP8266_Boot+0x260>)
 8001230:	480e      	ldr	r0, [pc, #56]	; (800126c <ESP8266_Boot+0x254>)
 8001232:	f002 fc1e 	bl	8003a72 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(&huart1, ( unsigned char *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),10000);
 8001236:	f242 7310 	movw	r3, #10000	; 0x2710
 800123a:	220a      	movs	r2, #10
 800123c:	4914      	ldr	r1, [pc, #80]	; (8001290 <ESP8266_Boot+0x278>)
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <ESP8266_Boot+0x254>)
 8001240:	f002 fb85 	bl	800394e <HAL_UART_Transmit>
		osDelay(3000);
 8001244:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001248:	f003 fb00 	bl	800484c <osDelay>
		HAL_UART_DMAStop(&huart1);
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <ESP8266_Boot+0x254>)
 800124e:	f002 fc40 	bl	8003ad2 <HAL_UART_DMAStop>
		printf("6: %s",buff_recv);
 8001252:	4909      	ldr	r1, [pc, #36]	; (8001278 <ESP8266_Boot+0x260>)
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <ESP8266_Boot+0x290>)
 8001256:	f006 fdd3 	bl	8007e00 <iprintf>
		//HAL_UART_Transmit(&huart2, buff_recv,strlen(buff_recv),10000);

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	08009e48 	.word	0x08009e48
 8001268:	08009e58 	.word	0x08009e58
 800126c:	20000244 	.word	0x20000244
 8001270:	40020400 	.word	0x40020400
 8001274:	40020000 	.word	0x40020000
 8001278:	200003f0 	.word	0x200003f0
 800127c:	08009e64 	.word	0x08009e64
 8001280:	001e847f 	.word	0x001e847f
 8001284:	08009e6c 	.word	0x08009e6c
 8001288:	08009e74 	.word	0x08009e74
 800128c:	08009e84 	.word	0x08009e84
 8001290:	08009e8c 	.word	0x08009e8c
 8001294:	08009e98 	.word	0x08009e98
 8001298:	000186a0 	.word	0x000186a0
 800129c:	08009ea0 	.word	0x08009ea0
 80012a0:	08009eb0 	.word	0x08009eb0
 80012a4:	08009eb8 	.word	0x08009eb8
 80012a8:	08009edc 	.word	0x08009edc

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f000 fcf4 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f824 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 f970 	bl	800159c <MX_GPIO_Init>
  MX_DMA_Init();
 80012bc:	f000 f930 	bl	8001520 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012c0:	f000 f904 	bl	80014cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012c4:	f000 f8d8 	bl	8001478 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80012c8:	f000 f884 	bl	80013d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  printf (PASCU_PRJ " at "__TIME__ "\r\n");
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <main+0x44>)
 80012ce:	f006 fe1d 	bl	8007f0c <puts>

  ESP8266_Boot();
 80012d2:	f7ff fea1 	bl	8001018 <ESP8266_Boot>
  //ESP8266_RESET();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012d6:	f003 f9dd 	bl	8004694 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012da:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <main+0x48>)
 80012dc:	2100      	movs	r1, #0
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <main+0x4c>)
 80012e0:	f003 fa22 	bl	8004728 <osThreadNew>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <main+0x50>)
 80012e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012ea:	f003 f9f7 	bl	80046dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <main+0x42>
 80012f0:	08009ef0 	.word	0x08009ef0
 80012f4:	08009f38 	.word	0x08009f38
 80012f8:	08001729 	.word	0x08001729
 80012fc:	200003ec 	.word	0x200003ec

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b094      	sub	sp, #80	; 0x50
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2230      	movs	r2, #48	; 0x30
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f006 f86f 	bl	80073f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <SystemClock_Config+0xcc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <SystemClock_Config+0xcc>)
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <SystemClock_Config+0xcc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <SystemClock_Config+0xd0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <SystemClock_Config+0xd0>)
 800134a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <SystemClock_Config+0xd0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001364:	2310      	movs	r3, #16
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001370:	2310      	movs	r3, #16
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001374:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001378:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800137a:	2304      	movs	r3, #4
 800137c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800137e:	2304      	movs	r3, #4
 8001380:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fdfc 	bl	8002f84 <HAL_RCC_OscConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001392:	f000 f9d1 	bl	8001738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001396:	230f      	movs	r3, #15
 8001398:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139a:	2302      	movs	r3, #2
 800139c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2102      	movs	r1, #2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 f85e 	bl	8003474 <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013be:	f000 f9bb 	bl	8001738 <Error_Handler>
  }
}
 80013c2:	bf00      	nop
 80013c4:	3750      	adds	r7, #80	; 0x50
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40007000 	.word	0x40007000

080013d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_ADC1_Init+0x98>)
 80013e8:	4a21      	ldr	r2, [pc, #132]	; (8001470 <MX_ADC1_Init+0x9c>)
 80013ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_ADC1_Init+0x98>)
 80013ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_ADC1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_ADC1_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_ADC1_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_ADC1_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_ADC1_Init+0x98>)
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <MX_ADC1_Init+0xa0>)
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_ADC1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_ADC1_Init+0x98>)
 8001422:	2201      	movs	r2, #1
 8001424:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_ADC1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_ADC1_Init+0x98>)
 8001430:	2201      	movs	r2, #1
 8001432:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_ADC1_Init+0x98>)
 8001436:	f000 fca3 	bl	8001d80 <HAL_ADC_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001440:	f000 f97a 	bl	8001738 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001448:	2301      	movs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_ADC1_Init+0x98>)
 8001456:	f000 fcd7 	bl	8001e08 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001460:	f000 f96a 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200001fc 	.word	0x200001fc
 8001470:	40012000 	.word	0x40012000
 8001474:	0f000001 	.word	0x0f000001

08001478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_USART1_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_USART1_UART_Init+0x4c>)
 80014b0:	f002 fa00 	bl	80038b4 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f000 f93d 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000244 	.word	0x20000244
 80014c8:	40011000 	.word	0x40011000

080014cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_USART2_UART_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USART2_UART_Init+0x4c>)
 8001504:	f002 f9d6 	bl	80038b4 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800150e:	f000 f913 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000288 	.word	0x20000288
 800151c:	40004400 	.word	0x40004400

08001520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_DMA_Init+0x78>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <MX_DMA_Init+0x78>)
 8001530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_DMA_Init+0x78>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_DMA_Init+0x78>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <MX_DMA_Init+0x78>)
 800154c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_DMA_Init+0x78>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2105      	movs	r1, #5
 8001562:	2010      	movs	r0, #16
 8001564:	f000 ff59 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001568:	2010      	movs	r0, #16
 800156a:	f000 ff72 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	203a      	movs	r0, #58	; 0x3a
 8001574:	f000 ff51 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001578:	203a      	movs	r0, #58	; 0x3a
 800157a:	f000 ff6a 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2105      	movs	r1, #5
 8001582:	2046      	movs	r0, #70	; 0x46
 8001584:	f000 ff49 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001588:	2046      	movs	r0, #70	; 0x46
 800158a:	f000 ff62 	bl	8002452 <HAL_NVIC_EnableIRQ>

}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b58      	ldr	r3, [pc, #352]	; (8001718 <MX_GPIO_Init+0x17c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a57      	ldr	r2, [pc, #348]	; (8001718 <MX_GPIO_Init+0x17c>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b55      	ldr	r3, [pc, #340]	; (8001718 <MX_GPIO_Init+0x17c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b51      	ldr	r3, [pc, #324]	; (8001718 <MX_GPIO_Init+0x17c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a50      	ldr	r2, [pc, #320]	; (8001718 <MX_GPIO_Init+0x17c>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <MX_GPIO_Init+0x17c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <MX_GPIO_Init+0x17c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a49      	ldr	r2, [pc, #292]	; (8001718 <MX_GPIO_Init+0x17c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <MX_GPIO_Init+0x17c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b43      	ldr	r3, [pc, #268]	; (8001718 <MX_GPIO_Init+0x17c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a42      	ldr	r2, [pc, #264]	; (8001718 <MX_GPIO_Init+0x17c>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b40      	ldr	r3, [pc, #256]	; (8001718 <MX_GPIO_Init+0x17c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP8266_RESET_GPIO_Port, ESP8266_RESET_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2102      	movs	r1, #2
 8001626:	483d      	ldr	r0, [pc, #244]	; (800171c <MX_GPIO_Init+0x180>)
 8001628:	f001 fc92 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D8_Pin|Buzzer_Pin|D3_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001632:	483b      	ldr	r0, [pc, #236]	; (8001720 <MX_GPIO_Init+0x184>)
 8001634:	f001 fc8c 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2140      	movs	r1, #64	; 0x40
 800163c:	4838      	ldr	r0, [pc, #224]	; (8001720 <MX_GPIO_Init+0x184>)
 800163e:	f001 fc87 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D2_Pin|D5_Pin|D1_Pin
 8001642:	2200      	movs	r2, #0
 8001644:	f240 4139 	movw	r1, #1081	; 0x439
 8001648:	4836      	ldr	r0, [pc, #216]	; (8001724 <MX_GPIO_Init+0x188>)
 800164a:	f001 fc81 	bl	8002f50 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800164e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001654:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	482d      	ldr	r0, [pc, #180]	; (800171c <MX_GPIO_Init+0x180>)
 8001666:	f001 faef 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP8266_RESET_Pin */
  GPIO_InitStruct.Pin = ESP8266_RESET_Pin;
 800166a:	2302      	movs	r3, #2
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP8266_RESET_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4826      	ldr	r0, [pc, #152]	; (800171c <MX_GPIO_Init+0x180>)
 8001682:	f001 fae1 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : D8_Pin Buzzer_Pin D3_Pin */
  GPIO_InitStruct.Pin = D8_Pin|Buzzer_Pin|D3_Pin;
 8001686:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4820      	ldr	r0, [pc, #128]	; (8001720 <MX_GPIO_Init+0x184>)
 80016a0:	f001 fad2 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_Pin */
  GPIO_InitStruct.Pin = D6_Pin;
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b0:	2302      	movs	r3, #2
 80016b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	4819      	ldr	r0, [pc, #100]	; (8001720 <MX_GPIO_Init+0x184>)
 80016bc:	f001 fac4 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin D5_Pin D1_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin|D5_Pin|D1_Pin
 80016c0:	f240 4339 	movw	r3, #1081	; 0x439
 80016c4:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <MX_GPIO_Init+0x188>)
 80016da:	f001 fab5 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR1_Pin */
  GPIO_InitStruct.Pin = PULSADOR1_Pin;
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR1_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480a      	ldr	r0, [pc, #40]	; (800171c <MX_GPIO_Init+0x180>)
 80016f2:	f001 faa9 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR2_Pin */
  GPIO_InitStruct.Pin = PULSADOR2_Pin;
 80016f6:	2340      	movs	r3, #64	; 0x40
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PULSADOR2_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_GPIO_Init+0x188>)
 800170a:	f001 fa9d 	bl	8002c48 <HAL_GPIO_Init>

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40020800 	.word	0x40020800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400

08001728 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f003 f88b 	bl	800484c <osDelay>
 8001736:	e7fb      	b.n	8001730 <StartDefaultTask+0x8>

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x8>
	...

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_MspInit+0x54>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <HAL_MspInit+0x54>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_MspInit+0x54>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_MspInit+0x54>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_MspInit+0x54>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_MspInit+0x54>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	210f      	movs	r1, #15
 8001786:	f06f 0001 	mvn.w	r0, #1
 800178a:	f000 fe46 	bl	800241a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_ADC_MspInit+0x7c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d127      	bne.n	800180e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_ADC_MspInit+0x80>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a15      	ldr	r2, [pc, #84]	; (800181c <HAL_ADC_MspInit+0x80>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_ADC_MspInit+0x80>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_ADC_MspInit+0x80>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_ADC_MspInit+0x80>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_ADC_MspInit+0x80>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = LDR_Pin|NTC_Pin|POT_Pin;
 80017f6:	2313      	movs	r3, #19
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fa:	2303      	movs	r3, #3
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_ADC_MspInit+0x84>)
 800180a:	f001 fa1d 	bl	8002c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40012000 	.word	0x40012000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a78      	ldr	r2, [pc, #480]	; (8001a24 <HAL_UART_MspInit+0x200>)
 8001842:	4293      	cmp	r3, r2
 8001844:	f040 808a 	bne.w	800195c <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_UART_MspInit+0x204>)
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	4a75      	ldr	r2, [pc, #468]	; (8001a28 <HAL_UART_MspInit+0x204>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6453      	str	r3, [r2, #68]	; 0x44
 8001858:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <HAL_UART_MspInit+0x204>)
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_UART_MspInit+0x204>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_UART_MspInit+0x204>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6313      	str	r3, [r2, #48]	; 0x30
 8001874:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <HAL_UART_MspInit+0x204>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001880:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001892:	2307      	movs	r3, #7
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4863      	ldr	r0, [pc, #396]	; (8001a2c <HAL_UART_MspInit+0x208>)
 800189e:	f001 f9d3 	bl	8002c48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018a4:	4a63      	ldr	r2, [pc, #396]	; (8001a34 <HAL_UART_MspInit+0x210>)
 80018a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80018a8:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b0:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b6:	4b5e      	ldr	r3, [pc, #376]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018bc:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c4:	4b5a      	ldr	r3, [pc, #360]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ca:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018d0:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018d6:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018dc:	4b54      	ldr	r3, [pc, #336]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018e2:	4853      	ldr	r0, [pc, #332]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018e4:	f000 fdd0 	bl	8002488 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80018ee:	f7ff ff23 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
 80018f8:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80018fe:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <HAL_UART_MspInit+0x214>)
 8001900:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <HAL_UART_MspInit+0x218>)
 8001902:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001904:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_UART_MspInit+0x214>)
 8001906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800190a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190c:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <HAL_UART_MspInit+0x214>)
 800190e:	2240      	movs	r2, #64	; 0x40
 8001910:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_UART_MspInit+0x214>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_UART_MspInit+0x214>)
 800191a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800191e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HAL_UART_MspInit+0x214>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <HAL_UART_MspInit+0x214>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800192c:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <HAL_UART_MspInit+0x214>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_UART_MspInit+0x214>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001938:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_UART_MspInit+0x214>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800193e:	483e      	ldr	r0, [pc, #248]	; (8001a38 <HAL_UART_MspInit+0x214>)
 8001940:	f000 fda2 	bl	8002488 <HAL_DMA_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800194a:	f7ff fef5 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a39      	ldr	r2, [pc, #228]	; (8001a38 <HAL_UART_MspInit+0x214>)
 8001952:	635a      	str	r2, [r3, #52]	; 0x34
 8001954:	4a38      	ldr	r2, [pc, #224]	; (8001a38 <HAL_UART_MspInit+0x214>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800195a:	e05e      	b.n	8001a1a <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a37      	ldr	r2, [pc, #220]	; (8001a40 <HAL_UART_MspInit+0x21c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d159      	bne.n	8001a1a <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_UART_MspInit+0x204>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <HAL_UART_MspInit+0x204>)
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_UART_MspInit+0x204>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <HAL_UART_MspInit+0x204>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <HAL_UART_MspInit+0x204>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_UART_MspInit+0x204>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800199e:	230c      	movs	r3, #12
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ae:	2307      	movs	r3, #7
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	481c      	ldr	r0, [pc, #112]	; (8001a2c <HAL_UART_MspInit+0x208>)
 80019ba:	f001 f945 	bl	8002c48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019c0:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <HAL_UART_MspInit+0x224>)
 80019c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019de:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_UART_MspInit+0x220>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019fe:	4811      	ldr	r0, [pc, #68]	; (8001a44 <HAL_UART_MspInit+0x220>)
 8001a00:	f000 fd42 	bl	8002488 <HAL_DMA_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8001a0a:	f7ff fe95 	bl	8001738 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <HAL_UART_MspInit+0x220>)
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
 8001a14:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_UART_MspInit+0x220>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a1a:	bf00      	nop
 8001a1c:	3730      	adds	r7, #48	; 0x30
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40011000 	.word	0x40011000
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	200002cc 	.word	0x200002cc
 8001a34:	40026440 	.word	0x40026440
 8001a38:	2000032c 	.word	0x2000032c
 8001a3c:	400264b8 	.word	0x400264b8
 8001a40:	40004400 	.word	0x40004400
 8001a44:	2000038c 	.word	0x2000038c
 8001a48:	40026088 	.word	0x40026088

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7c:	f000 f960 	bl	8001d40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a80:	f004 fb1c 	bl	80060bc <xTaskGetSchedulerState>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d001      	beq.n	8001a8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a8a:	f005 f905 	bl	8006c98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <DMA1_Stream5_IRQHandler+0x10>)
 8001a9a:	f000 fe6b 	bl	8002774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000038c 	.word	0x2000038c

08001aa8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA2_Stream2_IRQHandler+0x10>)
 8001aae:	f000 fe61 	bl	8002774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002cc 	.word	0x200002cc

08001abc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <DMA2_Stream7_IRQHandler+0x10>)
 8001ac2:	f000 fe57 	bl	8002774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000032c 	.word	0x2000032c

08001ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_kill>:

int _kill(int pid, int sig)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aea:	f005 fb51 	bl	8007190 <__errno>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2216      	movs	r2, #22
 8001af2:	601a      	str	r2, [r3, #0]
	return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_exit>:

void _exit (int status)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe7 	bl	8001ae0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b12:	e7fe      	b.n	8001b12 <_exit+0x12>

08001b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e00a      	b.n	8001b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b26:	f3af 8000 	nop.w
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf0      	blt.n	8001b26 <_read+0x12>
	}

return len;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	return -1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b76:	605a      	str	r2, [r3, #4]
	return 0;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_isatty>:

int _isatty(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <_sbrk+0x5c>)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <_sbrk+0x60>)
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <_sbrk+0x64>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <_sbrk+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d207      	bcs.n	8001bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be8:	f005 fad2 	bl	8007190 <__errno>
 8001bec:	4603      	mov	r3, r0
 8001bee:	220c      	movs	r2, #12
 8001bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e009      	b.n	8001c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <_sbrk+0x64>)
 8001c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20020000 	.word	0x20020000
 8001c18:	00000400 	.word	0x00000400
 8001c1c:	20000bf0 	.word	0x20000bf0
 8001c20:	20015298 	.word	0x20015298

08001c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <SystemInit+0x20>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <SystemInit+0x20>)
 8001c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c4e:	490e      	ldr	r1, [pc, #56]	; (8001c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c50:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c64:	4c0b      	ldr	r4, [pc, #44]	; (8001c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c72:	f7ff ffd7 	bl	8001c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c76:	f005 fb87 	bl	8007388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7a:	f7ff fb17 	bl	80012ac <main>
  bx  lr    
 8001c7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c8c:	0800a364 	.word	0x0800a364
  ldr r2, =_sbss
 8001c90:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c94:	20015298 	.word	0x20015298

08001c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_Init+0x40>)
 8001ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <HAL_Init+0x40>)
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_Init+0x40>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 fb9d 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7ff fd38 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fbb5 	bl	800246e <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 fb7d 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000bf4 	.word	0x20000bf4

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000bf4 	.word	0x20000bf4

08001d80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e033      	b.n	8001dfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fcfc 	bl	800179c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dc6:	f023 0302 	bic.w	r3, r3, #2
 8001dca:	f043 0202 	orr.w	r2, r3, #2
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f94a 	bl	800206c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
 8001dee:	e001      	b.n	8001df4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1c>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e113      	b.n	800204c <HAL_ADC_ConfigChannel+0x244>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b09      	cmp	r3, #9
 8001e32:	d925      	bls.n	8001e80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68d9      	ldr	r1, [r3, #12]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43da      	mvns	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	400a      	ands	r2, r1
 8001e58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68d9      	ldr	r1, [r3, #12]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4403      	add	r3, r0
 8001e72:	3b1e      	subs	r3, #30
 8001e74:	409a      	lsls	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	e022      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6919      	ldr	r1, [r3, #16]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	2207      	movs	r2, #7
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4403      	add	r3, r0
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d824      	bhi.n	8001f18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b05      	subs	r3, #5
 8001ee0:	221f      	movs	r2, #31
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	400a      	ands	r2, r1
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b05      	subs	r3, #5
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
 8001f16:	e04c      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	d824      	bhi.n	8001f6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	3b23      	subs	r3, #35	; 0x23
 8001f32:	221f      	movs	r2, #31
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	400a      	ands	r2, r1
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b23      	subs	r3, #35	; 0x23
 8001f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
 8001f68:	e023      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b41      	subs	r3, #65	; 0x41
 8001f7c:	221f      	movs	r2, #31
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	400a      	ands	r2, r1
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b41      	subs	r3, #65	; 0x41
 8001fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_ADC_ConfigChannel+0x250>)
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a28      	ldr	r2, [pc, #160]	; (800205c <HAL_ADC_ConfigChannel+0x254>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10f      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d8>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b12      	cmp	r3, #18
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_ADC_ConfigChannel+0x254>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12b      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x23a>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_ADC_ConfigChannel+0x258>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x1f4>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b11      	cmp	r3, #17
 8001ffa:	d122      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <HAL_ADC_ConfigChannel+0x258>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d111      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_ADC_ConfigChannel+0x25c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_ADC_ConfigChannel+0x260>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	0c9a      	lsrs	r2, r3, #18
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002034:	e002      	b.n	800203c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3b01      	subs	r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f9      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40012300 	.word	0x40012300
 800205c:	40012000 	.word	0x40012000
 8002060:	10000012 	.word	0x10000012
 8002064:	20000000 	.word	0x20000000
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002074:	4b79      	ldr	r3, [pc, #484]	; (800225c <ADC_Init+0x1f0>)
 8002076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	021a      	lsls	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	4a58      	ldr	r2, [pc, #352]	; (8002260 <ADC_Init+0x1f4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	e00f      	b.n	800216a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0202 	bic.w	r2, r2, #2
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e1b      	ldrb	r3, [r3, #24]
 8002184:	005a      	lsls	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	3b01      	subs	r3, #1
 80021c4:	035a      	lsls	r2, r3, #13
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e007      	b.n	80021e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	051a      	lsls	r2, r3, #20
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002222:	025a      	lsls	r2, r3, #9
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	029a      	lsls	r2, r3, #10
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40012300 	.word	0x40012300
 8002260:	0f000001 	.word	0x0f000001

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800228c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <__NVIC_EnableIRQ+0x38>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff29 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff3e 	bl	80022ac <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff8e 	bl	8002358 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5d 	bl	8002304 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff31 	bl	80022c8 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff fc68 	bl	8001d68 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e099      	b.n	80025d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c4:	e00f      	b.n	80024e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c6:	f7ff fc4f 	bl	8001d68 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d908      	bls.n	80024e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e078      	b.n	80025d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e8      	bne.n	80024c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_DMA_Init+0x158>)
 8002500:	4013      	ands	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	2b04      	cmp	r3, #4
 800253e:	d107      	bne.n	8002550 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	4313      	orrs	r3, r2
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 0307 	bic.w	r3, r3, #7
 8002566:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	2b04      	cmp	r3, #4
 8002578:	d117      	bne.n	80025aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fadf 	bl	8002b50 <DMA_CheckFifoParam>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025a6:	2301      	movs	r3, #1
 80025a8:	e016      	b.n	80025d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa96 	bl	8002ae4 <DMA_CalcBaseAndBitshift>
 80025b8:	4603      	mov	r3, r0
 80025ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	223f      	movs	r2, #63	; 0x3f
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	f010803f 	.word	0xf010803f

080025e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_DMA_Start_IT+0x26>
 8002606:	2302      	movs	r3, #2
 8002608:	e040      	b.n	800268c <HAL_DMA_Start_IT+0xa8>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d12f      	bne.n	800267e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fa28 	bl	8002a88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	223f      	movs	r2, #63	; 0x3f
 800263e:	409a      	lsls	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0216 	orr.w	r2, r2, #22
 8002652:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0208 	orr.w	r2, r2, #8
 800266a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e005      	b.n	800268a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026a2:	f7ff fb61 	bl	8001d68 <HAL_GetTick>
 80026a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d008      	beq.n	80026c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e052      	b.n	800276c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0216 	bic.w	r2, r2, #22
 80026d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <HAL_DMA_Abort+0x62>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0208 	bic.w	r2, r2, #8
 8002704:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002716:	e013      	b.n	8002740 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002718:	f7ff fb26 	bl	8001d68 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b05      	cmp	r3, #5
 8002724:	d90c      	bls.n	8002740 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2203      	movs	r2, #3
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e015      	b.n	800276c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1e4      	bne.n	8002718 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	223f      	movs	r2, #63	; 0x3f
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002780:	4b8e      	ldr	r3, [pc, #568]	; (80029bc <HAL_DMA_IRQHandler+0x248>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a8e      	ldr	r2, [pc, #568]	; (80029c0 <HAL_DMA_IRQHandler+0x24c>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	0a9b      	lsrs	r3, r3, #10
 800278c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	2208      	movs	r2, #8
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01a      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0204 	bic.w	r2, r2, #4
 80027c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2208      	movs	r2, #8
 80027ce:	409a      	lsls	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	2201      	movs	r2, #1
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d012      	beq.n	8002816 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	2201      	movs	r2, #1
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f043 0202 	orr.w	r2, r3, #2
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	2204      	movs	r2, #4
 800281c:	409a      	lsls	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	2204      	movs	r2, #4
 800283a:	409a      	lsls	r2, r3
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f043 0204 	orr.w	r2, r3, #4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2210      	movs	r2, #16
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d043      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d03c      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	2210      	movs	r2, #16
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d018      	beq.n	80028b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d108      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d024      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
 80028a2:	e01f      	b.n	80028e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01b      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
 80028b4:	e016      	b.n	80028e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d107      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0208 	bic.w	r2, r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	2220      	movs	r2, #32
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 808f 	beq.w	8002a14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8087 	beq.w	8002a14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2220      	movs	r2, #32
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b05      	cmp	r3, #5
 800291c:	d136      	bne.n	800298c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0216 	bic.w	r2, r2, #22
 800292c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <HAL_DMA_IRQHandler+0x1da>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0208 	bic.w	r2, r2, #8
 800295c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	223f      	movs	r2, #63	; 0x3f
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297e:	2b00      	cmp	r3, #0
 8002980:	d07e      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
        }
        return;
 800298a:	e079      	b.n	8002a80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01d      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10d      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d031      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
 80029b8:	e02c      	b.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
 80029ba:	bf00      	nop
 80029bc:	20000000 	.word	0x20000000
 80029c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d023      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
 80029d4:	e01e      	b.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10f      	bne.n	8002a04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0210 	bic.w	r2, r2, #16
 80029f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d032      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2205      	movs	r2, #5
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	3301      	adds	r3, #1
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d307      	bcc.n	8002a5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f2      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x2cc>
 8002a5a:	e000      	b.n	8002a5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
 8002a7e:	e000      	b.n	8002a82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a80:	bf00      	nop
    }
  }
}
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	d108      	bne.n	8002ac8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ac6:	e007      	b.n	8002ad8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	60da      	str	r2, [r3, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3b10      	subs	r3, #16
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <DMA_CalcBaseAndBitshift+0x64>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <DMA_CalcBaseAndBitshift+0x68>)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d909      	bls.n	8002b26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b1a:	f023 0303 	bic.w	r3, r3, #3
 8002b1e:	1d1a      	adds	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58
 8002b24:	e007      	b.n	8002b36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	aaaaaaab 	.word	0xaaaaaaab
 8002b4c:	08009f74 	.word	0x08009f74

08002b50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11f      	bne.n	8002baa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d856      	bhi.n	8002c1e <DMA_CheckFifoParam+0xce>
 8002b70:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <DMA_CheckFifoParam+0x28>)
 8002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b76:	bf00      	nop
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002b9b 	.word	0x08002b9b
 8002b80:	08002b89 	.word	0x08002b89
 8002b84:	08002c1f 	.word	0x08002c1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d046      	beq.n	8002c22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b98:	e043      	b.n	8002c22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba2:	d140      	bne.n	8002c26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba8:	e03d      	b.n	8002c26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb2:	d121      	bne.n	8002bf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d837      	bhi.n	8002c2a <DMA_CheckFifoParam+0xda>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <DMA_CheckFifoParam+0x70>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bd1 	.word	0x08002bd1
 8002bc4:	08002bd7 	.word	0x08002bd7
 8002bc8:	08002bd1 	.word	0x08002bd1
 8002bcc:	08002be9 	.word	0x08002be9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e030      	b.n	8002c38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d025      	beq.n	8002c2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be6:	e022      	b.n	8002c2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf0:	d11f      	bne.n	8002c32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bf6:	e01c      	b.n	8002c32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d903      	bls.n	8002c06 <DMA_CheckFifoParam+0xb6>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d003      	beq.n	8002c0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c04:	e018      	b.n	8002c38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0a:	e015      	b.n	8002c38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1c:	e00b      	b.n	8002c36 <DMA_CheckFifoParam+0xe6>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e00a      	b.n	8002c38 <DMA_CheckFifoParam+0xe8>
      break;
 8002c22:	bf00      	nop
 8002c24:	e008      	b.n	8002c38 <DMA_CheckFifoParam+0xe8>
      break;
 8002c26:	bf00      	nop
 8002c28:	e006      	b.n	8002c38 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e004      	b.n	8002c38 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e002      	b.n	8002c38 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c32:	bf00      	nop
 8002c34:	e000      	b.n	8002c38 <DMA_CheckFifoParam+0xe8>
      break;
 8002c36:	bf00      	nop
    }
  } 
  
  return status; 
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e159      	b.n	8002f18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f040 8148 	bne.w	8002f12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d005      	beq.n	8002c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d130      	bne.n	8002cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 0201 	and.w	r2, r3, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d017      	beq.n	8002d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d123      	bne.n	8002d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	08da      	lsrs	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3208      	adds	r2, #8
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0203 	and.w	r2, r3, #3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a2 	beq.w	8002f12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a56      	ldr	r2, [pc, #344]	; (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dea:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_GPIO_Init+0x2ec>)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	3302      	adds	r3, #2
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	220f      	movs	r2, #15
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a49      	ldr	r2, [pc, #292]	; (8002f38 <HAL_GPIO_Init+0x2f0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d019      	beq.n	8002e4a <HAL_GPIO_Init+0x202>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a48      	ldr	r2, [pc, #288]	; (8002f3c <HAL_GPIO_Init+0x2f4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0x1fe>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a47      	ldr	r2, [pc, #284]	; (8002f40 <HAL_GPIO_Init+0x2f8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00d      	beq.n	8002e42 <HAL_GPIO_Init+0x1fa>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <HAL_GPIO_Init+0x1f6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a45      	ldr	r2, [pc, #276]	; (8002f48 <HAL_GPIO_Init+0x300>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_GPIO_Init+0x1f2>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e008      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	e006      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e004      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f002 0203 	and.w	r2, r2, #3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	4093      	lsls	r3, r2
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e5c:	4935      	ldr	r1, [pc, #212]	; (8002f34 <HAL_GPIO_Init+0x2ec>)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6a:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e94:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb8:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ebe:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee2:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b0f      	cmp	r3, #15
 8002f1c:	f67f aea2 	bls.w	8002c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40013c00 	.word	0x40013c00

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f6c:	e003      	b.n	8002f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e267      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d075      	beq.n	800308e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa2:	4b88      	ldr	r3, [pc, #544]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d00c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fae:	4b85      	ldr	r3, [pc, #532]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d112      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fba:	4b82      	ldr	r3, [pc, #520]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	4b7e      	ldr	r3, [pc, #504]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05b      	beq.n	800308c <HAL_RCC_OscConfig+0x108>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d157      	bne.n	800308c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e242      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x74>
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a75      	ldr	r2, [pc, #468]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e01d      	b.n	8003034 <HAL_RCC_OscConfig+0xb0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x98>
 8003002:	4b70      	ldr	r3, [pc, #448]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6f      	ldr	r2, [pc, #444]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6c      	ldr	r2, [pc, #432]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xb0>
 800301c:	4b69      	ldr	r3, [pc, #420]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a68      	ldr	r2, [pc, #416]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b66      	ldr	r3, [pc, #408]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a65      	ldr	r2, [pc, #404]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fe94 	bl	8001d68 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003044:	f7fe fe90 	bl	8001d68 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e207      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b5b      	ldr	r3, [pc, #364]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0xc0>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fe80 	bl	8001d68 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fe7c 	bl	8001d68 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e1f3      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0xe8>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d063      	beq.n	8003162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309a:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d11c      	bne.n	80030ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b2:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x152>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e1c7      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4937      	ldr	r1, [pc, #220]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	e03a      	b.n	8003162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f4:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_RCC_OscConfig+0x244>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fe fe35 	bl	8001d68 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003102:	f7fe fe31 	bl	8001d68 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1a8      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4925      	ldr	r1, [pc, #148]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
 8003134:	e015      	b.n	8003162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_RCC_OscConfig+0x244>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fe14 	bl	8001d68 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003144:	f7fe fe10 	bl	8001d68 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e187      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d036      	beq.n	80031dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_RCC_OscConfig+0x248>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7fe fdf4 	bl	8001d68 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003184:	f7fe fdf0 	bl	8001d68 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e167      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x200>
 80031a2:	e01b      	b.n	80031dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_OscConfig+0x248>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7fe fddd 	bl	8001d68 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	e00e      	b.n	80031d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b2:	f7fe fdd9 	bl	8001d68 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d907      	bls.n	80031d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e150      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
 80031c4:	40023800 	.word	0x40023800
 80031c8:	42470000 	.word	0x42470000
 80031cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80031d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ea      	bne.n	80031b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8097 	beq.w	8003318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ee:	4b81      	ldr	r3, [pc, #516]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b7d      	ldr	r3, [pc, #500]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a7c      	ldr	r2, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b7a      	ldr	r3, [pc, #488]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b77      	ldr	r3, [pc, #476]	; (80033f8 <HAL_RCC_OscConfig+0x474>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003226:	4b74      	ldr	r3, [pc, #464]	; (80033f8 <HAL_RCC_OscConfig+0x474>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a73      	ldr	r2, [pc, #460]	; (80033f8 <HAL_RCC_OscConfig+0x474>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7fe fd99 	bl	8001d68 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fe fd95 	bl	8001d68 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e10c      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_OscConfig+0x474>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x2ea>
 8003260:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a63      	ldr	r2, [pc, #396]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
 800326c:	e01c      	b.n	80032a8 <HAL_RCC_OscConfig+0x324>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b05      	cmp	r3, #5
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x30c>
 8003276:	4b5f      	ldr	r3, [pc, #380]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a5e      	ldr	r2, [pc, #376]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
 8003282:	4b5c      	ldr	r3, [pc, #368]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a5b      	ldr	r2, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0x324>
 8003290:	4b58      	ldr	r3, [pc, #352]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a57      	ldr	r2, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	4b55      	ldr	r3, [pc, #340]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a54      	ldr	r2, [pc, #336]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f023 0304 	bic.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d015      	beq.n	80032dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fe fd5a 	bl	8001d68 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fe fd56 	bl	8001d68 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0cb      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ce:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ee      	beq.n	80032b8 <HAL_RCC_OscConfig+0x334>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032dc:	f7fe fd44 	bl	8001d68 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe fd40 	bl	8001d68 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e0b5      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ee      	bne.n	80032e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	4a38      	ldr	r2, [pc, #224]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003316:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a1 	beq.w	8003464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003322:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d05c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d141      	bne.n	80033ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_RCC_OscConfig+0x478>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fe fd14 	bl	8001d68 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003344:	f7fe fd10 	bl	8001d68 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e087      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	491b      	ldr	r1, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x478>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fe fce9 	bl	8001d68 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339a:	f7fe fce5 	bl	8001d68 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e05c      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x416>
 80033b8:	e054      	b.n	8003464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_RCC_OscConfig+0x478>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fcd2 	bl	8001d68 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fcce 	bl	8001d68 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e045      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_OscConfig+0x470>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x444>
 80033e6:	e03d      	b.n	8003464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e038      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000
 80033fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x4ec>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d028      	beq.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d121      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d11a      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003430:	4013      	ands	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003438:	4293      	cmp	r3, r2
 800343a:	d111      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	3b01      	subs	r3, #1
 800344a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d107      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800

08003474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0cc      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b68      	ldr	r3, [pc, #416]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d90c      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b65      	ldr	r3, [pc, #404]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d044      	beq.n	8003594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d119      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d003      	beq.n	8003532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352e:	2b03      	cmp	r3, #3
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e067      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4934      	ldr	r1, [pc, #208]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003564:	f7fe fc00 	bl	8001d68 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7fe fbfc 	bl	8001d68 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d20c      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b22      	ldr	r3, [pc, #136]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4602      	mov	r2, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	5ccb      	ldrb	r3, [r1, r3]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fb60 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00
 8003630:	40023800 	.word	0x40023800
 8003634:	08009f5c 	.word	0x08009f5c
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004

08003640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003644:	b094      	sub	sp, #80	; 0x50
 8003646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	647b      	str	r3, [r7, #68]	; 0x44
 800364c:	2300      	movs	r3, #0
 800364e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003650:	2300      	movs	r3, #0
 8003652:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003658:	4b79      	ldr	r3, [pc, #484]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d00d      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x40>
 8003664:	2b08      	cmp	r3, #8
 8003666:	f200 80e1 	bhi.w	800382c <HAL_RCC_GetSysClockFreq+0x1ec>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x34>
 800366e:	2b04      	cmp	r3, #4
 8003670:	d003      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x3a>
 8003672:	e0db      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_GetSysClockFreq+0x204>)
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003678:	e0db      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800367a:	4b73      	ldr	r3, [pc, #460]	; (8003848 <HAL_RCC_GetSysClockFreq+0x208>)
 800367c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800367e:	e0d8      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003688:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800368a:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003696:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	2200      	movs	r2, #0
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
 80036ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036b2:	4622      	mov	r2, r4
 80036b4:	462b      	mov	r3, r5
 80036b6:	f04f 0000 	mov.w	r0, #0
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	0159      	lsls	r1, r3, #5
 80036c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c4:	0150      	lsls	r0, r2, #5
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4621      	mov	r1, r4
 80036cc:	1a51      	subs	r1, r2, r1
 80036ce:	6139      	str	r1, [r7, #16]
 80036d0:	4629      	mov	r1, r5
 80036d2:	eb63 0301 	sbc.w	r3, r3, r1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e4:	4659      	mov	r1, fp
 80036e6:	018b      	lsls	r3, r1, #6
 80036e8:	4651      	mov	r1, sl
 80036ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ee:	4651      	mov	r1, sl
 80036f0:	018a      	lsls	r2, r1, #6
 80036f2:	4651      	mov	r1, sl
 80036f4:	ebb2 0801 	subs.w	r8, r2, r1
 80036f8:	4659      	mov	r1, fp
 80036fa:	eb63 0901 	sbc.w	r9, r3, r1
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800370a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800370e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003712:	4690      	mov	r8, r2
 8003714:	4699      	mov	r9, r3
 8003716:	4623      	mov	r3, r4
 8003718:	eb18 0303 	adds.w	r3, r8, r3
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	462b      	mov	r3, r5
 8003720:	eb49 0303 	adc.w	r3, r9, r3
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003732:	4629      	mov	r1, r5
 8003734:	024b      	lsls	r3, r1, #9
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800373c:	4621      	mov	r1, r4
 800373e:	024a      	lsls	r2, r1, #9
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003746:	2200      	movs	r2, #0
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800374c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003750:	f7fd fa32 	bl	8000bb8 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375c:	e058      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4b38      	ldr	r3, [pc, #224]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	2200      	movs	r2, #0
 8003766:	4618      	mov	r0, r3
 8003768:	4611      	mov	r1, r2
 800376a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800376e:	623b      	str	r3, [r7, #32]
 8003770:	2300      	movs	r3, #0
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003778:	4642      	mov	r2, r8
 800377a:	464b      	mov	r3, r9
 800377c:	f04f 0000 	mov.w	r0, #0
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	0159      	lsls	r1, r3, #5
 8003786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800378a:	0150      	lsls	r0, r2, #5
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4641      	mov	r1, r8
 8003792:	ebb2 0a01 	subs.w	sl, r2, r1
 8003796:	4649      	mov	r1, r9
 8003798:	eb63 0b01 	sbc.w	fp, r3, r1
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037b0:	ebb2 040a 	subs.w	r4, r2, sl
 80037b4:	eb63 050b 	sbc.w	r5, r3, fp
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	00eb      	lsls	r3, r5, #3
 80037c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037c6:	00e2      	lsls	r2, r4, #3
 80037c8:	4614      	mov	r4, r2
 80037ca:	461d      	mov	r5, r3
 80037cc:	4643      	mov	r3, r8
 80037ce:	18e3      	adds	r3, r4, r3
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	464b      	mov	r3, r9
 80037d4:	eb45 0303 	adc.w	r3, r5, r3
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037e6:	4629      	mov	r1, r5
 80037e8:	028b      	lsls	r3, r1, #10
 80037ea:	4621      	mov	r1, r4
 80037ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f0:	4621      	mov	r1, r4
 80037f2:	028a      	lsls	r2, r1, #10
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fa:	2200      	movs	r2, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	61fa      	str	r2, [r7, #28]
 8003800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003804:	f7fd f9d8 	bl	8000bb8 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4613      	mov	r3, r2
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	3301      	adds	r3, #1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003820:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800382a:	e002      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetSysClockFreq+0x204>)
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003834:	4618      	mov	r0, r3
 8003836:	3750      	adds	r7, #80	; 0x50
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	00f42400 	.word	0x00f42400
 8003848:	007a1200 	.word	0x007a1200

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_RCC_GetHCLKFreq+0x14>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000000 	.word	0x20000000

08003864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003868:	f7ff fff0 	bl	800384c <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0a9b      	lsrs	r3, r3, #10
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4903      	ldr	r1, [pc, #12]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40023800 	.word	0x40023800
 8003888:	08009f6c 	.word	0x08009f6c

0800388c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003890:	f7ff ffdc 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0b5b      	lsrs	r3, r3, #13
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08009f6c 	.word	0x08009f6c

080038b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e03f      	b.n	8003946 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd ffa2 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fc23 	bl	8004144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800392c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b08a      	sub	sp, #40	; 0x28
 8003952:	af02      	add	r7, sp, #8
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b20      	cmp	r3, #32
 800396c:	d17c      	bne.n	8003a68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_UART_Transmit+0x2c>
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e075      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_UART_Transmit+0x3e>
 8003988:	2302      	movs	r3, #2
 800398a:	e06e      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2221      	movs	r2, #33	; 0x21
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039a2:	f7fe f9e1 	bl	8001d68 <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	88fa      	ldrh	r2, [r7, #6]
 80039b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039bc:	d108      	bne.n	80039d0 <HAL_UART_Transmit+0x82>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e003      	b.n	80039d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039e0:	e02a      	b.n	8003a38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2180      	movs	r1, #128	; 0x80
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fa11 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e036      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	3302      	adds	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e007      	b.n	8003a2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1cf      	bne.n	80039e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2140      	movs	r1, #64	; 0x40
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f9e1 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e006      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d11d      	bne.n	8003ac8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_UART_Receive_DMA+0x26>
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e016      	b.n	8003aca <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Receive_DMA+0x38>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e00f      	b.n	8003aca <HAL_UART_Receive_DMA+0x58>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fa16 	bl	8003ef0 <UART_Start_Receive_DMA>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b090      	sub	sp, #64	; 0x40
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b21      	cmp	r3, #33	; 0x21
 8003afe:	d128      	bne.n	8003b52 <HAL_UART_DMAStop+0x80>
 8003b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d025      	beq.n	8003b52 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3314      	adds	r3, #20
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	623b      	str	r3, [r7, #32]
   return(result);
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3314      	adds	r3, #20
 8003b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b26:	633a      	str	r2, [r7, #48]	; 0x30
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e5      	bne.n	8003b06 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fe fda4 	bl	8002694 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fa6d 	bl	800402c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b22      	cmp	r3, #34	; 0x22
 8003b72:	d128      	bne.n	8003bc6 <HAL_UART_DMAStop+0xf4>
 8003b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d025      	beq.n	8003bc6 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3314      	adds	r3, #20
 8003b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b9a:	61fa      	str	r2, [r7, #28]
 8003b9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	69b9      	ldr	r1, [r7, #24]
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e5      	bne.n	8003b7a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fd6a 	bl	8002694 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fa5b 	bl	800407c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3740      	adds	r7, #64	; 0x40
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b09c      	sub	sp, #112	; 0x70
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d172      	bne.n	8003d26 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	2200      	movs	r2, #0
 8003c44:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c66:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	667b      	str	r3, [r7, #100]	; 0x64
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c9a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cce:	633a      	str	r2, [r7, #48]	; 0x30
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d119      	bne.n	8003d26 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f023 0310 	bic.w	r3, r3, #16
 8003d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	330c      	adds	r3, #12
 8003d10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d12:	61fa      	str	r2, [r7, #28]
 8003d14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	69b9      	ldr	r1, [r7, #24]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e5      	bne.n	8003cf2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d106      	bne.n	8003d3c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d32:	4619      	mov	r1, r3
 8003d34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d36:	f7ff ff69 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d3a:	e002      	b.n	8003d42 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003d3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d3e:	f7ff ff47 	bl	8003bd0 <HAL_UART_RxCpltCallback>
}
 8003d42:	bf00      	nop
 8003d44:	3770      	adds	r7, #112	; 0x70
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d108      	bne.n	8003d72 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4619      	mov	r1, r3
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff ff4e 	bl	8003c0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d70:	e002      	b.n	8003d78 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff ff36 	bl	8003be4 <HAL_UART_RxHalfCpltCallback>
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b21      	cmp	r3, #33	; 0x21
 8003db2:	d108      	bne.n	8003dc6 <UART_DMAError+0x46>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003dc0:	68b8      	ldr	r0, [r7, #8]
 8003dc2:	f000 f933 	bl	800402c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b22      	cmp	r3, #34	; 0x22
 8003de6:	d108      	bne.n	8003dfa <UART_DMAError+0x7a>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2200      	movs	r2, #0
 8003df2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003df4:	68b8      	ldr	r0, [r7, #8]
 8003df6:	f000 f941 	bl	800407c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f043 0210 	orr.w	r2, r3, #16
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e06:	68b8      	ldr	r0, [r7, #8]
 8003e08:	f7ff fef6 	bl	8003bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e0c:	bf00      	nop
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b090      	sub	sp, #64	; 0x40
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e24:	e050      	b.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d04c      	beq.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e34:	f7fd ff98 	bl	8001d68 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d241      	bcs.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e64:	637a      	str	r2, [r7, #52]	; 0x34
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e5      	bne.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	613b      	str	r3, [r7, #16]
   return(result);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3314      	adds	r3, #20
 8003e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e98:	623a      	str	r2, [r7, #32]
 8003e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	69f9      	ldr	r1, [r7, #28]
 8003e9e:	6a3a      	ldr	r2, [r7, #32]
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e00f      	b.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d09f      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3740      	adds	r7, #64	; 0x40
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b098      	sub	sp, #96	; 0x60
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2222      	movs	r2, #34	; 0x22
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	4a40      	ldr	r2, [pc, #256]	; (8004020 <UART_Start_Receive_DMA+0x130>)
 8003f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	4a3f      	ldr	r2, [pc, #252]	; (8004024 <UART_Start_Receive_DMA+0x134>)
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	4a3e      	ldr	r2, [pc, #248]	; (8004028 <UART_Start_Receive_DMA+0x138>)
 8003f2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	2200      	movs	r2, #0
 8003f36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f38:	f107 0308 	add.w	r3, r7, #8
 8003f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	f7fe fb48 	bl	80025e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f90:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003f9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e5      	bne.n	8003f7a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	657b      	str	r3, [r7, #84]	; 0x54
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fce:	63ba      	str	r2, [r7, #56]	; 0x38
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff8:	653b      	str	r3, [r7, #80]	; 0x50
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004002:	627a      	str	r2, [r7, #36]	; 0x24
 8004004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6a39      	ldr	r1, [r7, #32]
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3760      	adds	r7, #96	; 0x60
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	08003c25 	.word	0x08003c25
 8004024:	08003d4b 	.word	0x08003d4b
 8004028:	08003d81 	.word	0x08003d81

0800402c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60bb      	str	r3, [r7, #8]
   return(result);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	61ba      	str	r2, [r7, #24]
 8004056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6979      	ldr	r1, [r7, #20]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	613b      	str	r3, [r7, #16]
   return(result);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004070:	bf00      	nop
 8004072:	3724      	adds	r7, #36	; 0x24
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b095      	sub	sp, #84	; 0x54
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040a4:	643a      	str	r2, [r7, #64]	; 0x40
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e5      	bne.n	8004084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3314      	adds	r3, #20
 80040be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3314      	adds	r3, #20
 80040d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e5      	bne.n	80040b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d119      	bne.n	8004128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	60bb      	str	r3, [r7, #8]
   return(result);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f023 0310 	bic.w	r3, r3, #16
 800410a:	647b      	str	r3, [r7, #68]	; 0x44
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004114:	61ba      	str	r2, [r7, #24]
 8004116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6979      	ldr	r1, [r7, #20]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	613b      	str	r3, [r7, #16]
   return(result);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e5      	bne.n	80040f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004136:	bf00      	nop
 8004138:	3754      	adds	r7, #84	; 0x54
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b0c0      	sub	sp, #256	; 0x100
 800414a:	af00      	add	r7, sp, #0
 800414c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	68d9      	ldr	r1, [r3, #12]
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	ea40 0301 	orr.w	r3, r0, r1
 800416c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	431a      	orrs	r2, r3
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800419c:	f021 010c 	bic.w	r1, r1, #12
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041aa:	430b      	orrs	r3, r1
 80041ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041be:	6999      	ldr	r1, [r3, #24]
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	ea40 0301 	orr.w	r3, r0, r1
 80041ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b8f      	ldr	r3, [pc, #572]	; (8004410 <UART_SetConfig+0x2cc>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d005      	beq.n	80041e4 <UART_SetConfig+0xa0>
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b8d      	ldr	r3, [pc, #564]	; (8004414 <UART_SetConfig+0x2d0>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d104      	bne.n	80041ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7ff fb52 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 80041e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041ec:	e003      	b.n	80041f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ee:	f7ff fb39 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 80041f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004200:	f040 810c 	bne.w	800441c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800420e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004216:	4622      	mov	r2, r4
 8004218:	462b      	mov	r3, r5
 800421a:	1891      	adds	r1, r2, r2
 800421c:	65b9      	str	r1, [r7, #88]	; 0x58
 800421e:	415b      	adcs	r3, r3
 8004220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004226:	4621      	mov	r1, r4
 8004228:	eb12 0801 	adds.w	r8, r2, r1
 800422c:	4629      	mov	r1, r5
 800422e:	eb43 0901 	adc.w	r9, r3, r1
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004246:	4690      	mov	r8, r2
 8004248:	4699      	mov	r9, r3
 800424a:	4623      	mov	r3, r4
 800424c:	eb18 0303 	adds.w	r3, r8, r3
 8004250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004254:	462b      	mov	r3, r5
 8004256:	eb49 0303 	adc.w	r3, r9, r3
 800425a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800426a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800426e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004272:	460b      	mov	r3, r1
 8004274:	18db      	adds	r3, r3, r3
 8004276:	653b      	str	r3, [r7, #80]	; 0x50
 8004278:	4613      	mov	r3, r2
 800427a:	eb42 0303 	adc.w	r3, r2, r3
 800427e:	657b      	str	r3, [r7, #84]	; 0x54
 8004280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004288:	f7fc fc96 	bl	8000bb8 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4b61      	ldr	r3, [pc, #388]	; (8004418 <UART_SetConfig+0x2d4>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	011c      	lsls	r4, r3, #4
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80042b4:	415b      	adcs	r3, r3
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042bc:	4641      	mov	r1, r8
 80042be:	eb12 0a01 	adds.w	sl, r2, r1
 80042c2:	4649      	mov	r1, r9
 80042c4:	eb43 0b01 	adc.w	fp, r3, r1
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042dc:	4692      	mov	sl, r2
 80042de:	469b      	mov	fp, r3
 80042e0:	4643      	mov	r3, r8
 80042e2:	eb1a 0303 	adds.w	r3, sl, r3
 80042e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ea:	464b      	mov	r3, r9
 80042ec:	eb4b 0303 	adc.w	r3, fp, r3
 80042f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004300:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004308:	460b      	mov	r3, r1
 800430a:	18db      	adds	r3, r3, r3
 800430c:	643b      	str	r3, [r7, #64]	; 0x40
 800430e:	4613      	mov	r3, r2
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
 8004316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800431a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800431e:	f7fc fc4b 	bl	8000bb8 <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4611      	mov	r1, r2
 8004328:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <UART_SetConfig+0x2d4>)
 800432a:	fba3 2301 	umull	r2, r3, r3, r1
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2264      	movs	r2, #100	; 0x64
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	1acb      	subs	r3, r1, r3
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800433e:	4b36      	ldr	r3, [pc, #216]	; (8004418 <UART_SetConfig+0x2d4>)
 8004340:	fba3 2302 	umull	r2, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800434c:	441c      	add	r4, r3
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004358:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800435c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	63b9      	str	r1, [r7, #56]	; 0x38
 8004368:	415b      	adcs	r3, r3
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	6339      	str	r1, [r7, #48]	; 0x30
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043a4:	464b      	mov	r3, r9
 80043a6:	460a      	mov	r2, r1
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043c4:	460b      	mov	r3, r1
 80043c6:	18db      	adds	r3, r3, r3
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ca:	4613      	mov	r3, r2
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043da:	f7fc fbed 	bl	8000bb8 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <UART_SetConfig+0x2d4>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	; 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a08      	ldr	r2, [pc, #32]	; (8004418 <UART_SetConfig+0x2d4>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 0207 	and.w	r2, r3, #7
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4422      	add	r2, r4
 800440a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800440c:	e105      	b.n	800461a <UART_SetConfig+0x4d6>
 800440e:	bf00      	nop
 8004410:	40011000 	.word	0x40011000
 8004414:	40011400 	.word	0x40011400
 8004418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800441c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004420:	2200      	movs	r2, #0
 8004422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004426:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800442a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800442e:	4642      	mov	r2, r8
 8004430:	464b      	mov	r3, r9
 8004432:	1891      	adds	r1, r2, r2
 8004434:	6239      	str	r1, [r7, #32]
 8004436:	415b      	adcs	r3, r3
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800443e:	4641      	mov	r1, r8
 8004440:	1854      	adds	r4, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb43 0501 	adc.w	r5, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	00eb      	lsls	r3, r5, #3
 8004452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004456:	00e2      	lsls	r2, r4, #3
 8004458:	4614      	mov	r4, r2
 800445a:	461d      	mov	r5, r3
 800445c:	4643      	mov	r3, r8
 800445e:	18e3      	adds	r3, r4, r3
 8004460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004464:	464b      	mov	r3, r9
 8004466:	eb45 0303 	adc.w	r3, r5, r3
 800446a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800447a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800448a:	4629      	mov	r1, r5
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004494:	4621      	mov	r1, r4
 8004496:	008a      	lsls	r2, r1, #2
 8004498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800449c:	f7fc fb8c 	bl	8000bb8 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b60      	ldr	r3, [pc, #384]	; (8004628 <UART_SetConfig+0x4e4>)
 80044a6:	fba3 2302 	umull	r2, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	011c      	lsls	r4, r3, #4
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	61b9      	str	r1, [r7, #24]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6139      	str	r1, [r7, #16]
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004504:	464b      	mov	r3, r9
 8004506:	460a      	mov	r2, r1
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	67bb      	str	r3, [r7, #120]	; 0x78
 800451a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004528:	4649      	mov	r1, r9
 800452a:	008b      	lsls	r3, r1, #2
 800452c:	4641      	mov	r1, r8
 800452e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004532:	4641      	mov	r1, r8
 8004534:	008a      	lsls	r2, r1, #2
 8004536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800453a:	f7fc fb3d 	bl	8000bb8 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4b39      	ldr	r3, [pc, #228]	; (8004628 <UART_SetConfig+0x4e4>)
 8004544:	fba3 1302 	umull	r1, r3, r3, r2
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	2164      	movs	r1, #100	; 0x64
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	3332      	adds	r3, #50	; 0x32
 8004556:	4a34      	ldr	r2, [pc, #208]	; (8004628 <UART_SetConfig+0x4e4>)
 8004558:	fba2 2303 	umull	r2, r3, r2, r3
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004562:	441c      	add	r4, r3
 8004564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004568:	2200      	movs	r2, #0
 800456a:	673b      	str	r3, [r7, #112]	; 0x70
 800456c:	677a      	str	r2, [r7, #116]	; 0x74
 800456e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004572:	4642      	mov	r2, r8
 8004574:	464b      	mov	r3, r9
 8004576:	1891      	adds	r1, r2, r2
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	415b      	adcs	r3, r3
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004582:	4641      	mov	r1, r8
 8004584:	1851      	adds	r1, r2, r1
 8004586:	6039      	str	r1, [r7, #0]
 8004588:	4649      	mov	r1, r9
 800458a:	414b      	adcs	r3, r1
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800459a:	4659      	mov	r1, fp
 800459c:	00cb      	lsls	r3, r1, #3
 800459e:	4651      	mov	r1, sl
 80045a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a4:	4651      	mov	r1, sl
 80045a6:	00ca      	lsls	r2, r1, #3
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	4603      	mov	r3, r0
 80045ae:	4642      	mov	r2, r8
 80045b0:	189b      	adds	r3, r3, r2
 80045b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b4:	464b      	mov	r3, r9
 80045b6:	460a      	mov	r2, r1
 80045b8:	eb42 0303 	adc.w	r3, r2, r3
 80045bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	663b      	str	r3, [r7, #96]	; 0x60
 80045c8:	667a      	str	r2, [r7, #100]	; 0x64
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045d6:	4649      	mov	r1, r9
 80045d8:	008b      	lsls	r3, r1, #2
 80045da:	4641      	mov	r1, r8
 80045dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e0:	4641      	mov	r1, r8
 80045e2:	008a      	lsls	r2, r1, #2
 80045e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045e8:	f7fc fae6 	bl	8000bb8 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <UART_SetConfig+0x4e4>)
 80045f2:	fba3 1302 	umull	r1, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2164      	movs	r1, #100	; 0x64
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	3332      	adds	r3, #50	; 0x32
 8004604:	4a08      	ldr	r2, [pc, #32]	; (8004628 <UART_SetConfig+0x4e4>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	f003 020f 	and.w	r2, r3, #15
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4422      	add	r2, r4
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	bf00      	nop
 800461c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004620:	46bd      	mov	sp, r7
 8004622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004626:	bf00      	nop
 8004628:	51eb851f 	.word	0x51eb851f

0800462c <__NVIC_SetPriority>:
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	6039      	str	r1, [r7, #0]
 8004636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	db0a      	blt.n	8004656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	490c      	ldr	r1, [pc, #48]	; (8004678 <__NVIC_SetPriority+0x4c>)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	440b      	add	r3, r1
 8004650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004654:	e00a      	b.n	800466c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4908      	ldr	r1, [pc, #32]	; (800467c <__NVIC_SetPriority+0x50>)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	3b04      	subs	r3, #4
 8004664:	0112      	lsls	r2, r2, #4
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	440b      	add	r3, r1
 800466a:	761a      	strb	r2, [r3, #24]
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e000e100 	.word	0xe000e100
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004684:	2100      	movs	r1, #0
 8004686:	f06f 0004 	mvn.w	r0, #4
 800468a:	f7ff ffcf 	bl	800462c <__NVIC_SetPriority>
#endif
}
 800468e:	bf00      	nop
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800469a:	f3ef 8305 	mrs	r3, IPSR
 800469e:	603b      	str	r3, [r7, #0]
  return(result);
 80046a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046a6:	f06f 0305 	mvn.w	r3, #5
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	e00c      	b.n	80046c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046ae:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <osKernelInitialize+0x44>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d105      	bne.n	80046c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <osKernelInitialize+0x44>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046bc:	2300      	movs	r3, #0
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	e002      	b.n	80046c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046c8:	687b      	ldr	r3, [r7, #4]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000bf8 	.word	0x20000bf8

080046dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e2:	f3ef 8305 	mrs	r3, IPSR
 80046e6:	603b      	str	r3, [r7, #0]
  return(result);
 80046e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80046ee:	f06f 0305 	mvn.w	r3, #5
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	e010      	b.n	8004718 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <osKernelStart+0x48>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d109      	bne.n	8004712 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046fe:	f7ff ffbf 	bl	8004680 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004702:	4b08      	ldr	r3, [pc, #32]	; (8004724 <osKernelStart+0x48>)
 8004704:	2202      	movs	r2, #2
 8004706:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004708:	f001 f87c 	bl	8005804 <vTaskStartScheduler>
      stat = osOK;
 800470c:	2300      	movs	r3, #0
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	e002      	b.n	8004718 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
 8004716:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004718:	687b      	ldr	r3, [r7, #4]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000bf8 	.word	0x20000bf8

08004728 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	; 0x38
 800472c:	af04      	add	r7, sp, #16
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004738:	f3ef 8305 	mrs	r3, IPSR
 800473c:	617b      	str	r3, [r7, #20]
  return(result);
 800473e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004740:	2b00      	cmp	r3, #0
 8004742:	d17e      	bne.n	8004842 <osThreadNew+0x11a>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d07b      	beq.n	8004842 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800474e:	2318      	movs	r3, #24
 8004750:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
 800475a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d045      	beq.n	80047ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <osThreadNew+0x48>
        name = attr->name;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <osThreadNew+0x6e>
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b38      	cmp	r3, #56	; 0x38
 8004788:	d805      	bhi.n	8004796 <osThreadNew+0x6e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <osThreadNew+0x72>
        return (NULL);
 8004796:	2300      	movs	r3, #0
 8004798:	e054      	b.n	8004844 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	089b      	lsrs	r3, r3, #2
 80047a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00e      	beq.n	80047d0 <osThreadNew+0xa8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2bbb      	cmp	r3, #187	; 0xbb
 80047b8:	d90a      	bls.n	80047d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d006      	beq.n	80047d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <osThreadNew+0xa8>
        mem = 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e010      	b.n	80047f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10c      	bne.n	80047f2 <osThreadNew+0xca>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d108      	bne.n	80047f2 <osThreadNew+0xca>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <osThreadNew+0xca>
          mem = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e001      	b.n	80047f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d110      	bne.n	800481a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004800:	9202      	str	r2, [sp, #8]
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fe0c 	bl	800542c <xTaskCreateStatic>
 8004814:	4603      	mov	r3, r0
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e013      	b.n	8004842 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	b29a      	uxth	r2, r3
 8004824:	f107 0310 	add.w	r3, r7, #16
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fe57 	bl	80054e6 <xTaskCreate>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d001      	beq.n	8004842 <osThreadNew+0x11a>
            hTask = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004842:	693b      	ldr	r3, [r7, #16]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3728      	adds	r7, #40	; 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004854:	f3ef 8305 	mrs	r3, IPSR
 8004858:	60bb      	str	r3, [r7, #8]
  return(result);
 800485a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <osDelay+0x1c>
    stat = osErrorISR;
 8004860:	f06f 0305 	mvn.w	r3, #5
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e007      	b.n	8004878 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 ff92 	bl	800579c <vTaskDelay>
    }
  }

  return (stat);
 8004878:	68fb      	ldr	r3, [r7, #12]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004894:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4a06      	ldr	r2, [pc, #24]	; (80048b4 <vApplicationGetIdleTaskMemory+0x30>)
 800489a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2280      	movs	r2, #128	; 0x80
 80048a0:	601a      	str	r2, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20000bfc 	.word	0x20000bfc
 80048b4:	20000cb8 	.word	0x20000cb8

080048b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a07      	ldr	r2, [pc, #28]	; (80048e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80048c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a06      	ldr	r2, [pc, #24]	; (80048e8 <vApplicationGetTimerTaskMemory+0x30>)
 80048ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048d6:	601a      	str	r2, [r3, #0]
}
 80048d8:	bf00      	nop
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	20000eb8 	.word	0x20000eb8
 80048e8:	20000f74 	.word	0x20000f74

080048ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f103 0208 	add.w	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f103 0208 	add.w	r2, r3, #8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f103 0208 	add.w	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d103      	bne.n	80049ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e00c      	b.n	80049c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3308      	adds	r3, #8
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e002      	b.n	80049bc <vListInsert+0x2e>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d2f6      	bcs.n	80049b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6892      	ldr	r2, [r2, #8]
 8004a16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6852      	ldr	r2, [r2, #4]
 8004a20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d103      	bne.n	8004a34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	1e5a      	subs	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a7e:	f002 f879 	bl	8006b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	441a      	add	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	22ff      	movs	r2, #255	; 0xff
 8004ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	22ff      	movs	r2, #255	; 0xff
 8004aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d114      	bne.n	8004afe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01a      	beq.n	8004b12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3310      	adds	r3, #16
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 f929 	bl	8005d38 <xTaskRemoveFromEventList>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d012      	beq.n	8004b12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <xQueueGenericReset+0xcc>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	e009      	b.n	8004b12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3310      	adds	r3, #16
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fef2 	bl	80048ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3324      	adds	r3, #36	; 0x24
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff feed 	bl	80048ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b12:	f002 f85f 	bl	8006bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b16:	2301      	movs	r3, #1
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	; 0x38
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <xQueueGenericCreateStatic+0x52>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <xQueueGenericCreateStatic+0x56>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <xQueueGenericCreateStatic+0x58>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	623b      	str	r3, [r7, #32]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <xQueueGenericCreateStatic+0x7e>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <xQueueGenericCreateStatic+0x82>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueGenericCreateStatic+0x84>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61fb      	str	r3, [r7, #28]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bc2:	2350      	movs	r3, #80	; 0x50
 8004bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b50      	cmp	r3, #80	; 0x50
 8004bca:	d00a      	beq.n	8004be2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	61bb      	str	r3, [r7, #24]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004be2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f805 	bl	8004c14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3730      	adds	r7, #48	; 0x30
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e002      	b.n	8004c36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c42:	2101      	movs	r1, #1
 8004c44:	69b8      	ldr	r0, [r7, #24]
 8004c46:	f7ff ff05 	bl	8004a54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	78fa      	ldrb	r2, [r7, #3]
 8004c4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08e      	sub	sp, #56	; 0x38
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <xQueueGenericSend+0x32>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c8a:	bf00      	nop
 8004c8c:	e7fe      	b.n	8004c8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <xQueueGenericSend+0x40>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <xQueueGenericSend+0x44>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <xQueueGenericSend+0x46>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <xQueueGenericSend+0x60>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d103      	bne.n	8004cca <xQueueGenericSend+0x6e>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <xQueueGenericSend+0x72>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueGenericSend+0x74>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <xQueueGenericSend+0x8e>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	623b      	str	r3, [r7, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cea:	f001 f9e7 	bl	80060bc <xTaskGetSchedulerState>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <xQueueGenericSend+0x9e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <xQueueGenericSend+0xa2>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <xQueueGenericSend+0xa4>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <xQueueGenericSend+0xbe>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	61fb      	str	r3, [r7, #28]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d1a:	f001 ff2b 	bl	8006b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <xQueueGenericSend+0xd4>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d129      	bne.n	8004d84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d36:	f000 fa0b 	bl	8005150 <prvCopyDataToQueue>
 8004d3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d010      	beq.n	8004d66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	3324      	adds	r3, #36	; 0x24
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fff5 	bl	8005d38 <xTaskRemoveFromEventList>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d54:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <xQueueGenericSend+0x1f8>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	e00a      	b.n	8004d7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d6c:	4b39      	ldr	r3, [pc, #228]	; (8004e54 <xQueueGenericSend+0x1f8>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d7c:	f001 ff2a 	bl	8006bd4 <vPortExitCritical>
				return pdPASS;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e063      	b.n	8004e4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d103      	bne.n	8004d92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d8a:	f001 ff23 	bl	8006bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e05c      	b.n	8004e4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f82f 	bl	8005e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004da2:	2301      	movs	r3, #1
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004da6:	f001 ff15 	bl	8006bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004daa:	f000 fd9b 	bl	80058e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dae:	f001 fee1 	bl	8006b74 <vPortEnterCritical>
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db8:	b25b      	sxtb	r3, r3
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d103      	bne.n	8004dc8 <xQueueGenericSend+0x16c>
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dce:	b25b      	sxtb	r3, r3
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d103      	bne.n	8004dde <xQueueGenericSend+0x182>
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dde:	f001 fef9 	bl	8006bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004de2:	1d3a      	adds	r2, r7, #4
 8004de4:	f107 0314 	add.w	r3, r7, #20
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 f81e 	bl	8005e2c <xTaskCheckForTimeOut>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d124      	bne.n	8004e40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004df8:	f000 faa2 	bl	8005340 <prvIsQueueFull>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d018      	beq.n	8004e34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	3310      	adds	r3, #16
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 ff44 	bl	8005c98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e12:	f000 fa2d 	bl	8005270 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e16:	f000 fd73 	bl	8005900 <xTaskResumeAll>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f af7c 	bne.w	8004d1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <xQueueGenericSend+0x1f8>)
 8004e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	e772      	b.n	8004d1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e36:	f000 fa1b 	bl	8005270 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e3a:	f000 fd61 	bl	8005900 <xTaskResumeAll>
 8004e3e:	e76c      	b.n	8004d1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e42:	f000 fa15 	bl	8005270 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e46:	f000 fd5b 	bl	8005900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3738      	adds	r7, #56	; 0x38
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b090      	sub	sp, #64	; 0x40
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d103      	bne.n	8004e94 <xQueueGenericSendFromISR+0x3c>
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <xQueueGenericSendFromISR+0x40>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <xQueueGenericSendFromISR+0x42>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d103      	bne.n	8004ec2 <xQueueGenericSendFromISR+0x6a>
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <xQueueGenericSendFromISR+0x6e>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <xQueueGenericSendFromISR+0x70>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	623b      	str	r3, [r7, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ee2:	f001 ff29 	bl	8006d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	61fa      	str	r2, [r7, #28]
 8004efc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004efe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <xQueueGenericSendFromISR+0xbc>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d12f      	bne.n	8004f74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f2a:	f000 f911 	bl	8005150 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d112      	bne.n	8004f5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d016      	beq.n	8004f6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fef7 	bl	8005d38 <xTaskRemoveFromEventList>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00e      	beq.n	8004f6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e007      	b.n	8004f6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f62:	3301      	adds	r3, #1
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	b25a      	sxtb	r2, r3
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004f72:	e001      	b.n	8004f78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3740      	adds	r7, #64	; 0x40
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08c      	sub	sp, #48	; 0x30
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <xQueueReceive+0x30>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	623b      	str	r3, [r7, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d103      	bne.n	8004fce <xQueueReceive+0x3e>
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <xQueueReceive+0x42>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <xQueueReceive+0x44>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <xQueueReceive+0x5e>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	61fb      	str	r3, [r7, #28]
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fee:	f001 f865 	bl	80060bc <xTaskGetSchedulerState>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <xQueueReceive+0x6e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <xQueueReceive+0x72>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xQueueReceive+0x74>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10a      	bne.n	800501e <xQueueReceive+0x8e>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	61bb      	str	r3, [r7, #24]
}
 800501a:	bf00      	nop
 800501c:	e7fe      	b.n	800501c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800501e:	f001 fda9 	bl	8006b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	2b00      	cmp	r3, #0
 800502c:	d01f      	beq.n	800506e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005032:	f000 f8f7 	bl	8005224 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00f      	beq.n	8005066 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	3310      	adds	r3, #16
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fe74 	bl	8005d38 <xTaskRemoveFromEventList>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d007      	beq.n	8005066 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005056:	4b3d      	ldr	r3, [pc, #244]	; (800514c <xQueueReceive+0x1bc>)
 8005058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005066:	f001 fdb5 	bl	8006bd4 <vPortExitCritical>
				return pdPASS;
 800506a:	2301      	movs	r3, #1
 800506c:	e069      	b.n	8005142 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d103      	bne.n	800507c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005074:	f001 fdae 	bl	8006bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005078:	2300      	movs	r3, #0
 800507a:	e062      	b.n	8005142 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005082:	f107 0310 	add.w	r3, r7, #16
 8005086:	4618      	mov	r0, r3
 8005088:	f000 feba 	bl	8005e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800508c:	2301      	movs	r3, #1
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005090:	f001 fda0 	bl	8006bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005094:	f000 fc26 	bl	80058e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005098:	f001 fd6c 	bl	8006b74 <vPortEnterCritical>
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050a2:	b25b      	sxtb	r3, r3
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d103      	bne.n	80050b2 <xQueueReceive+0x122>
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b8:	b25b      	sxtb	r3, r3
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	d103      	bne.n	80050c8 <xQueueReceive+0x138>
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c8:	f001 fd84 	bl	8006bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050cc:	1d3a      	adds	r2, r7, #4
 80050ce:	f107 0310 	add.w	r3, r7, #16
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fea9 	bl	8005e2c <xTaskCheckForTimeOut>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d123      	bne.n	8005128 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e2:	f000 f917 	bl	8005314 <prvIsQueueEmpty>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d017      	beq.n	800511c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	3324      	adds	r3, #36	; 0x24
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fdcf 	bl	8005c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fc:	f000 f8b8 	bl	8005270 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005100:	f000 fbfe 	bl	8005900 <xTaskResumeAll>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d189      	bne.n	800501e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <xQueueReceive+0x1bc>)
 800510c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	e780      	b.n	800501e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800511c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800511e:	f000 f8a7 	bl	8005270 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005122:	f000 fbed 	bl	8005900 <xTaskResumeAll>
 8005126:	e77a      	b.n	800501e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800512a:	f000 f8a1 	bl	8005270 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800512e:	f000 fbe7 	bl	8005900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005134:	f000 f8ee 	bl	8005314 <prvIsQueueEmpty>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	f43f af6f 	beq.w	800501e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005140:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005142:	4618      	mov	r0, r3
 8005144:	3730      	adds	r7, #48	; 0x30
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10d      	bne.n	800518a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d14d      	bne.n	8005212 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 ffbc 	bl	80060f8 <xTaskPriorityDisinherit>
 8005180:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	e043      	b.n	8005212 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d119      	bne.n	80051c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6858      	ldr	r0, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	461a      	mov	r2, r3
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	f002 f91b 	bl	80073d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	441a      	add	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d32b      	bcc.n	8005212 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	e026      	b.n	8005212 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68d8      	ldr	r0, [r3, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	461a      	mov	r2, r3
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	f002 f901 	bl	80073d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	425b      	negs	r3, r3
 80051de:	441a      	add	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d207      	bcs.n	8005200 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	425b      	negs	r3, r3
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d105      	bne.n	8005212 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	3b01      	subs	r3, #1
 8005210:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800521a:	697b      	ldr	r3, [r7, #20]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d018      	beq.n	8005268 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	441a      	add	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	429a      	cmp	r2, r3
 800524e:	d303      	bcc.n	8005258 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68d9      	ldr	r1, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	461a      	mov	r2, r3
 8005262:	6838      	ldr	r0, [r7, #0]
 8005264:	f002 f8b7 	bl	80073d6 <memcpy>
	}
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005278:	f001 fc7c 	bl	8006b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005282:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005284:	e011      	b.n	80052aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b00      	cmp	r3, #0
 800528c:	d012      	beq.n	80052b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3324      	adds	r3, #36	; 0x24
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fd50 	bl	8005d38 <xTaskRemoveFromEventList>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800529e:	f000 fe27 	bl	8005ef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dce9      	bgt.n	8005286 <prvUnlockQueue+0x16>
 80052b2:	e000      	b.n	80052b6 <prvUnlockQueue+0x46>
					break;
 80052b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	22ff      	movs	r2, #255	; 0xff
 80052ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052be:	f001 fc89 	bl	8006bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052c2:	f001 fc57 	bl	8006b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052ce:	e011      	b.n	80052f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d012      	beq.n	80052fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3310      	adds	r3, #16
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fd2b 	bl	8005d38 <xTaskRemoveFromEventList>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052e8:	f000 fe02 	bl	8005ef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	dce9      	bgt.n	80052d0 <prvUnlockQueue+0x60>
 80052fc:	e000      	b.n	8005300 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	22ff      	movs	r2, #255	; 0xff
 8005304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005308:	f001 fc64 	bl	8006bd4 <vPortExitCritical>
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800531c:	f001 fc2a 	bl	8006b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	2b00      	cmp	r3, #0
 8005326:	d102      	bne.n	800532e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e001      	b.n	8005332 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005332:	f001 fc4f 	bl	8006bd4 <vPortExitCritical>

	return xReturn;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005348:	f001 fc14 	bl	8006b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005354:	429a      	cmp	r2, r3
 8005356:	d102      	bne.n	800535e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005358:	2301      	movs	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e001      	b.n	8005362 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005362:	f001 fc37 	bl	8006bd4 <vPortExitCritical>

	return xReturn;
 8005366:	68fb      	ldr	r3, [r7, #12]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e014      	b.n	80053aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005380:	4a0f      	ldr	r2, [pc, #60]	; (80053c0 <vQueueAddToRegistry+0x50>)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800538c:	490c      	ldr	r1, [pc, #48]	; (80053c0 <vQueueAddToRegistry+0x50>)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <vQueueAddToRegistry+0x50>)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053a2:	e006      	b.n	80053b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b07      	cmp	r3, #7
 80053ae:	d9e7      	bls.n	8005380 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20001374 	.word	0x20001374

080053c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053d4:	f001 fbce 	bl	8006b74 <vPortEnterCritical>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d103      	bne.n	80053ee <vQueueWaitForMessageRestricted+0x2a>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f4:	b25b      	sxtb	r3, r3
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d103      	bne.n	8005404 <vQueueWaitForMessageRestricted+0x40>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005404:	f001 fbe6 	bl	8006bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	2b00      	cmp	r3, #0
 800540e:	d106      	bne.n	800541e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	3324      	adds	r3, #36	; 0x24
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fc61 	bl	8005ce0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800541e:	6978      	ldr	r0, [r7, #20]
 8005420:	f7ff ff26 	bl	8005270 <prvUnlockQueue>
	}
 8005424:	bf00      	nop
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08e      	sub	sp, #56	; 0x38
 8005430:	af04      	add	r7, sp, #16
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800543a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	623b      	str	r3, [r7, #32]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <xTaskCreateStatic+0x46>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	61fb      	str	r3, [r7, #28]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005472:	23bc      	movs	r3, #188	; 0xbc
 8005474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2bbc      	cmp	r3, #188	; 0xbc
 800547a:	d00a      	beq.n	8005492 <xTaskCreateStatic+0x66>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	61bb      	str	r3, [r7, #24]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005492:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01e      	beq.n	80054d8 <xTaskCreateStatic+0xac>
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01b      	beq.n	80054d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054b2:	2300      	movs	r3, #0
 80054b4:	9303      	str	r3, [sp, #12]
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	9302      	str	r3, [sp, #8]
 80054ba:	f107 0314 	add.w	r3, r7, #20
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 f850 	bl	8005570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054d2:	f000 f8f3 	bl	80056bc <prvAddNewTaskToReadyList>
 80054d6:	e001      	b.n	80054dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054dc:	697b      	ldr	r3, [r7, #20]
	}
 80054de:	4618      	mov	r0, r3
 80054e0:	3728      	adds	r7, #40	; 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b08c      	sub	sp, #48	; 0x30
 80054ea:	af04      	add	r7, sp, #16
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	4613      	mov	r3, r2
 80054f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 fc5c 	bl	8006db8 <pvPortMalloc>
 8005500:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00e      	beq.n	8005526 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005508:	20bc      	movs	r0, #188	; 0xbc
 800550a:	f001 fc55 	bl	8006db8 <pvPortMalloc>
 800550e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
 800551c:	e005      	b.n	800552a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	f001 fd16 	bl	8006f50 <vPortFree>
 8005524:	e001      	b.n	800552a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d017      	beq.n	8005560 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	2300      	movs	r3, #0
 800553c:	9303      	str	r3, [sp, #12]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	9302      	str	r3, [sp, #8]
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f80e 	bl	8005570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005554:	69f8      	ldr	r0, [r7, #28]
 8005556:	f000 f8b1 	bl	80056bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800555a:	2301      	movs	r3, #1
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	e002      	b.n	8005566 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005560:	f04f 33ff 	mov.w	r3, #4294967295
 8005564:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005566:	69bb      	ldr	r3, [r7, #24]
	}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	461a      	mov	r2, r3
 8005588:	21a5      	movs	r1, #165	; 0xa5
 800558a:	f001 ff32 	bl	80073f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005598:	3b01      	subs	r3, #1
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f023 0307 	bic.w	r3, r3, #7
 80055a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	617b      	str	r3, [r7, #20]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01f      	beq.n	800560e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	e012      	b.n	80055fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	7819      	ldrb	r1, [r3, #0]
 80055dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	3334      	adds	r3, #52	; 0x34
 80055e4:	460a      	mov	r2, r1
 80055e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d006      	beq.n	8005602 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d9e9      	bls.n	80055d4 <prvInitialiseNewTask+0x64>
 8005600:	e000      	b.n	8005604 <prvInitialiseNewTask+0x94>
			{
				break;
 8005602:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800560c:	e003      	b.n	8005616 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	2b37      	cmp	r3, #55	; 0x37
 800561a:	d901      	bls.n	8005620 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800561c:	2337      	movs	r3, #55	; 0x37
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005624:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	2200      	movs	r2, #0
 8005630:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	3304      	adds	r3, #4
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff f978 	bl	800492c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	3318      	adds	r3, #24
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff f973 	bl	800492c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	2200      	movs	r2, #0
 8005660:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	2200      	movs	r2, #0
 8005668:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	3354      	adds	r3, #84	; 0x54
 8005670:	2260      	movs	r2, #96	; 0x60
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 febc 	bl	80073f2 <memset>
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <prvInitialiseNewTask+0x140>)
 800567e:	659a      	str	r2, [r3, #88]	; 0x58
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <prvInitialiseNewTask+0x144>)
 8005684:	65da      	str	r2, [r3, #92]	; 0x5c
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <prvInitialiseNewTask+0x148>)
 800568a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	69b8      	ldr	r0, [r7, #24]
 8005692:	f001 f941 	bl	8006918 <pxPortInitialiseStack>
 8005696:	4602      	mov	r2, r0
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a8:	bf00      	nop
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	08009f9c 	.word	0x08009f9c
 80056b4:	08009fbc 	.word	0x08009fbc
 80056b8:	08009f7c 	.word	0x08009f7c

080056bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056c4:	f001 fa56 	bl	8006b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056c8:	4b2d      	ldr	r3, [pc, #180]	; (8005780 <prvAddNewTaskToReadyList+0xc4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a2c      	ldr	r2, [pc, #176]	; (8005780 <prvAddNewTaskToReadyList+0xc4>)
 80056d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056d2:	4b2c      	ldr	r3, [pc, #176]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056da:	4a2a      	ldr	r2, [pc, #168]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056e0:	4b27      	ldr	r3, [pc, #156]	; (8005780 <prvAddNewTaskToReadyList+0xc4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d110      	bne.n	800570a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056e8:	f000 fc26 	bl	8005f38 <prvInitialiseTaskLists>
 80056ec:	e00d      	b.n	800570a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056ee:	4b26      	ldr	r3, [pc, #152]	; (8005788 <prvAddNewTaskToReadyList+0xcc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056f6:	4b23      	ldr	r3, [pc, #140]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	429a      	cmp	r2, r3
 8005702:	d802      	bhi.n	800570a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800570a:	4b20      	ldr	r3, [pc, #128]	; (800578c <prvAddNewTaskToReadyList+0xd0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	4a1e      	ldr	r2, [pc, #120]	; (800578c <prvAddNewTaskToReadyList+0xd0>)
 8005712:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <prvAddNewTaskToReadyList+0xd0>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4b1b      	ldr	r3, [pc, #108]	; (8005790 <prvAddNewTaskToReadyList+0xd4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d903      	bls.n	8005730 <prvAddNewTaskToReadyList+0x74>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	4a18      	ldr	r2, [pc, #96]	; (8005790 <prvAddNewTaskToReadyList+0xd4>)
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <prvAddNewTaskToReadyList+0xd8>)
 800573e:	441a      	add	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f7ff f8fd 	bl	8004946 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800574c:	f001 fa42 	bl	8006bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005750:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <prvAddNewTaskToReadyList+0xcc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <prvAddNewTaskToReadyList+0xc8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	429a      	cmp	r2, r3
 8005764:	d207      	bcs.n	8005776 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <prvAddNewTaskToReadyList+0xdc>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20001888 	.word	0x20001888
 8005784:	200013b4 	.word	0x200013b4
 8005788:	20001894 	.word	0x20001894
 800578c:	200018a4 	.word	0x200018a4
 8005790:	20001890 	.word	0x20001890
 8005794:	200013b8 	.word	0x200013b8
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d017      	beq.n	80057de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <vTaskDelay+0x60>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <vTaskDelay+0x30>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	60bb      	str	r3, [r7, #8]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057cc:	f000 f88a 	bl	80058e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057d0:	2100      	movs	r1, #0
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fcfe 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057d8:	f000 f892 	bl	8005900 <xTaskResumeAll>
 80057dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d107      	bne.n	80057f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057e4:	4b06      	ldr	r3, [pc, #24]	; (8005800 <vTaskDelay+0x64>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	200018b0 	.word	0x200018b0
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08a      	sub	sp, #40	; 0x28
 8005808:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005812:	463a      	mov	r2, r7
 8005814:	1d39      	adds	r1, r7, #4
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff f832 	bl	8004884 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	9202      	str	r2, [sp, #8]
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	2300      	movs	r3, #0
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2300      	movs	r3, #0
 8005830:	460a      	mov	r2, r1
 8005832:	4924      	ldr	r1, [pc, #144]	; (80058c4 <vTaskStartScheduler+0xc0>)
 8005834:	4824      	ldr	r0, [pc, #144]	; (80058c8 <vTaskStartScheduler+0xc4>)
 8005836:	f7ff fdf9 	bl	800542c <xTaskCreateStatic>
 800583a:	4603      	mov	r3, r0
 800583c:	4a23      	ldr	r2, [pc, #140]	; (80058cc <vTaskStartScheduler+0xc8>)
 800583e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005840:	4b22      	ldr	r3, [pc, #136]	; (80058cc <vTaskStartScheduler+0xc8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005848:	2301      	movs	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e001      	b.n	8005852 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d102      	bne.n	800585e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005858:	f000 fd10 	bl	800627c <xTimerCreateTimerTask>
 800585c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d11b      	bne.n	800589c <vTaskStartScheduler+0x98>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	613b      	str	r3, [r7, #16]
}
 8005876:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <vTaskStartScheduler+0xcc>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3354      	adds	r3, #84	; 0x54
 800587e:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <vTaskStartScheduler+0xd0>)
 8005880:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <vTaskStartScheduler+0xd4>)
 8005884:	f04f 32ff 	mov.w	r2, #4294967295
 8005888:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800588a:	4b14      	ldr	r3, [pc, #80]	; (80058dc <vTaskStartScheduler+0xd8>)
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005890:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <vTaskStartScheduler+0xdc>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005896:	f001 f8cb 	bl	8006a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800589a:	e00e      	b.n	80058ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d10a      	bne.n	80058ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	60fb      	str	r3, [r7, #12]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <vTaskStartScheduler+0xb4>
}
 80058ba:	bf00      	nop
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	08009f20 	.word	0x08009f20
 80058c8:	08005f09 	.word	0x08005f09
 80058cc:	200018ac 	.word	0x200018ac
 80058d0:	200013b4 	.word	0x200013b4
 80058d4:	20000010 	.word	0x20000010
 80058d8:	200018a8 	.word	0x200018a8
 80058dc:	20001894 	.word	0x20001894
 80058e0:	2000188c 	.word	0x2000188c

080058e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058e8:	4b04      	ldr	r3, [pc, #16]	; (80058fc <vTaskSuspendAll+0x18>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	4a03      	ldr	r2, [pc, #12]	; (80058fc <vTaskSuspendAll+0x18>)
 80058f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058f2:	bf00      	nop
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	200018b0 	.word	0x200018b0

08005900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800590e:	4b42      	ldr	r3, [pc, #264]	; (8005a18 <xTaskResumeAll+0x118>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <xTaskResumeAll+0x2c>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	603b      	str	r3, [r7, #0]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800592c:	f001 f922 	bl	8006b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005930:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <xTaskResumeAll+0x118>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3b01      	subs	r3, #1
 8005936:	4a38      	ldr	r2, [pc, #224]	; (8005a18 <xTaskResumeAll+0x118>)
 8005938:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800593a:	4b37      	ldr	r3, [pc, #220]	; (8005a18 <xTaskResumeAll+0x118>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d162      	bne.n	8005a08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005942:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <xTaskResumeAll+0x11c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d05e      	beq.n	8005a08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800594a:	e02f      	b.n	80059ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800594c:	4b34      	ldr	r3, [pc, #208]	; (8005a20 <xTaskResumeAll+0x120>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3318      	adds	r3, #24
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff f851 	bl	8004a00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3304      	adds	r3, #4
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff f84c 	bl	8004a00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4b2d      	ldr	r3, [pc, #180]	; (8005a24 <xTaskResumeAll+0x124>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <xTaskResumeAll+0x7c>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a2a      	ldr	r2, [pc, #168]	; (8005a24 <xTaskResumeAll+0x124>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <xTaskResumeAll+0x128>)
 800598a:	441a      	add	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f7fe ffd7 	bl	8004946 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599c:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <xTaskResumeAll+0x12c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80059a6:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <xTaskResumeAll+0x130>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059ac:	4b1c      	ldr	r3, [pc, #112]	; (8005a20 <xTaskResumeAll+0x120>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1cb      	bne.n	800594c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059ba:	f000 fb5f 	bl	800607c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059be:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <xTaskResumeAll+0x134>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059ca:	f000 f847 	bl	8005a5c <xTaskIncrementTick>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80059d4:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <xTaskResumeAll+0x130>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3b01      	subs	r3, #1
 80059de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f1      	bne.n	80059ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80059e6:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <xTaskResumeAll+0x134>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <xTaskResumeAll+0x130>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059f8:	4b0f      	ldr	r3, [pc, #60]	; (8005a38 <xTaskResumeAll+0x138>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a08:	f001 f8e4 	bl	8006bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	200018b0 	.word	0x200018b0
 8005a1c:	20001888 	.word	0x20001888
 8005a20:	20001848 	.word	0x20001848
 8005a24:	20001890 	.word	0x20001890
 8005a28:	200013b8 	.word	0x200013b8
 8005a2c:	200013b4 	.word	0x200013b4
 8005a30:	2000189c 	.word	0x2000189c
 8005a34:	20001898 	.word	0x20001898
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <xTaskGetTickCount+0x1c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a48:	687b      	ldr	r3, [r7, #4]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	2000188c 	.word	0x2000188c

08005a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a66:	4b4f      	ldr	r3, [pc, #316]	; (8005ba4 <xTaskIncrementTick+0x148>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 808f 	bne.w	8005b8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a70:	4b4d      	ldr	r3, [pc, #308]	; (8005ba8 <xTaskIncrementTick+0x14c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a78:	4a4b      	ldr	r2, [pc, #300]	; (8005ba8 <xTaskIncrementTick+0x14c>)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d120      	bne.n	8005ac6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a84:	4b49      	ldr	r3, [pc, #292]	; (8005bac <xTaskIncrementTick+0x150>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	603b      	str	r3, [r7, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	e7fe      	b.n	8005aa2 <xTaskIncrementTick+0x46>
 8005aa4:	4b41      	ldr	r3, [pc, #260]	; (8005bac <xTaskIncrementTick+0x150>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	4b41      	ldr	r3, [pc, #260]	; (8005bb0 <xTaskIncrementTick+0x154>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a3f      	ldr	r2, [pc, #252]	; (8005bac <xTaskIncrementTick+0x150>)
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4a3f      	ldr	r2, [pc, #252]	; (8005bb0 <xTaskIncrementTick+0x154>)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	4b3e      	ldr	r3, [pc, #248]	; (8005bb4 <xTaskIncrementTick+0x158>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	4a3d      	ldr	r2, [pc, #244]	; (8005bb4 <xTaskIncrementTick+0x158>)
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	f000 fadb 	bl	800607c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ac6:	4b3c      	ldr	r3, [pc, #240]	; (8005bb8 <xTaskIncrementTick+0x15c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d349      	bcc.n	8005b64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad0:	4b36      	ldr	r3, [pc, #216]	; (8005bac <xTaskIncrementTick+0x150>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ada:	4b37      	ldr	r3, [pc, #220]	; (8005bb8 <xTaskIncrementTick+0x15c>)
 8005adc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae0:	601a      	str	r2, [r3, #0]
					break;
 8005ae2:	e03f      	b.n	8005b64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae4:	4b31      	ldr	r3, [pc, #196]	; (8005bac <xTaskIncrementTick+0x150>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d203      	bcs.n	8005b04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005afc:	4a2e      	ldr	r2, [pc, #184]	; (8005bb8 <xTaskIncrementTick+0x15c>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b02:	e02f      	b.n	8005b64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe ff79 	bl	8004a00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	3318      	adds	r3, #24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe ff70 	bl	8004a00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <xTaskIncrementTick+0x160>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d903      	bls.n	8005b34 <xTaskIncrementTick+0xd8>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4a22      	ldr	r2, [pc, #136]	; (8005bbc <xTaskIncrementTick+0x160>)
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4a1f      	ldr	r2, [pc, #124]	; (8005bc0 <xTaskIncrementTick+0x164>)
 8005b42:	441a      	add	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7fe fefb 	bl	8004946 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <xTaskIncrementTick+0x168>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d3b8      	bcc.n	8005ad0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b62:	e7b5      	b.n	8005ad0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b64:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <xTaskIncrementTick+0x168>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	4915      	ldr	r1, [pc, #84]	; (8005bc0 <xTaskIncrementTick+0x164>)
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d901      	bls.n	8005b80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b80:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <xTaskIncrementTick+0x16c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d007      	beq.n	8005b98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	e004      	b.n	8005b98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <xTaskIncrementTick+0x170>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	4a0d      	ldr	r2, [pc, #52]	; (8005bcc <xTaskIncrementTick+0x170>)
 8005b96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b98:	697b      	ldr	r3, [r7, #20]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200018b0 	.word	0x200018b0
 8005ba8:	2000188c 	.word	0x2000188c
 8005bac:	20001840 	.word	0x20001840
 8005bb0:	20001844 	.word	0x20001844
 8005bb4:	200018a0 	.word	0x200018a0
 8005bb8:	200018a8 	.word	0x200018a8
 8005bbc:	20001890 	.word	0x20001890
 8005bc0:	200013b8 	.word	0x200013b8
 8005bc4:	200013b4 	.word	0x200013b4
 8005bc8:	2000189c 	.word	0x2000189c
 8005bcc:	20001898 	.word	0x20001898

08005bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bd6:	4b2a      	ldr	r3, [pc, #168]	; (8005c80 <vTaskSwitchContext+0xb0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bde:	4b29      	ldr	r3, [pc, #164]	; (8005c84 <vTaskSwitchContext+0xb4>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005be4:	e046      	b.n	8005c74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005be6:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <vTaskSwitchContext+0xb4>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bec:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <vTaskSwitchContext+0xb8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e010      	b.n	8005c16 <vTaskSwitchContext+0x46>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <vTaskSwitchContext+0x40>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	607b      	str	r3, [r7, #4]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <vTaskSwitchContext+0x3e>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	491d      	ldr	r1, [pc, #116]	; (8005c8c <vTaskSwitchContext+0xbc>)
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0e4      	beq.n	8005bf4 <vTaskSwitchContext+0x24>
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <vTaskSwitchContext+0xbc>)
 8005c36:	4413      	add	r3, r2
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	605a      	str	r2, [r3, #4]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d104      	bne.n	8005c5a <vTaskSwitchContext+0x8a>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4a0b      	ldr	r2, [pc, #44]	; (8005c90 <vTaskSwitchContext+0xc0>)
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	4a08      	ldr	r2, [pc, #32]	; (8005c88 <vTaskSwitchContext+0xb8>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <vTaskSwitchContext+0xc0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3354      	adds	r3, #84	; 0x54
 8005c70:	4a08      	ldr	r2, [pc, #32]	; (8005c94 <vTaskSwitchContext+0xc4>)
 8005c72:	6013      	str	r3, [r2, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	200018b0 	.word	0x200018b0
 8005c84:	2000189c 	.word	0x2000189c
 8005c88:	20001890 	.word	0x20001890
 8005c8c:	200013b8 	.word	0x200013b8
 8005c90:	200013b4 	.word	0x200013b4
 8005c94:	20000010 	.word	0x20000010

08005c98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	60fb      	str	r3, [r7, #12]
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cbe:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <vTaskPlaceOnEventList+0x44>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fe fe61 	bl	800498e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ccc:	2101      	movs	r1, #1
 8005cce:	6838      	ldr	r0, [r7, #0]
 8005cd0:	f000 fa80 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	200013b4 	.word	0x200013b4

08005ce0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	617b      	str	r3, [r7, #20]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3318      	adds	r3, #24
 8005d0e:	4619      	mov	r1, r3
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7fe fe18 	bl	8004946 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	68b8      	ldr	r0, [r7, #8]
 8005d26:	f000 fa55 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
	}
 8005d2a:	bf00      	nop
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200013b4 	.word	0x200013b4

08005d38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60fb      	str	r3, [r7, #12]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	3318      	adds	r3, #24
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fe fe49 	bl	8004a00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d6e:	4b1e      	ldr	r3, [pc, #120]	; (8005de8 <xTaskRemoveFromEventList+0xb0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d11d      	bne.n	8005db2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fe fe40 	bl	8004a00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4b19      	ldr	r3, [pc, #100]	; (8005dec <xTaskRemoveFromEventList+0xb4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d903      	bls.n	8005d94 <xTaskRemoveFromEventList+0x5c>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	4a16      	ldr	r2, [pc, #88]	; (8005dec <xTaskRemoveFromEventList+0xb4>)
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <xTaskRemoveFromEventList+0xb8>)
 8005da2:	441a      	add	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f7fe fdcb 	bl	8004946 <vListInsertEnd>
 8005db0:	e005      	b.n	8005dbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	3318      	adds	r3, #24
 8005db6:	4619      	mov	r1, r3
 8005db8:	480e      	ldr	r0, [pc, #56]	; (8005df4 <xTaskRemoveFromEventList+0xbc>)
 8005dba:	f7fe fdc4 	bl	8004946 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <xTaskRemoveFromEventList+0xc0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d905      	bls.n	8005dd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <xTaskRemoveFromEventList+0xc4>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e001      	b.n	8005ddc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ddc:	697b      	ldr	r3, [r7, #20]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200018b0 	.word	0x200018b0
 8005dec:	20001890 	.word	0x20001890
 8005df0:	200013b8 	.word	0x200013b8
 8005df4:	20001848 	.word	0x20001848
 8005df8:	200013b4 	.word	0x200013b4
 8005dfc:	2000189c 	.word	0x2000189c

08005e00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e08:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <vTaskInternalSetTimeOutState+0x24>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <vTaskInternalSetTimeOutState+0x28>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	200018a0 	.word	0x200018a0
 8005e28:	2000188c 	.word	0x2000188c

08005e2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	613b      	str	r3, [r7, #16]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	60fb      	str	r3, [r7, #12]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005e6e:	f000 fe81 	bl	8006b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e72:	4b1d      	ldr	r3, [pc, #116]	; (8005ee8 <xTaskCheckForTimeOut+0xbc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d102      	bne.n	8005e92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	e023      	b.n	8005eda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b15      	ldr	r3, [pc, #84]	; (8005eec <xTaskCheckForTimeOut+0xc0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d007      	beq.n	8005eae <xTaskCheckForTimeOut+0x82>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d302      	bcc.n	8005eae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	e015      	b.n	8005eda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d20b      	bcs.n	8005ed0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff ff9b 	bl	8005e00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	e004      	b.n	8005eda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eda:	f000 fe7b 	bl	8006bd4 <vPortExitCritical>

	return xReturn;
 8005ede:	69fb      	ldr	r3, [r7, #28]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	2000188c 	.word	0x2000188c
 8005eec:	200018a0 	.word	0x200018a0

08005ef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ef4:	4b03      	ldr	r3, [pc, #12]	; (8005f04 <vTaskMissedYield+0x14>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
}
 8005efa:	bf00      	nop
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	2000189c 	.word	0x2000189c

08005f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f10:	f000 f852 	bl	8005fb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <prvIdleTask+0x28>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d9f9      	bls.n	8005f10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <prvIdleTask+0x2c>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f2c:	e7f0      	b.n	8005f10 <prvIdleTask+0x8>
 8005f2e:	bf00      	nop
 8005f30:	200013b8 	.word	0x200013b8
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
 8005f42:	e00c      	b.n	8005f5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4a12      	ldr	r2, [pc, #72]	; (8005f98 <prvInitialiseTaskLists+0x60>)
 8005f50:	4413      	add	r3, r2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fcca 	bl	80048ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b37      	cmp	r3, #55	; 0x37
 8005f62:	d9ef      	bls.n	8005f44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f64:	480d      	ldr	r0, [pc, #52]	; (8005f9c <prvInitialiseTaskLists+0x64>)
 8005f66:	f7fe fcc1 	bl	80048ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f6a:	480d      	ldr	r0, [pc, #52]	; (8005fa0 <prvInitialiseTaskLists+0x68>)
 8005f6c:	f7fe fcbe 	bl	80048ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f70:	480c      	ldr	r0, [pc, #48]	; (8005fa4 <prvInitialiseTaskLists+0x6c>)
 8005f72:	f7fe fcbb 	bl	80048ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f76:	480c      	ldr	r0, [pc, #48]	; (8005fa8 <prvInitialiseTaskLists+0x70>)
 8005f78:	f7fe fcb8 	bl	80048ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f7c:	480b      	ldr	r0, [pc, #44]	; (8005fac <prvInitialiseTaskLists+0x74>)
 8005f7e:	f7fe fcb5 	bl	80048ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f82:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <prvInitialiseTaskLists+0x78>)
 8005f84:	4a05      	ldr	r2, [pc, #20]	; (8005f9c <prvInitialiseTaskLists+0x64>)
 8005f86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <prvInitialiseTaskLists+0x7c>)
 8005f8a:	4a05      	ldr	r2, [pc, #20]	; (8005fa0 <prvInitialiseTaskLists+0x68>)
 8005f8c:	601a      	str	r2, [r3, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200013b8 	.word	0x200013b8
 8005f9c:	20001818 	.word	0x20001818
 8005fa0:	2000182c 	.word	0x2000182c
 8005fa4:	20001848 	.word	0x20001848
 8005fa8:	2000185c 	.word	0x2000185c
 8005fac:	20001874 	.word	0x20001874
 8005fb0:	20001840 	.word	0x20001840
 8005fb4:	20001844 	.word	0x20001844

08005fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fbe:	e019      	b.n	8005ff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fc0:	f000 fdd8 	bl	8006b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <prvCheckTasksWaitingTermination+0x50>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fe fd15 	bl	8004a00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <prvCheckTasksWaitingTermination+0x54>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	4a0b      	ldr	r2, [pc, #44]	; (800600c <prvCheckTasksWaitingTermination+0x54>)
 8005fde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <prvCheckTasksWaitingTermination+0x58>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	4a0a      	ldr	r2, [pc, #40]	; (8006010 <prvCheckTasksWaitingTermination+0x58>)
 8005fe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fea:	f000 fdf3 	bl	8006bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f810 	bl	8006014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff4:	4b06      	ldr	r3, [pc, #24]	; (8006010 <prvCheckTasksWaitingTermination+0x58>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e1      	bne.n	8005fc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	2000185c 	.word	0x2000185c
 800600c:	20001888 	.word	0x20001888
 8006010:	20001870 	.word	0x20001870

08006014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3354      	adds	r3, #84	; 0x54
 8006020:	4618      	mov	r0, r3
 8006022:	f001 ff89 	bl	8007f38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800602c:	2b00      	cmp	r3, #0
 800602e:	d108      	bne.n	8006042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	4618      	mov	r0, r3
 8006036:	f000 ff8b 	bl	8006f50 <vPortFree>
				vPortFree( pxTCB );
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 ff88 	bl	8006f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006040:	e018      	b.n	8006074 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006048:	2b01      	cmp	r3, #1
 800604a:	d103      	bne.n	8006054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 ff7f 	bl	8006f50 <vPortFree>
	}
 8006052:	e00f      	b.n	8006074 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800605a:	2b02      	cmp	r3, #2
 800605c:	d00a      	beq.n	8006074 <prvDeleteTCB+0x60>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	60fb      	str	r3, [r7, #12]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <prvDeleteTCB+0x5e>
	}
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006082:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <prvResetNextTaskUnblockTime+0x38>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <prvResetNextTaskUnblockTime+0x3c>)
 800608e:	f04f 32ff 	mov.w	r2, #4294967295
 8006092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006094:	e008      	b.n	80060a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006096:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <prvResetNextTaskUnblockTime+0x38>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4a04      	ldr	r2, [pc, #16]	; (80060b8 <prvResetNextTaskUnblockTime+0x3c>)
 80060a6:	6013      	str	r3, [r2, #0]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20001840 	.word	0x20001840
 80060b8:	200018a8 	.word	0x200018a8

080060bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <xTaskGetSchedulerState+0x34>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060ca:	2301      	movs	r3, #1
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	e008      	b.n	80060e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d0:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <xTaskGetSchedulerState+0x38>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060d8:	2302      	movs	r3, #2
 80060da:	607b      	str	r3, [r7, #4]
 80060dc:	e001      	b.n	80060e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060de:	2300      	movs	r3, #0
 80060e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060e2:	687b      	ldr	r3, [r7, #4]
	}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	20001894 	.word	0x20001894
 80060f4:	200018b0 	.word	0x200018b0

080060f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d056      	beq.n	80061bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800610e:	4b2e      	ldr	r3, [pc, #184]	; (80061c8 <xTaskPriorityDisinherit+0xd0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	429a      	cmp	r2, r3
 8006116:	d00a      	beq.n	800612e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	60fb      	str	r3, [r7, #12]
}
 800612a:	bf00      	nop
 800612c:	e7fe      	b.n	800612c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	60bb      	str	r3, [r7, #8]
}
 8006148:	bf00      	nop
 800614a:	e7fe      	b.n	800614a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800615e:	429a      	cmp	r2, r3
 8006160:	d02c      	beq.n	80061bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006166:	2b00      	cmp	r3, #0
 8006168:	d128      	bne.n	80061bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3304      	adds	r3, #4
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fc46 	bl	8004a00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <xTaskPriorityDisinherit+0xd4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d903      	bls.n	800619c <xTaskPriorityDisinherit+0xa4>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	4a0c      	ldr	r2, [pc, #48]	; (80061cc <xTaskPriorityDisinherit+0xd4>)
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <xTaskPriorityDisinherit+0xd8>)
 80061aa:	441a      	add	r2, r3
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fe fbc7 	bl	8004946 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061bc:	697b      	ldr	r3, [r7, #20]
	}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	200013b4 	.word	0x200013b4
 80061cc:	20001890 	.word	0x20001890
 80061d0:	200013b8 	.word	0x200013b8

080061d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061de:	4b21      	ldr	r3, [pc, #132]	; (8006264 <prvAddCurrentTaskToDelayedList+0x90>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e4:	4b20      	ldr	r3, [pc, #128]	; (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fc08 	bl	8004a00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d10a      	bne.n	800620e <prvAddCurrentTaskToDelayedList+0x3a>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061fe:	4b1a      	ldr	r3, [pc, #104]	; (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4819      	ldr	r0, [pc, #100]	; (800626c <prvAddCurrentTaskToDelayedList+0x98>)
 8006208:	f7fe fb9d 	bl	8004946 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800620c:	e026      	b.n	800625c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4413      	add	r3, r2
 8006214:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006216:	4b14      	ldr	r3, [pc, #80]	; (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	429a      	cmp	r2, r3
 8006224:	d209      	bcs.n	800623a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006226:	4b12      	ldr	r3, [pc, #72]	; (8006270 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3304      	adds	r3, #4
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f7fe fbab 	bl	800498e <vListInsert>
}
 8006238:	e010      	b.n	800625c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623a:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <prvAddCurrentTaskToDelayedList+0xa0>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f7fe fba1 	bl	800498e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d202      	bcs.n	800625c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006256:	4a08      	ldr	r2, [pc, #32]	; (8006278 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6013      	str	r3, [r2, #0]
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	2000188c 	.word	0x2000188c
 8006268:	200013b4 	.word	0x200013b4
 800626c:	20001874 	.word	0x20001874
 8006270:	20001844 	.word	0x20001844
 8006274:	20001840 	.word	0x20001840
 8006278:	200018a8 	.word	0x200018a8

0800627c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	; 0x28
 8006280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006286:	f000 fb07 	bl	8006898 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800628a:	4b1c      	ldr	r3, [pc, #112]	; (80062fc <xTimerCreateTimerTask+0x80>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d021      	beq.n	80062d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800629a:	1d3a      	adds	r2, r7, #4
 800629c:	f107 0108 	add.w	r1, r7, #8
 80062a0:	f107 030c 	add.w	r3, r7, #12
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fb07 	bl	80048b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	9202      	str	r2, [sp, #8]
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	2302      	movs	r3, #2
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	460a      	mov	r2, r1
 80062bc:	4910      	ldr	r1, [pc, #64]	; (8006300 <xTimerCreateTimerTask+0x84>)
 80062be:	4811      	ldr	r0, [pc, #68]	; (8006304 <xTimerCreateTimerTask+0x88>)
 80062c0:	f7ff f8b4 	bl	800542c <xTaskCreateStatic>
 80062c4:	4603      	mov	r3, r0
 80062c6:	4a10      	ldr	r2, [pc, #64]	; (8006308 <xTimerCreateTimerTask+0x8c>)
 80062c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062ca:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <xTimerCreateTimerTask+0x8c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062d2:	2301      	movs	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	613b      	str	r3, [r7, #16]
}
 80062ee:	bf00      	nop
 80062f0:	e7fe      	b.n	80062f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062f2:	697b      	ldr	r3, [r7, #20]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	200018e4 	.word	0x200018e4
 8006300:	08009f28 	.word	0x08009f28
 8006304:	08006441 	.word	0x08006441
 8006308:	200018e8 	.word	0x200018e8

0800630c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800631a:	2300      	movs	r3, #0
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	623b      	str	r3, [r7, #32]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800633a:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <xTimerGenericCommand+0x98>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d02a      	beq.n	8006398 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b05      	cmp	r3, #5
 8006352:	dc18      	bgt.n	8006386 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006354:	f7ff feb2 	bl	80060bc <xTaskGetSchedulerState>
 8006358:	4603      	mov	r3, r0
 800635a:	2b02      	cmp	r3, #2
 800635c:	d109      	bne.n	8006372 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800635e:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <xTimerGenericCommand+0x98>)
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	f107 0110 	add.w	r1, r7, #16
 8006366:	2300      	movs	r3, #0
 8006368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636a:	f7fe fc77 	bl	8004c5c <xQueueGenericSend>
 800636e:	6278      	str	r0, [r7, #36]	; 0x24
 8006370:	e012      	b.n	8006398 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <xTimerGenericCommand+0x98>)
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	f107 0110 	add.w	r1, r7, #16
 800637a:	2300      	movs	r3, #0
 800637c:	2200      	movs	r2, #0
 800637e:	f7fe fc6d 	bl	8004c5c <xQueueGenericSend>
 8006382:	6278      	str	r0, [r7, #36]	; 0x24
 8006384:	e008      	b.n	8006398 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006386:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <xTimerGenericCommand+0x98>)
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	f107 0110 	add.w	r1, r7, #16
 800638e:	2300      	movs	r3, #0
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	f7fe fd61 	bl	8004e58 <xQueueGenericSendFromISR>
 8006396:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800639a:	4618      	mov	r0, r3
 800639c:	3728      	adds	r7, #40	; 0x28
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	200018e4 	.word	0x200018e4

080063a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b2:	4b22      	ldr	r3, [pc, #136]	; (800643c <prvProcessExpiredTimer+0x94>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe fb1d 	bl	8004a00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d022      	beq.n	800641a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	18d1      	adds	r1, r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	6978      	ldr	r0, [r7, #20]
 80063e2:	f000 f8d1 	bl	8006588 <prvInsertTimerInActiveList>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01f      	beq.n	800642c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063ec:	2300      	movs	r3, #0
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2300      	movs	r3, #0
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	2100      	movs	r1, #0
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7ff ff88 	bl	800630c <xTimerGenericCommand>
 80063fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d113      	bne.n	800642c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	60fb      	str	r3, [r7, #12]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	b2da      	uxtb	r2, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	6978      	ldr	r0, [r7, #20]
 8006432:	4798      	blx	r3
}
 8006434:	bf00      	nop
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	200018dc 	.word	0x200018dc

08006440 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006448:	f107 0308 	add.w	r3, r7, #8
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f857 	bl	8006500 <prvGetNextExpireTime>
 8006452:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4619      	mov	r1, r3
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f803 	bl	8006464 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800645e:	f000 f8d5 	bl	800660c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006462:	e7f1      	b.n	8006448 <prvTimerTask+0x8>

08006464 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800646e:	f7ff fa39 	bl	80058e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f866 	bl	8006548 <prvSampleTimeNow>
 800647c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d130      	bne.n	80064e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <prvProcessTimerOrBlockTask+0x3c>
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	429a      	cmp	r2, r3
 8006490:	d806      	bhi.n	80064a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006492:	f7ff fa35 	bl	8005900 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006496:	68f9      	ldr	r1, [r7, #12]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff ff85 	bl	80063a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800649e:	e024      	b.n	80064ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d008      	beq.n	80064b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064a6:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <prvProcessTimerOrBlockTask+0x90>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <prvProcessTimerOrBlockTask+0x50>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <prvProcessTimerOrBlockTask+0x52>
 80064b4:	2300      	movs	r3, #0
 80064b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064b8:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <prvProcessTimerOrBlockTask+0x94>)
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	4619      	mov	r1, r3
 80064c6:	f7fe ff7d 	bl	80053c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064ca:	f7ff fa19 	bl	8005900 <xTaskResumeAll>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <prvProcessTimerOrBlockTask+0x98>)
 80064d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	f3bf 8f6f 	isb	sy
}
 80064e4:	e001      	b.n	80064ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064e6:	f7ff fa0b 	bl	8005900 <xTaskResumeAll>
}
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200018e0 	.word	0x200018e0
 80064f8:	200018e4 	.word	0x200018e4
 80064fc:	e000ed04 	.word	0xe000ed04

08006500 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006508:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <prvGetNextExpireTime+0x44>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <prvGetNextExpireTime+0x16>
 8006512:	2201      	movs	r2, #1
 8006514:	e000      	b.n	8006518 <prvGetNextExpireTime+0x18>
 8006516:	2200      	movs	r2, #0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <prvGetNextExpireTime+0x44>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e001      	b.n	8006534 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006534:	68fb      	ldr	r3, [r7, #12]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	200018dc 	.word	0x200018dc

08006548 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006550:	f7ff fa74 	bl	8005a3c <xTaskGetTickCount>
 8006554:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006556:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <prvSampleTimeNow+0x3c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	429a      	cmp	r2, r3
 800655e:	d205      	bcs.n	800656c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006560:	f000 f936 	bl	80067d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e002      	b.n	8006572 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006572:	4a04      	ldr	r2, [pc, #16]	; (8006584 <prvSampleTimeNow+0x3c>)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006578:	68fb      	ldr	r3, [r7, #12]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	200018ec 	.word	0x200018ec

08006588 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d812      	bhi.n	80065d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	1ad2      	subs	r2, r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d302      	bcc.n	80065c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065bc:	2301      	movs	r3, #1
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e01b      	b.n	80065fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065c2:	4b10      	ldr	r3, [pc, #64]	; (8006604 <prvInsertTimerInActiveList+0x7c>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3304      	adds	r3, #4
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f7fe f9de 	bl	800498e <vListInsert>
 80065d2:	e012      	b.n	80065fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d206      	bcs.n	80065ea <prvInsertTimerInActiveList+0x62>
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d302      	bcc.n	80065ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e007      	b.n	80065fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ea:	4b07      	ldr	r3, [pc, #28]	; (8006608 <prvInsertTimerInActiveList+0x80>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3304      	adds	r3, #4
 80065f2:	4619      	mov	r1, r3
 80065f4:	4610      	mov	r0, r2
 80065f6:	f7fe f9ca 	bl	800498e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065fa:	697b      	ldr	r3, [r7, #20]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	200018e0 	.word	0x200018e0
 8006608:	200018dc 	.word	0x200018dc

0800660c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08e      	sub	sp, #56	; 0x38
 8006610:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006612:	e0ca      	b.n	80067aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	da18      	bge.n	800664c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800661a:	1d3b      	adds	r3, r7, #4
 800661c:	3304      	adds	r3, #4
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	61fb      	str	r3, [r7, #28]
}
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006642:	6850      	ldr	r0, [r2, #4]
 8006644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006646:	6892      	ldr	r2, [r2, #8]
 8006648:	4611      	mov	r1, r2
 800664a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f2c0 80aa 	blt.w	80067a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	3304      	adds	r3, #4
 8006664:	4618      	mov	r0, r3
 8006666:	f7fe f9cb 	bl	8004a00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800666a:	463b      	mov	r3, r7
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff ff6b 	bl	8006548 <prvSampleTimeNow>
 8006672:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b09      	cmp	r3, #9
 8006678:	f200 8097 	bhi.w	80067aa <prvProcessReceivedCommands+0x19e>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <prvProcessReceivedCommands+0x78>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	080066ad 	.word	0x080066ad
 8006688:	080066ad 	.word	0x080066ad
 800668c:	080066ad 	.word	0x080066ad
 8006690:	08006721 	.word	0x08006721
 8006694:	08006735 	.word	0x08006735
 8006698:	0800677f 	.word	0x0800677f
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066ad 	.word	0x080066ad
 80066a4:	08006721 	.word	0x08006721
 80066a8:	08006735 	.word	0x08006735
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b2:	f043 0301 	orr.w	r3, r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	18d1      	adds	r1, r2, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066cc:	f7ff ff5c 	bl	8006588 <prvInsertTimerInActiveList>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d069      	beq.n	80067aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d05e      	beq.n	80067aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	441a      	add	r2, r3
 80066f4:	2300      	movs	r3, #0
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	2300      	movs	r3, #0
 80066fa:	2100      	movs	r1, #0
 80066fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066fe:	f7ff fe05 	bl	800630c <xTimerGenericCommand>
 8006702:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d14f      	bne.n	80067aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	61bb      	str	r3, [r7, #24]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006732:	e03a      	b.n	80067aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	b2da      	uxtb	r2, r3
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	617b      	str	r3, [r7, #20]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	18d1      	adds	r1, r2, r3
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006778:	f7ff ff06 	bl	8006588 <prvInsertTimerInActiveList>
					break;
 800677c:	e015      	b.n	80067aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800678c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800678e:	f000 fbdf 	bl	8006f50 <vPortFree>
 8006792:	e00a      	b.n	80067aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800679a:	f023 0301 	bic.w	r3, r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067a6:	e000      	b.n	80067aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80067a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067aa:	4b08      	ldr	r3, [pc, #32]	; (80067cc <prvProcessReceivedCommands+0x1c0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	1d39      	adds	r1, r7, #4
 80067b0:	2200      	movs	r2, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fbec 	bl	8004f90 <xQueueReceive>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f47f af2a 	bne.w	8006614 <prvProcessReceivedCommands+0x8>
	}
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	3730      	adds	r7, #48	; 0x30
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	200018e4 	.word	0x200018e4

080067d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067d6:	e048      	b.n	800686a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067d8:	4b2d      	ldr	r3, [pc, #180]	; (8006890 <prvSwitchTimerLists+0xc0>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e2:	4b2b      	ldr	r3, [pc, #172]	; (8006890 <prvSwitchTimerLists+0xc0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe f905 	bl	8004a00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d02e      	beq.n	800686a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	429a      	cmp	r2, r3
 800681c:	d90e      	bls.n	800683c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800682a:	4b19      	ldr	r3, [pc, #100]	; (8006890 <prvSwitchTimerLists+0xc0>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3304      	adds	r3, #4
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f7fe f8aa 	bl	800498e <vListInsert>
 800683a:	e016      	b.n	800686a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800683c:	2300      	movs	r3, #0
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2300      	movs	r3, #0
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	2100      	movs	r1, #0
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff fd60 	bl	800630c <xTimerGenericCommand>
 800684c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	603b      	str	r3, [r7, #0]
}
 8006866:	bf00      	nop
 8006868:	e7fe      	b.n	8006868 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <prvSwitchTimerLists+0xc0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1b1      	bne.n	80067d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006874:	4b06      	ldr	r3, [pc, #24]	; (8006890 <prvSwitchTimerLists+0xc0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800687a:	4b06      	ldr	r3, [pc, #24]	; (8006894 <prvSwitchTimerLists+0xc4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a04      	ldr	r2, [pc, #16]	; (8006890 <prvSwitchTimerLists+0xc0>)
 8006880:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006882:	4a04      	ldr	r2, [pc, #16]	; (8006894 <prvSwitchTimerLists+0xc4>)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	6013      	str	r3, [r2, #0]
}
 8006888:	bf00      	nop
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200018dc 	.word	0x200018dc
 8006894:	200018e0 	.word	0x200018e0

08006898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800689e:	f000 f969 	bl	8006b74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d120      	bne.n	80068ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068aa:	4814      	ldr	r0, [pc, #80]	; (80068fc <prvCheckForValidListAndQueue+0x64>)
 80068ac:	f7fe f81e 	bl	80048ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068b0:	4813      	ldr	r0, [pc, #76]	; (8006900 <prvCheckForValidListAndQueue+0x68>)
 80068b2:	f7fe f81b 	bl	80048ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068b6:	4b13      	ldr	r3, [pc, #76]	; (8006904 <prvCheckForValidListAndQueue+0x6c>)
 80068b8:	4a10      	ldr	r2, [pc, #64]	; (80068fc <prvCheckForValidListAndQueue+0x64>)
 80068ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068bc:	4b12      	ldr	r3, [pc, #72]	; (8006908 <prvCheckForValidListAndQueue+0x70>)
 80068be:	4a10      	ldr	r2, [pc, #64]	; (8006900 <prvCheckForValidListAndQueue+0x68>)
 80068c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068c2:	2300      	movs	r3, #0
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <prvCheckForValidListAndQueue+0x74>)
 80068c8:	4a11      	ldr	r2, [pc, #68]	; (8006910 <prvCheckForValidListAndQueue+0x78>)
 80068ca:	2110      	movs	r1, #16
 80068cc:	200a      	movs	r0, #10
 80068ce:	f7fe f929 	bl	8004b24 <xQueueGenericCreateStatic>
 80068d2:	4603      	mov	r3, r0
 80068d4:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	490b      	ldr	r1, [pc, #44]	; (8006914 <prvCheckForValidListAndQueue+0x7c>)
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fd42 	bl	8005370 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068ec:	f000 f972 	bl	8006bd4 <vPortExitCritical>
}
 80068f0:	bf00      	nop
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	200018e4 	.word	0x200018e4
 80068fc:	200018b4 	.word	0x200018b4
 8006900:	200018c8 	.word	0x200018c8
 8006904:	200018dc 	.word	0x200018dc
 8006908:	200018e0 	.word	0x200018e0
 800690c:	20001990 	.word	0x20001990
 8006910:	200018f0 	.word	0x200018f0
 8006914:	08009f30 	.word	0x08009f30

08006918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3b04      	subs	r3, #4
 8006928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3b04      	subs	r3, #4
 8006936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3b04      	subs	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006948:	4a0c      	ldr	r2, [pc, #48]	; (800697c <pxPortInitialiseStack+0x64>)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b14      	subs	r3, #20
 8006952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3b04      	subs	r3, #4
 800695e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f06f 0202 	mvn.w	r2, #2
 8006966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3b20      	subs	r3, #32
 800696c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800696e:	68fb      	ldr	r3, [r7, #12]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	08006981 	.word	0x08006981

08006980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800698a:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <prvTaskExitError+0x54>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d00a      	beq.n	80069aa <prvTaskExitError+0x2a>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <prvTaskExitError+0x28>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	60bb      	str	r3, [r7, #8]
}
 80069bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069be:	bf00      	nop
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0fc      	beq.n	80069c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069c6:	bf00      	nop
 80069c8:	bf00      	nop
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	2000000c 	.word	0x2000000c
	...

080069e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069e0:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <pxCurrentTCBConst2>)
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	6808      	ldr	r0, [r1, #0]
 80069e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	f380 8809 	msr	PSP, r0
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8811 	msr	BASEPRI, r0
 80069fa:	4770      	bx	lr
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst2>:
 8006a00:	200013b4 	.word	0x200013b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop

08006a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a08:	4808      	ldr	r0, [pc, #32]	; (8006a2c <prvPortStartFirstTask+0x24>)
 8006a0a:	6800      	ldr	r0, [r0, #0]
 8006a0c:	6800      	ldr	r0, [r0, #0]
 8006a0e:	f380 8808 	msr	MSP, r0
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8814 	msr	CONTROL, r0
 8006a1a:	b662      	cpsie	i
 8006a1c:	b661      	cpsie	f
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	df00      	svc	0
 8006a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a2a:	bf00      	nop
 8006a2c:	e000ed08 	.word	0xe000ed08

08006a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a36:	4b46      	ldr	r3, [pc, #280]	; (8006b50 <xPortStartScheduler+0x120>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a46      	ldr	r2, [pc, #280]	; (8006b54 <xPortStartScheduler+0x124>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10a      	bne.n	8006a56 <xPortStartScheduler+0x26>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	613b      	str	r3, [r7, #16]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a56:	4b3e      	ldr	r3, [pc, #248]	; (8006b50 <xPortStartScheduler+0x120>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a3f      	ldr	r2, [pc, #252]	; (8006b58 <xPortStartScheduler+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10a      	bne.n	8006a76 <xPortStartScheduler+0x46>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	60fb      	str	r3, [r7, #12]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a76:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <xPortStartScheduler+0x12c>)
 8006a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	22ff      	movs	r2, #255	; 0xff
 8006a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <xPortStartScheduler+0x130>)
 8006a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a9e:	4b31      	ldr	r3, [pc, #196]	; (8006b64 <xPortStartScheduler+0x134>)
 8006aa0:	2207      	movs	r2, #7
 8006aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aa4:	e009      	b.n	8006aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006aa6:	4b2f      	ldr	r3, [pc, #188]	; (8006b64 <xPortStartScheduler+0x134>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	4a2d      	ldr	r2, [pc, #180]	; (8006b64 <xPortStartScheduler+0x134>)
 8006aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac2:	2b80      	cmp	r3, #128	; 0x80
 8006ac4:	d0ef      	beq.n	8006aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ac6:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <xPortStartScheduler+0x134>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1c3 0307 	rsb	r3, r3, #7
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d00a      	beq.n	8006ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60bb      	str	r3, [r7, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ae8:	4b1e      	ldr	r3, [pc, #120]	; (8006b64 <xPortStartScheduler+0x134>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <xPortStartScheduler+0x134>)
 8006af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006af2:	4b1c      	ldr	r3, [pc, #112]	; (8006b64 <xPortStartScheduler+0x134>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006afa:	4a1a      	ldr	r2, [pc, #104]	; (8006b64 <xPortStartScheduler+0x134>)
 8006afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b06:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <xPortStartScheduler+0x138>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a17      	ldr	r2, [pc, #92]	; (8006b68 <xPortStartScheduler+0x138>)
 8006b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b12:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <xPortStartScheduler+0x138>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a14      	ldr	r2, [pc, #80]	; (8006b68 <xPortStartScheduler+0x138>)
 8006b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b1e:	f000 f8dd 	bl	8006cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b22:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <xPortStartScheduler+0x13c>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b28:	f000 f8fc 	bl	8006d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b2c:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <xPortStartScheduler+0x140>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a0f      	ldr	r2, [pc, #60]	; (8006b70 <xPortStartScheduler+0x140>)
 8006b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b38:	f7ff ff66 	bl	8006a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b3c:	f7ff f848 	bl	8005bd0 <vTaskSwitchContext>
	prvTaskExitError();
 8006b40:	f7ff ff1e 	bl	8006980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	e000ed00 	.word	0xe000ed00
 8006b54:	410fc271 	.word	0x410fc271
 8006b58:	410fc270 	.word	0x410fc270
 8006b5c:	e000e400 	.word	0xe000e400
 8006b60:	200019e0 	.word	0x200019e0
 8006b64:	200019e4 	.word	0x200019e4
 8006b68:	e000ed20 	.word	0xe000ed20
 8006b6c:	2000000c 	.word	0x2000000c
 8006b70:	e000ef34 	.word	0xe000ef34

08006b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	607b      	str	r3, [r7, #4]
}
 8006b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <vPortEnterCritical+0x58>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3301      	adds	r3, #1
 8006b94:	4a0d      	ldr	r2, [pc, #52]	; (8006bcc <vPortEnterCritical+0x58>)
 8006b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b98:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <vPortEnterCritical+0x58>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d10f      	bne.n	8006bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <vPortEnterCritical+0x5c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	603b      	str	r3, [r7, #0]
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <vPortEnterCritical+0x4a>
	}
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	2000000c 	.word	0x2000000c
 8006bd0:	e000ed04 	.word	0xe000ed04

08006bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bda:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <vPortExitCritical+0x50>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <vPortExitCritical+0x24>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	607b      	str	r3, [r7, #4]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <vPortExitCritical+0x50>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <vPortExitCritical+0x50>)
 8006c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c02:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <vPortExitCritical+0x50>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <vPortExitCritical+0x42>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	f383 8811 	msr	BASEPRI, r3
}
 8006c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	2000000c 	.word	0x2000000c
	...

08006c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c30:	f3ef 8009 	mrs	r0, PSP
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	4b15      	ldr	r3, [pc, #84]	; (8006c90 <pxCurrentTCBConst>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	f01e 0f10 	tst.w	lr, #16
 8006c40:	bf08      	it	eq
 8006c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4a:	6010      	str	r0, [r2, #0]
 8006c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c54:	f380 8811 	msr	BASEPRI, r0
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f7fe ffb6 	bl	8005bd0 <vTaskSwitchContext>
 8006c64:	f04f 0000 	mov.w	r0, #0
 8006c68:	f380 8811 	msr	BASEPRI, r0
 8006c6c:	bc09      	pop	{r0, r3}
 8006c6e:	6819      	ldr	r1, [r3, #0]
 8006c70:	6808      	ldr	r0, [r1, #0]
 8006c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c76:	f01e 0f10 	tst.w	lr, #16
 8006c7a:	bf08      	it	eq
 8006c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c80:	f380 8809 	msr	PSP, r0
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	f3af 8000 	nop.w

08006c90 <pxCurrentTCBConst>:
 8006c90:	200013b4 	.word	0x200013b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	607b      	str	r3, [r7, #4]
}
 8006cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cb2:	f7fe fed3 	bl	8005a5c <xTaskIncrementTick>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <xPortSysTickHandler+0x40>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f383 8811 	msr	BASEPRI, r3
}
 8006cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <vPortSetupTimerInterrupt+0x34>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <vPortSetupTimerInterrupt+0x38>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <vPortSetupTimerInterrupt+0x3c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a0a      	ldr	r2, [pc, #40]	; (8006d1c <vPortSetupTimerInterrupt+0x40>)
 8006cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf6:	099b      	lsrs	r3, r3, #6
 8006cf8:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <vPortSetupTimerInterrupt+0x44>)
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cfe:	4b04      	ldr	r3, [pc, #16]	; (8006d10 <vPortSetupTimerInterrupt+0x34>)
 8006d00:	2207      	movs	r2, #7
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	e000e010 	.word	0xe000e010
 8006d14:	e000e018 	.word	0xe000e018
 8006d18:	20000000 	.word	0x20000000
 8006d1c:	10624dd3 	.word	0x10624dd3
 8006d20:	e000e014 	.word	0xe000e014

08006d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d34 <vPortEnableVFP+0x10>
 8006d28:	6801      	ldr	r1, [r0, #0]
 8006d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d2e:	6001      	str	r1, [r0, #0]
 8006d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d32:	bf00      	nop
 8006d34:	e000ed88 	.word	0xe000ed88

08006d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d3e:	f3ef 8305 	mrs	r3, IPSR
 8006d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	d914      	bls.n	8006d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d4a:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <vPortValidateInterruptPriority+0x70>)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d54:	4b15      	ldr	r3, [pc, #84]	; (8006dac <vPortValidateInterruptPriority+0x74>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	7afa      	ldrb	r2, [r7, #11]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d20a      	bcs.n	8006d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	607b      	str	r3, [r7, #4]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d74:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <vPortValidateInterruptPriority+0x78>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d7c:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <vPortValidateInterruptPriority+0x7c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d90a      	bls.n	8006d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	603b      	str	r3, [r7, #0]
}
 8006d96:	bf00      	nop
 8006d98:	e7fe      	b.n	8006d98 <vPortValidateInterruptPriority+0x60>
	}
 8006d9a:	bf00      	nop
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	e000e3f0 	.word	0xe000e3f0
 8006dac:	200019e0 	.word	0x200019e0
 8006db0:	e000ed0c 	.word	0xe000ed0c
 8006db4:	200019e4 	.word	0x200019e4

08006db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08a      	sub	sp, #40	; 0x28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dc4:	f7fe fd8e 	bl	80058e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dc8:	4b5b      	ldr	r3, [pc, #364]	; (8006f38 <pvPortMalloc+0x180>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006dd0:	f000 f920 	bl	8007014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006dd4:	4b59      	ldr	r3, [pc, #356]	; (8006f3c <pvPortMalloc+0x184>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 8093 	bne.w	8006f08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01d      	beq.n	8006e24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006de8:	2208      	movs	r2, #8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d014      	beq.n	8006e24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f023 0307 	bic.w	r3, r3, #7
 8006e00:	3308      	adds	r3, #8
 8006e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <pvPortMalloc+0x6c>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	617b      	str	r3, [r7, #20]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d06e      	beq.n	8006f08 <pvPortMalloc+0x150>
 8006e2a:	4b45      	ldr	r3, [pc, #276]	; (8006f40 <pvPortMalloc+0x188>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d869      	bhi.n	8006f08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e34:	4b43      	ldr	r3, [pc, #268]	; (8006f44 <pvPortMalloc+0x18c>)
 8006e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e38:	4b42      	ldr	r3, [pc, #264]	; (8006f44 <pvPortMalloc+0x18c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e3e:	e004      	b.n	8006e4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d903      	bls.n	8006e5c <pvPortMalloc+0xa4>
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1f1      	bne.n	8006e40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e5c:	4b36      	ldr	r3, [pc, #216]	; (8006f38 <pvPortMalloc+0x180>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d050      	beq.n	8006f08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	4413      	add	r3, r2
 8006e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	2308      	movs	r3, #8
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d91f      	bls.n	8006ec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <pvPortMalloc+0xf8>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	613b      	str	r3, [r7, #16]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ec2:	69b8      	ldr	r0, [r7, #24]
 8006ec4:	f000 f90a 	bl	80070dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ec8:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <pvPortMalloc+0x188>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	4a1b      	ldr	r2, [pc, #108]	; (8006f40 <pvPortMalloc+0x188>)
 8006ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <pvPortMalloc+0x188>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <pvPortMalloc+0x190>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d203      	bcs.n	8006eea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ee2:	4b17      	ldr	r3, [pc, #92]	; (8006f40 <pvPortMalloc+0x188>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a18      	ldr	r2, [pc, #96]	; (8006f48 <pvPortMalloc+0x190>)
 8006ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <pvPortMalloc+0x184>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006efe:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <pvPortMalloc+0x194>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	4a11      	ldr	r2, [pc, #68]	; (8006f4c <pvPortMalloc+0x194>)
 8006f06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f08:	f7fe fcfa 	bl	8005900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <pvPortMalloc+0x174>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60fb      	str	r3, [r7, #12]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <pvPortMalloc+0x172>
	return pvReturn;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3728      	adds	r7, #40	; 0x28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20015270 	.word	0x20015270
 8006f3c:	20015284 	.word	0x20015284
 8006f40:	20015274 	.word	0x20015274
 8006f44:	20015268 	.word	0x20015268
 8006f48:	20015278 	.word	0x20015278
 8006f4c:	2001527c 	.word	0x2001527c

08006f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d04d      	beq.n	8006ffe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f62:	2308      	movs	r3, #8
 8006f64:	425b      	negs	r3, r3
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4413      	add	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	4b24      	ldr	r3, [pc, #144]	; (8007008 <vPortFree+0xb8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <vPortFree+0x44>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60fb      	str	r3, [r7, #12]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <vPortFree+0x62>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60bb      	str	r3, [r7, #8]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	4b14      	ldr	r3, [pc, #80]	; (8007008 <vPortFree+0xb8>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01e      	beq.n	8006ffe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11a      	bne.n	8006ffe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <vPortFree+0xb8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fd8:	f7fe fc84 	bl	80058e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <vPortFree+0xbc>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <vPortFree+0xbc>)
 8006fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fea:	6938      	ldr	r0, [r7, #16]
 8006fec:	f000 f876 	bl	80070dc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <vPortFree+0xc0>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	4a06      	ldr	r2, [pc, #24]	; (8007010 <vPortFree+0xc0>)
 8006ff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ffa:	f7fe fc81 	bl	8005900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ffe:	bf00      	nop
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20015284 	.word	0x20015284
 800700c:	20015274 	.word	0x20015274
 8007010:	20015280 	.word	0x20015280

08007014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800701a:	4b29      	ldr	r3, [pc, #164]	; (80070c0 <prvHeapInit+0xac>)
 800701c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800701e:	4b29      	ldr	r3, [pc, #164]	; (80070c4 <prvHeapInit+0xb0>)
 8007020:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00c      	beq.n	8007046 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3307      	adds	r3, #7
 8007030:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f023 0307 	bic.w	r3, r3, #7
 8007038:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	4a20      	ldr	r2, [pc, #128]	; (80070c4 <prvHeapInit+0xb0>)
 8007042:	4413      	add	r3, r2
 8007044:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800704a:	4a1f      	ldr	r2, [pc, #124]	; (80070c8 <prvHeapInit+0xb4>)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007050:	4b1d      	ldr	r3, [pc, #116]	; (80070c8 <prvHeapInit+0xb4>)
 8007052:	2200      	movs	r2, #0
 8007054:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	4413      	add	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800705e:	2208      	movs	r2, #8
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f023 0307 	bic.w	r3, r3, #7
 800706c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4a16      	ldr	r2, [pc, #88]	; (80070cc <prvHeapInit+0xb8>)
 8007072:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007074:	4b15      	ldr	r3, [pc, #84]	; (80070cc <prvHeapInit+0xb8>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2200      	movs	r2, #0
 800707a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800707c:	4b13      	ldr	r3, [pc, #76]	; (80070cc <prvHeapInit+0xb8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	1ad2      	subs	r2, r2, r3
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007092:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <prvHeapInit+0xb8>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	4a0c      	ldr	r2, [pc, #48]	; (80070d0 <prvHeapInit+0xbc>)
 80070a0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4a0b      	ldr	r2, [pc, #44]	; (80070d4 <prvHeapInit+0xc0>)
 80070a8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070aa:	4b0b      	ldr	r3, [pc, #44]	; (80070d8 <prvHeapInit+0xc4>)
 80070ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070b0:	601a      	str	r2, [r3, #0]
}
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	00013880 	.word	0x00013880
 80070c4:	200019e8 	.word	0x200019e8
 80070c8:	20015268 	.word	0x20015268
 80070cc:	20015270 	.word	0x20015270
 80070d0:	20015278 	.word	0x20015278
 80070d4:	20015274 	.word	0x20015274
 80070d8:	20015284 	.word	0x20015284

080070dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070e4:	4b28      	ldr	r3, [pc, #160]	; (8007188 <prvInsertBlockIntoFreeList+0xac>)
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e002      	b.n	80070f0 <prvInsertBlockIntoFreeList+0x14>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d8f7      	bhi.n	80070ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	4413      	add	r3, r2
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	429a      	cmp	r2, r3
 800710a:	d108      	bne.n	800711e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	441a      	add	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	441a      	add	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d118      	bne.n	8007164 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	4b15      	ldr	r3, [pc, #84]	; (800718c <prvInsertBlockIntoFreeList+0xb0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d00d      	beq.n	800715a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	441a      	add	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e008      	b.n	800716c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800715a:	4b0c      	ldr	r3, [pc, #48]	; (800718c <prvInsertBlockIntoFreeList+0xb0>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	e003      	b.n	800716c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d002      	beq.n	800717a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20015268 	.word	0x20015268
 800718c:	20015270 	.word	0x20015270

08007190 <__errno>:
 8007190:	4b01      	ldr	r3, [pc, #4]	; (8007198 <__errno+0x8>)
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20000010 	.word	0x20000010

0800719c <std>:
 800719c:	2300      	movs	r3, #0
 800719e:	b510      	push	{r4, lr}
 80071a0:	4604      	mov	r4, r0
 80071a2:	e9c0 3300 	strd	r3, r3, [r0]
 80071a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071aa:	6083      	str	r3, [r0, #8]
 80071ac:	8181      	strh	r1, [r0, #12]
 80071ae:	6643      	str	r3, [r0, #100]	; 0x64
 80071b0:	81c2      	strh	r2, [r0, #14]
 80071b2:	6183      	str	r3, [r0, #24]
 80071b4:	4619      	mov	r1, r3
 80071b6:	2208      	movs	r2, #8
 80071b8:	305c      	adds	r0, #92	; 0x5c
 80071ba:	f000 f91a 	bl	80073f2 <memset>
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <std+0x38>)
 80071c0:	6263      	str	r3, [r4, #36]	; 0x24
 80071c2:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <std+0x3c>)
 80071c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <std+0x40>)
 80071c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <std+0x44>)
 80071cc:	6224      	str	r4, [r4, #32]
 80071ce:	6323      	str	r3, [r4, #48]	; 0x30
 80071d0:	bd10      	pop	{r4, pc}
 80071d2:	bf00      	nop
 80071d4:	08008011 	.word	0x08008011
 80071d8:	08008033 	.word	0x08008033
 80071dc:	0800806b 	.word	0x0800806b
 80071e0:	0800808f 	.word	0x0800808f

080071e4 <_cleanup_r>:
 80071e4:	4901      	ldr	r1, [pc, #4]	; (80071ec <_cleanup_r+0x8>)
 80071e6:	f000 b8af 	b.w	8007348 <_fwalk_reent>
 80071ea:	bf00      	nop
 80071ec:	08009061 	.word	0x08009061

080071f0 <__sfmoreglue>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	2268      	movs	r2, #104	; 0x68
 80071f4:	1e4d      	subs	r5, r1, #1
 80071f6:	4355      	muls	r5, r2
 80071f8:	460e      	mov	r6, r1
 80071fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071fe:	f000 f921 	bl	8007444 <_malloc_r>
 8007202:	4604      	mov	r4, r0
 8007204:	b140      	cbz	r0, 8007218 <__sfmoreglue+0x28>
 8007206:	2100      	movs	r1, #0
 8007208:	e9c0 1600 	strd	r1, r6, [r0]
 800720c:	300c      	adds	r0, #12
 800720e:	60a0      	str	r0, [r4, #8]
 8007210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007214:	f000 f8ed 	bl	80073f2 <memset>
 8007218:	4620      	mov	r0, r4
 800721a:	bd70      	pop	{r4, r5, r6, pc}

0800721c <__sfp_lock_acquire>:
 800721c:	4801      	ldr	r0, [pc, #4]	; (8007224 <__sfp_lock_acquire+0x8>)
 800721e:	f000 b8d8 	b.w	80073d2 <__retarget_lock_acquire_recursive>
 8007222:	bf00      	nop
 8007224:	20015289 	.word	0x20015289

08007228 <__sfp_lock_release>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__sfp_lock_release+0x8>)
 800722a:	f000 b8d3 	b.w	80073d4 <__retarget_lock_release_recursive>
 800722e:	bf00      	nop
 8007230:	20015289 	.word	0x20015289

08007234 <__sinit_lock_acquire>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__sinit_lock_acquire+0x8>)
 8007236:	f000 b8cc 	b.w	80073d2 <__retarget_lock_acquire_recursive>
 800723a:	bf00      	nop
 800723c:	2001528a 	.word	0x2001528a

08007240 <__sinit_lock_release>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__sinit_lock_release+0x8>)
 8007242:	f000 b8c7 	b.w	80073d4 <__retarget_lock_release_recursive>
 8007246:	bf00      	nop
 8007248:	2001528a 	.word	0x2001528a

0800724c <__sinit>:
 800724c:	b510      	push	{r4, lr}
 800724e:	4604      	mov	r4, r0
 8007250:	f7ff fff0 	bl	8007234 <__sinit_lock_acquire>
 8007254:	69a3      	ldr	r3, [r4, #24]
 8007256:	b11b      	cbz	r3, 8007260 <__sinit+0x14>
 8007258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800725c:	f7ff bff0 	b.w	8007240 <__sinit_lock_release>
 8007260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007264:	6523      	str	r3, [r4, #80]	; 0x50
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <__sinit+0x68>)
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <__sinit+0x6c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	62a2      	str	r2, [r4, #40]	; 0x28
 800726e:	42a3      	cmp	r3, r4
 8007270:	bf04      	itt	eq
 8007272:	2301      	moveq	r3, #1
 8007274:	61a3      	streq	r3, [r4, #24]
 8007276:	4620      	mov	r0, r4
 8007278:	f000 f820 	bl	80072bc <__sfp>
 800727c:	6060      	str	r0, [r4, #4]
 800727e:	4620      	mov	r0, r4
 8007280:	f000 f81c 	bl	80072bc <__sfp>
 8007284:	60a0      	str	r0, [r4, #8]
 8007286:	4620      	mov	r0, r4
 8007288:	f000 f818 	bl	80072bc <__sfp>
 800728c:	2200      	movs	r2, #0
 800728e:	60e0      	str	r0, [r4, #12]
 8007290:	2104      	movs	r1, #4
 8007292:	6860      	ldr	r0, [r4, #4]
 8007294:	f7ff ff82 	bl	800719c <std>
 8007298:	68a0      	ldr	r0, [r4, #8]
 800729a:	2201      	movs	r2, #1
 800729c:	2109      	movs	r1, #9
 800729e:	f7ff ff7d 	bl	800719c <std>
 80072a2:	68e0      	ldr	r0, [r4, #12]
 80072a4:	2202      	movs	r2, #2
 80072a6:	2112      	movs	r1, #18
 80072a8:	f7ff ff78 	bl	800719c <std>
 80072ac:	2301      	movs	r3, #1
 80072ae:	61a3      	str	r3, [r4, #24]
 80072b0:	e7d2      	b.n	8007258 <__sinit+0xc>
 80072b2:	bf00      	nop
 80072b4:	08009fdc 	.word	0x08009fdc
 80072b8:	080071e5 	.word	0x080071e5

080072bc <__sfp>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	4607      	mov	r7, r0
 80072c0:	f7ff ffac 	bl	800721c <__sfp_lock_acquire>
 80072c4:	4b1e      	ldr	r3, [pc, #120]	; (8007340 <__sfp+0x84>)
 80072c6:	681e      	ldr	r6, [r3, #0]
 80072c8:	69b3      	ldr	r3, [r6, #24]
 80072ca:	b913      	cbnz	r3, 80072d2 <__sfp+0x16>
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff ffbd 	bl	800724c <__sinit>
 80072d2:	3648      	adds	r6, #72	; 0x48
 80072d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072d8:	3b01      	subs	r3, #1
 80072da:	d503      	bpl.n	80072e4 <__sfp+0x28>
 80072dc:	6833      	ldr	r3, [r6, #0]
 80072de:	b30b      	cbz	r3, 8007324 <__sfp+0x68>
 80072e0:	6836      	ldr	r6, [r6, #0]
 80072e2:	e7f7      	b.n	80072d4 <__sfp+0x18>
 80072e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072e8:	b9d5      	cbnz	r5, 8007320 <__sfp+0x64>
 80072ea:	4b16      	ldr	r3, [pc, #88]	; (8007344 <__sfp+0x88>)
 80072ec:	60e3      	str	r3, [r4, #12]
 80072ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072f2:	6665      	str	r5, [r4, #100]	; 0x64
 80072f4:	f000 f86c 	bl	80073d0 <__retarget_lock_init_recursive>
 80072f8:	f7ff ff96 	bl	8007228 <__sfp_lock_release>
 80072fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007304:	6025      	str	r5, [r4, #0]
 8007306:	61a5      	str	r5, [r4, #24]
 8007308:	2208      	movs	r2, #8
 800730a:	4629      	mov	r1, r5
 800730c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007310:	f000 f86f 	bl	80073f2 <memset>
 8007314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800731c:	4620      	mov	r0, r4
 800731e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007320:	3468      	adds	r4, #104	; 0x68
 8007322:	e7d9      	b.n	80072d8 <__sfp+0x1c>
 8007324:	2104      	movs	r1, #4
 8007326:	4638      	mov	r0, r7
 8007328:	f7ff ff62 	bl	80071f0 <__sfmoreglue>
 800732c:	4604      	mov	r4, r0
 800732e:	6030      	str	r0, [r6, #0]
 8007330:	2800      	cmp	r0, #0
 8007332:	d1d5      	bne.n	80072e0 <__sfp+0x24>
 8007334:	f7ff ff78 	bl	8007228 <__sfp_lock_release>
 8007338:	230c      	movs	r3, #12
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	e7ee      	b.n	800731c <__sfp+0x60>
 800733e:	bf00      	nop
 8007340:	08009fdc 	.word	0x08009fdc
 8007344:	ffff0001 	.word	0xffff0001

08007348 <_fwalk_reent>:
 8007348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800734c:	4606      	mov	r6, r0
 800734e:	4688      	mov	r8, r1
 8007350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007354:	2700      	movs	r7, #0
 8007356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800735a:	f1b9 0901 	subs.w	r9, r9, #1
 800735e:	d505      	bpl.n	800736c <_fwalk_reent+0x24>
 8007360:	6824      	ldr	r4, [r4, #0]
 8007362:	2c00      	cmp	r4, #0
 8007364:	d1f7      	bne.n	8007356 <_fwalk_reent+0xe>
 8007366:	4638      	mov	r0, r7
 8007368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736c:	89ab      	ldrh	r3, [r5, #12]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d907      	bls.n	8007382 <_fwalk_reent+0x3a>
 8007372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007376:	3301      	adds	r3, #1
 8007378:	d003      	beq.n	8007382 <_fwalk_reent+0x3a>
 800737a:	4629      	mov	r1, r5
 800737c:	4630      	mov	r0, r6
 800737e:	47c0      	blx	r8
 8007380:	4307      	orrs	r7, r0
 8007382:	3568      	adds	r5, #104	; 0x68
 8007384:	e7e9      	b.n	800735a <_fwalk_reent+0x12>
	...

08007388 <__libc_init_array>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	4d0d      	ldr	r5, [pc, #52]	; (80073c0 <__libc_init_array+0x38>)
 800738c:	4c0d      	ldr	r4, [pc, #52]	; (80073c4 <__libc_init_array+0x3c>)
 800738e:	1b64      	subs	r4, r4, r5
 8007390:	10a4      	asrs	r4, r4, #2
 8007392:	2600      	movs	r6, #0
 8007394:	42a6      	cmp	r6, r4
 8007396:	d109      	bne.n	80073ac <__libc_init_array+0x24>
 8007398:	4d0b      	ldr	r5, [pc, #44]	; (80073c8 <__libc_init_array+0x40>)
 800739a:	4c0c      	ldr	r4, [pc, #48]	; (80073cc <__libc_init_array+0x44>)
 800739c:	f002 fd3a 	bl	8009e14 <_init>
 80073a0:	1b64      	subs	r4, r4, r5
 80073a2:	10a4      	asrs	r4, r4, #2
 80073a4:	2600      	movs	r6, #0
 80073a6:	42a6      	cmp	r6, r4
 80073a8:	d105      	bne.n	80073b6 <__libc_init_array+0x2e>
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
 80073ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b0:	4798      	blx	r3
 80073b2:	3601      	adds	r6, #1
 80073b4:	e7ee      	b.n	8007394 <__libc_init_array+0xc>
 80073b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ba:	4798      	blx	r3
 80073bc:	3601      	adds	r6, #1
 80073be:	e7f2      	b.n	80073a6 <__libc_init_array+0x1e>
 80073c0:	0800a35c 	.word	0x0800a35c
 80073c4:	0800a35c 	.word	0x0800a35c
 80073c8:	0800a35c 	.word	0x0800a35c
 80073cc:	0800a360 	.word	0x0800a360

080073d0 <__retarget_lock_init_recursive>:
 80073d0:	4770      	bx	lr

080073d2 <__retarget_lock_acquire_recursive>:
 80073d2:	4770      	bx	lr

080073d4 <__retarget_lock_release_recursive>:
 80073d4:	4770      	bx	lr

080073d6 <memcpy>:
 80073d6:	440a      	add	r2, r1
 80073d8:	4291      	cmp	r1, r2
 80073da:	f100 33ff 	add.w	r3, r0, #4294967295
 80073de:	d100      	bne.n	80073e2 <memcpy+0xc>
 80073e0:	4770      	bx	lr
 80073e2:	b510      	push	{r4, lr}
 80073e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ec:	4291      	cmp	r1, r2
 80073ee:	d1f9      	bne.n	80073e4 <memcpy+0xe>
 80073f0:	bd10      	pop	{r4, pc}

080073f2 <memset>:
 80073f2:	4402      	add	r2, r0
 80073f4:	4603      	mov	r3, r0
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d100      	bne.n	80073fc <memset+0xa>
 80073fa:	4770      	bx	lr
 80073fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007400:	e7f9      	b.n	80073f6 <memset+0x4>
	...

08007404 <sbrk_aligned>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4e0e      	ldr	r6, [pc, #56]	; (8007440 <sbrk_aligned+0x3c>)
 8007408:	460c      	mov	r4, r1
 800740a:	6831      	ldr	r1, [r6, #0]
 800740c:	4605      	mov	r5, r0
 800740e:	b911      	cbnz	r1, 8007416 <sbrk_aligned+0x12>
 8007410:	f000 fdee 	bl	8007ff0 <_sbrk_r>
 8007414:	6030      	str	r0, [r6, #0]
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f000 fde9 	bl	8007ff0 <_sbrk_r>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	d00a      	beq.n	8007438 <sbrk_aligned+0x34>
 8007422:	1cc4      	adds	r4, r0, #3
 8007424:	f024 0403 	bic.w	r4, r4, #3
 8007428:	42a0      	cmp	r0, r4
 800742a:	d007      	beq.n	800743c <sbrk_aligned+0x38>
 800742c:	1a21      	subs	r1, r4, r0
 800742e:	4628      	mov	r0, r5
 8007430:	f000 fdde 	bl	8007ff0 <_sbrk_r>
 8007434:	3001      	adds	r0, #1
 8007436:	d101      	bne.n	800743c <sbrk_aligned+0x38>
 8007438:	f04f 34ff 	mov.w	r4, #4294967295
 800743c:	4620      	mov	r0, r4
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	20015290 	.word	0x20015290

08007444 <_malloc_r>:
 8007444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007448:	1ccd      	adds	r5, r1, #3
 800744a:	f025 0503 	bic.w	r5, r5, #3
 800744e:	3508      	adds	r5, #8
 8007450:	2d0c      	cmp	r5, #12
 8007452:	bf38      	it	cc
 8007454:	250c      	movcc	r5, #12
 8007456:	2d00      	cmp	r5, #0
 8007458:	4607      	mov	r7, r0
 800745a:	db01      	blt.n	8007460 <_malloc_r+0x1c>
 800745c:	42a9      	cmp	r1, r5
 800745e:	d905      	bls.n	800746c <_malloc_r+0x28>
 8007460:	230c      	movs	r3, #12
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	2600      	movs	r6, #0
 8007466:	4630      	mov	r0, r6
 8007468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800746c:	4e2e      	ldr	r6, [pc, #184]	; (8007528 <_malloc_r+0xe4>)
 800746e:	f001 feb7 	bl	80091e0 <__malloc_lock>
 8007472:	6833      	ldr	r3, [r6, #0]
 8007474:	461c      	mov	r4, r3
 8007476:	bb34      	cbnz	r4, 80074c6 <_malloc_r+0x82>
 8007478:	4629      	mov	r1, r5
 800747a:	4638      	mov	r0, r7
 800747c:	f7ff ffc2 	bl	8007404 <sbrk_aligned>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	4604      	mov	r4, r0
 8007484:	d14d      	bne.n	8007522 <_malloc_r+0xde>
 8007486:	6834      	ldr	r4, [r6, #0]
 8007488:	4626      	mov	r6, r4
 800748a:	2e00      	cmp	r6, #0
 800748c:	d140      	bne.n	8007510 <_malloc_r+0xcc>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	4631      	mov	r1, r6
 8007492:	4638      	mov	r0, r7
 8007494:	eb04 0803 	add.w	r8, r4, r3
 8007498:	f000 fdaa 	bl	8007ff0 <_sbrk_r>
 800749c:	4580      	cmp	r8, r0
 800749e:	d13a      	bne.n	8007516 <_malloc_r+0xd2>
 80074a0:	6821      	ldr	r1, [r4, #0]
 80074a2:	3503      	adds	r5, #3
 80074a4:	1a6d      	subs	r5, r5, r1
 80074a6:	f025 0503 	bic.w	r5, r5, #3
 80074aa:	3508      	adds	r5, #8
 80074ac:	2d0c      	cmp	r5, #12
 80074ae:	bf38      	it	cc
 80074b0:	250c      	movcc	r5, #12
 80074b2:	4629      	mov	r1, r5
 80074b4:	4638      	mov	r0, r7
 80074b6:	f7ff ffa5 	bl	8007404 <sbrk_aligned>
 80074ba:	3001      	adds	r0, #1
 80074bc:	d02b      	beq.n	8007516 <_malloc_r+0xd2>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	442b      	add	r3, r5
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	e00e      	b.n	80074e4 <_malloc_r+0xa0>
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	1b52      	subs	r2, r2, r5
 80074ca:	d41e      	bmi.n	800750a <_malloc_r+0xc6>
 80074cc:	2a0b      	cmp	r2, #11
 80074ce:	d916      	bls.n	80074fe <_malloc_r+0xba>
 80074d0:	1961      	adds	r1, r4, r5
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	6025      	str	r5, [r4, #0]
 80074d6:	bf18      	it	ne
 80074d8:	6059      	strne	r1, [r3, #4]
 80074da:	6863      	ldr	r3, [r4, #4]
 80074dc:	bf08      	it	eq
 80074de:	6031      	streq	r1, [r6, #0]
 80074e0:	5162      	str	r2, [r4, r5]
 80074e2:	604b      	str	r3, [r1, #4]
 80074e4:	4638      	mov	r0, r7
 80074e6:	f104 060b 	add.w	r6, r4, #11
 80074ea:	f001 fe7f 	bl	80091ec <__malloc_unlock>
 80074ee:	f026 0607 	bic.w	r6, r6, #7
 80074f2:	1d23      	adds	r3, r4, #4
 80074f4:	1af2      	subs	r2, r6, r3
 80074f6:	d0b6      	beq.n	8007466 <_malloc_r+0x22>
 80074f8:	1b9b      	subs	r3, r3, r6
 80074fa:	50a3      	str	r3, [r4, r2]
 80074fc:	e7b3      	b.n	8007466 <_malloc_r+0x22>
 80074fe:	6862      	ldr	r2, [r4, #4]
 8007500:	42a3      	cmp	r3, r4
 8007502:	bf0c      	ite	eq
 8007504:	6032      	streq	r2, [r6, #0]
 8007506:	605a      	strne	r2, [r3, #4]
 8007508:	e7ec      	b.n	80074e4 <_malloc_r+0xa0>
 800750a:	4623      	mov	r3, r4
 800750c:	6864      	ldr	r4, [r4, #4]
 800750e:	e7b2      	b.n	8007476 <_malloc_r+0x32>
 8007510:	4634      	mov	r4, r6
 8007512:	6876      	ldr	r6, [r6, #4]
 8007514:	e7b9      	b.n	800748a <_malloc_r+0x46>
 8007516:	230c      	movs	r3, #12
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	4638      	mov	r0, r7
 800751c:	f001 fe66 	bl	80091ec <__malloc_unlock>
 8007520:	e7a1      	b.n	8007466 <_malloc_r+0x22>
 8007522:	6025      	str	r5, [r4, #0]
 8007524:	e7de      	b.n	80074e4 <_malloc_r+0xa0>
 8007526:	bf00      	nop
 8007528:	2001528c 	.word	0x2001528c

0800752c <__cvt>:
 800752c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	ec55 4b10 	vmov	r4, r5, d0
 8007534:	2d00      	cmp	r5, #0
 8007536:	460e      	mov	r6, r1
 8007538:	4619      	mov	r1, r3
 800753a:	462b      	mov	r3, r5
 800753c:	bfbb      	ittet	lt
 800753e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007542:	461d      	movlt	r5, r3
 8007544:	2300      	movge	r3, #0
 8007546:	232d      	movlt	r3, #45	; 0x2d
 8007548:	700b      	strb	r3, [r1, #0]
 800754a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800754c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007550:	4691      	mov	r9, r2
 8007552:	f023 0820 	bic.w	r8, r3, #32
 8007556:	bfbc      	itt	lt
 8007558:	4622      	movlt	r2, r4
 800755a:	4614      	movlt	r4, r2
 800755c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007560:	d005      	beq.n	800756e <__cvt+0x42>
 8007562:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007566:	d100      	bne.n	800756a <__cvt+0x3e>
 8007568:	3601      	adds	r6, #1
 800756a:	2102      	movs	r1, #2
 800756c:	e000      	b.n	8007570 <__cvt+0x44>
 800756e:	2103      	movs	r1, #3
 8007570:	ab03      	add	r3, sp, #12
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	ab02      	add	r3, sp, #8
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	ec45 4b10 	vmov	d0, r4, r5
 800757c:	4653      	mov	r3, sl
 800757e:	4632      	mov	r2, r6
 8007580:	f000 fefa 	bl	8008378 <_dtoa_r>
 8007584:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007588:	4607      	mov	r7, r0
 800758a:	d102      	bne.n	8007592 <__cvt+0x66>
 800758c:	f019 0f01 	tst.w	r9, #1
 8007590:	d022      	beq.n	80075d8 <__cvt+0xac>
 8007592:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007596:	eb07 0906 	add.w	r9, r7, r6
 800759a:	d110      	bne.n	80075be <__cvt+0x92>
 800759c:	783b      	ldrb	r3, [r7, #0]
 800759e:	2b30      	cmp	r3, #48	; 0x30
 80075a0:	d10a      	bne.n	80075b8 <__cvt+0x8c>
 80075a2:	2200      	movs	r2, #0
 80075a4:	2300      	movs	r3, #0
 80075a6:	4620      	mov	r0, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f9 fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80075ae:	b918      	cbnz	r0, 80075b8 <__cvt+0x8c>
 80075b0:	f1c6 0601 	rsb	r6, r6, #1
 80075b4:	f8ca 6000 	str.w	r6, [sl]
 80075b8:	f8da 3000 	ldr.w	r3, [sl]
 80075bc:	4499      	add	r9, r3
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	4620      	mov	r0, r4
 80075c4:	4629      	mov	r1, r5
 80075c6:	f7f9 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80075ca:	b108      	cbz	r0, 80075d0 <__cvt+0xa4>
 80075cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80075d0:	2230      	movs	r2, #48	; 0x30
 80075d2:	9b03      	ldr	r3, [sp, #12]
 80075d4:	454b      	cmp	r3, r9
 80075d6:	d307      	bcc.n	80075e8 <__cvt+0xbc>
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075dc:	1bdb      	subs	r3, r3, r7
 80075de:	4638      	mov	r0, r7
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	b004      	add	sp, #16
 80075e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e8:	1c59      	adds	r1, r3, #1
 80075ea:	9103      	str	r1, [sp, #12]
 80075ec:	701a      	strb	r2, [r3, #0]
 80075ee:	e7f0      	b.n	80075d2 <__cvt+0xa6>

080075f0 <__exponent>:
 80075f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075f2:	4603      	mov	r3, r0
 80075f4:	2900      	cmp	r1, #0
 80075f6:	bfb8      	it	lt
 80075f8:	4249      	neglt	r1, r1
 80075fa:	f803 2b02 	strb.w	r2, [r3], #2
 80075fe:	bfb4      	ite	lt
 8007600:	222d      	movlt	r2, #45	; 0x2d
 8007602:	222b      	movge	r2, #43	; 0x2b
 8007604:	2909      	cmp	r1, #9
 8007606:	7042      	strb	r2, [r0, #1]
 8007608:	dd2a      	ble.n	8007660 <__exponent+0x70>
 800760a:	f10d 0407 	add.w	r4, sp, #7
 800760e:	46a4      	mov	ip, r4
 8007610:	270a      	movs	r7, #10
 8007612:	46a6      	mov	lr, r4
 8007614:	460a      	mov	r2, r1
 8007616:	fb91 f6f7 	sdiv	r6, r1, r7
 800761a:	fb07 1516 	mls	r5, r7, r6, r1
 800761e:	3530      	adds	r5, #48	; 0x30
 8007620:	2a63      	cmp	r2, #99	; 0x63
 8007622:	f104 34ff 	add.w	r4, r4, #4294967295
 8007626:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800762a:	4631      	mov	r1, r6
 800762c:	dcf1      	bgt.n	8007612 <__exponent+0x22>
 800762e:	3130      	adds	r1, #48	; 0x30
 8007630:	f1ae 0502 	sub.w	r5, lr, #2
 8007634:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007638:	1c44      	adds	r4, r0, #1
 800763a:	4629      	mov	r1, r5
 800763c:	4561      	cmp	r1, ip
 800763e:	d30a      	bcc.n	8007656 <__exponent+0x66>
 8007640:	f10d 0209 	add.w	r2, sp, #9
 8007644:	eba2 020e 	sub.w	r2, r2, lr
 8007648:	4565      	cmp	r5, ip
 800764a:	bf88      	it	hi
 800764c:	2200      	movhi	r2, #0
 800764e:	4413      	add	r3, r2
 8007650:	1a18      	subs	r0, r3, r0
 8007652:	b003      	add	sp, #12
 8007654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800765a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800765e:	e7ed      	b.n	800763c <__exponent+0x4c>
 8007660:	2330      	movs	r3, #48	; 0x30
 8007662:	3130      	adds	r1, #48	; 0x30
 8007664:	7083      	strb	r3, [r0, #2]
 8007666:	70c1      	strb	r1, [r0, #3]
 8007668:	1d03      	adds	r3, r0, #4
 800766a:	e7f1      	b.n	8007650 <__exponent+0x60>

0800766c <_printf_float>:
 800766c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007670:	ed2d 8b02 	vpush	{d8}
 8007674:	b08d      	sub	sp, #52	; 0x34
 8007676:	460c      	mov	r4, r1
 8007678:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800767c:	4616      	mov	r6, r2
 800767e:	461f      	mov	r7, r3
 8007680:	4605      	mov	r5, r0
 8007682:	f001 fd29 	bl	80090d8 <_localeconv_r>
 8007686:	f8d0 a000 	ldr.w	sl, [r0]
 800768a:	4650      	mov	r0, sl
 800768c:	f7f8 fda8 	bl	80001e0 <strlen>
 8007690:	2300      	movs	r3, #0
 8007692:	930a      	str	r3, [sp, #40]	; 0x28
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	9305      	str	r3, [sp, #20]
 8007698:	f8d8 3000 	ldr.w	r3, [r8]
 800769c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076a0:	3307      	adds	r3, #7
 80076a2:	f023 0307 	bic.w	r3, r3, #7
 80076a6:	f103 0208 	add.w	r2, r3, #8
 80076aa:	f8c8 2000 	str.w	r2, [r8]
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80076ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80076c4:	ee08 0a10 	vmov	s16, r0
 80076c8:	4b9f      	ldr	r3, [pc, #636]	; (8007948 <_printf_float+0x2dc>)
 80076ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ce:	f04f 32ff 	mov.w	r2, #4294967295
 80076d2:	f7f9 fa33 	bl	8000b3c <__aeabi_dcmpun>
 80076d6:	bb88      	cbnz	r0, 800773c <_printf_float+0xd0>
 80076d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076dc:	4b9a      	ldr	r3, [pc, #616]	; (8007948 <_printf_float+0x2dc>)
 80076de:	f04f 32ff 	mov.w	r2, #4294967295
 80076e2:	f7f9 fa0d 	bl	8000b00 <__aeabi_dcmple>
 80076e6:	bb48      	cbnz	r0, 800773c <_printf_float+0xd0>
 80076e8:	2200      	movs	r2, #0
 80076ea:	2300      	movs	r3, #0
 80076ec:	4640      	mov	r0, r8
 80076ee:	4649      	mov	r1, r9
 80076f0:	f7f9 f9fc 	bl	8000aec <__aeabi_dcmplt>
 80076f4:	b110      	cbz	r0, 80076fc <_printf_float+0x90>
 80076f6:	232d      	movs	r3, #45	; 0x2d
 80076f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076fc:	4b93      	ldr	r3, [pc, #588]	; (800794c <_printf_float+0x2e0>)
 80076fe:	4894      	ldr	r0, [pc, #592]	; (8007950 <_printf_float+0x2e4>)
 8007700:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007704:	bf94      	ite	ls
 8007706:	4698      	movls	r8, r3
 8007708:	4680      	movhi	r8, r0
 800770a:	2303      	movs	r3, #3
 800770c:	6123      	str	r3, [r4, #16]
 800770e:	9b05      	ldr	r3, [sp, #20]
 8007710:	f023 0204 	bic.w	r2, r3, #4
 8007714:	6022      	str	r2, [r4, #0]
 8007716:	f04f 0900 	mov.w	r9, #0
 800771a:	9700      	str	r7, [sp, #0]
 800771c:	4633      	mov	r3, r6
 800771e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007720:	4621      	mov	r1, r4
 8007722:	4628      	mov	r0, r5
 8007724:	f000 f9d8 	bl	8007ad8 <_printf_common>
 8007728:	3001      	adds	r0, #1
 800772a:	f040 8090 	bne.w	800784e <_printf_float+0x1e2>
 800772e:	f04f 30ff 	mov.w	r0, #4294967295
 8007732:	b00d      	add	sp, #52	; 0x34
 8007734:	ecbd 8b02 	vpop	{d8}
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	4642      	mov	r2, r8
 800773e:	464b      	mov	r3, r9
 8007740:	4640      	mov	r0, r8
 8007742:	4649      	mov	r1, r9
 8007744:	f7f9 f9fa 	bl	8000b3c <__aeabi_dcmpun>
 8007748:	b140      	cbz	r0, 800775c <_printf_float+0xf0>
 800774a:	464b      	mov	r3, r9
 800774c:	2b00      	cmp	r3, #0
 800774e:	bfbc      	itt	lt
 8007750:	232d      	movlt	r3, #45	; 0x2d
 8007752:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007756:	487f      	ldr	r0, [pc, #508]	; (8007954 <_printf_float+0x2e8>)
 8007758:	4b7f      	ldr	r3, [pc, #508]	; (8007958 <_printf_float+0x2ec>)
 800775a:	e7d1      	b.n	8007700 <_printf_float+0x94>
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007762:	9206      	str	r2, [sp, #24]
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	d13f      	bne.n	80077e8 <_printf_float+0x17c>
 8007768:	2306      	movs	r3, #6
 800776a:	6063      	str	r3, [r4, #4]
 800776c:	9b05      	ldr	r3, [sp, #20]
 800776e:	6861      	ldr	r1, [r4, #4]
 8007770:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007774:	2300      	movs	r3, #0
 8007776:	9303      	str	r3, [sp, #12]
 8007778:	ab0a      	add	r3, sp, #40	; 0x28
 800777a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800777e:	ab09      	add	r3, sp, #36	; 0x24
 8007780:	ec49 8b10 	vmov	d0, r8, r9
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	6022      	str	r2, [r4, #0]
 8007788:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800778c:	4628      	mov	r0, r5
 800778e:	f7ff fecd 	bl	800752c <__cvt>
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007796:	2b47      	cmp	r3, #71	; 0x47
 8007798:	4680      	mov	r8, r0
 800779a:	d108      	bne.n	80077ae <_printf_float+0x142>
 800779c:	1cc8      	adds	r0, r1, #3
 800779e:	db02      	blt.n	80077a6 <_printf_float+0x13a>
 80077a0:	6863      	ldr	r3, [r4, #4]
 80077a2:	4299      	cmp	r1, r3
 80077a4:	dd41      	ble.n	800782a <_printf_float+0x1be>
 80077a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80077aa:	fa5f fb8b 	uxtb.w	fp, fp
 80077ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077b2:	d820      	bhi.n	80077f6 <_printf_float+0x18a>
 80077b4:	3901      	subs	r1, #1
 80077b6:	465a      	mov	r2, fp
 80077b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077bc:	9109      	str	r1, [sp, #36]	; 0x24
 80077be:	f7ff ff17 	bl	80075f0 <__exponent>
 80077c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077c4:	1813      	adds	r3, r2, r0
 80077c6:	2a01      	cmp	r2, #1
 80077c8:	4681      	mov	r9, r0
 80077ca:	6123      	str	r3, [r4, #16]
 80077cc:	dc02      	bgt.n	80077d4 <_printf_float+0x168>
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	07d2      	lsls	r2, r2, #31
 80077d2:	d501      	bpl.n	80077d8 <_printf_float+0x16c>
 80077d4:	3301      	adds	r3, #1
 80077d6:	6123      	str	r3, [r4, #16]
 80077d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d09c      	beq.n	800771a <_printf_float+0xae>
 80077e0:	232d      	movs	r3, #45	; 0x2d
 80077e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e6:	e798      	b.n	800771a <_printf_float+0xae>
 80077e8:	9a06      	ldr	r2, [sp, #24]
 80077ea:	2a47      	cmp	r2, #71	; 0x47
 80077ec:	d1be      	bne.n	800776c <_printf_float+0x100>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1bc      	bne.n	800776c <_printf_float+0x100>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e7b9      	b.n	800776a <_printf_float+0xfe>
 80077f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077fa:	d118      	bne.n	800782e <_printf_float+0x1c2>
 80077fc:	2900      	cmp	r1, #0
 80077fe:	6863      	ldr	r3, [r4, #4]
 8007800:	dd0b      	ble.n	800781a <_printf_float+0x1ae>
 8007802:	6121      	str	r1, [r4, #16]
 8007804:	b913      	cbnz	r3, 800780c <_printf_float+0x1a0>
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	07d0      	lsls	r0, r2, #31
 800780a:	d502      	bpl.n	8007812 <_printf_float+0x1a6>
 800780c:	3301      	adds	r3, #1
 800780e:	440b      	add	r3, r1
 8007810:	6123      	str	r3, [r4, #16]
 8007812:	65a1      	str	r1, [r4, #88]	; 0x58
 8007814:	f04f 0900 	mov.w	r9, #0
 8007818:	e7de      	b.n	80077d8 <_printf_float+0x16c>
 800781a:	b913      	cbnz	r3, 8007822 <_printf_float+0x1b6>
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	07d2      	lsls	r2, r2, #31
 8007820:	d501      	bpl.n	8007826 <_printf_float+0x1ba>
 8007822:	3302      	adds	r3, #2
 8007824:	e7f4      	b.n	8007810 <_printf_float+0x1a4>
 8007826:	2301      	movs	r3, #1
 8007828:	e7f2      	b.n	8007810 <_printf_float+0x1a4>
 800782a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800782e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007830:	4299      	cmp	r1, r3
 8007832:	db05      	blt.n	8007840 <_printf_float+0x1d4>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	6121      	str	r1, [r4, #16]
 8007838:	07d8      	lsls	r0, r3, #31
 800783a:	d5ea      	bpl.n	8007812 <_printf_float+0x1a6>
 800783c:	1c4b      	adds	r3, r1, #1
 800783e:	e7e7      	b.n	8007810 <_printf_float+0x1a4>
 8007840:	2900      	cmp	r1, #0
 8007842:	bfd4      	ite	le
 8007844:	f1c1 0202 	rsble	r2, r1, #2
 8007848:	2201      	movgt	r2, #1
 800784a:	4413      	add	r3, r2
 800784c:	e7e0      	b.n	8007810 <_printf_float+0x1a4>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	055a      	lsls	r2, r3, #21
 8007852:	d407      	bmi.n	8007864 <_printf_float+0x1f8>
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	4642      	mov	r2, r8
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	47b8      	blx	r7
 800785e:	3001      	adds	r0, #1
 8007860:	d12c      	bne.n	80078bc <_printf_float+0x250>
 8007862:	e764      	b.n	800772e <_printf_float+0xc2>
 8007864:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007868:	f240 80e0 	bls.w	8007a2c <_printf_float+0x3c0>
 800786c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007870:	2200      	movs	r2, #0
 8007872:	2300      	movs	r3, #0
 8007874:	f7f9 f930 	bl	8000ad8 <__aeabi_dcmpeq>
 8007878:	2800      	cmp	r0, #0
 800787a:	d034      	beq.n	80078e6 <_printf_float+0x27a>
 800787c:	4a37      	ldr	r2, [pc, #220]	; (800795c <_printf_float+0x2f0>)
 800787e:	2301      	movs	r3, #1
 8007880:	4631      	mov	r1, r6
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	f43f af51 	beq.w	800772e <_printf_float+0xc2>
 800788c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007890:	429a      	cmp	r2, r3
 8007892:	db02      	blt.n	800789a <_printf_float+0x22e>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	07d8      	lsls	r0, r3, #31
 8007898:	d510      	bpl.n	80078bc <_printf_float+0x250>
 800789a:	ee18 3a10 	vmov	r3, s16
 800789e:	4652      	mov	r2, sl
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	f43f af41 	beq.w	800772e <_printf_float+0xc2>
 80078ac:	f04f 0800 	mov.w	r8, #0
 80078b0:	f104 091a 	add.w	r9, r4, #26
 80078b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b6:	3b01      	subs	r3, #1
 80078b8:	4543      	cmp	r3, r8
 80078ba:	dc09      	bgt.n	80078d0 <_printf_float+0x264>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	079b      	lsls	r3, r3, #30
 80078c0:	f100 8105 	bmi.w	8007ace <_printf_float+0x462>
 80078c4:	68e0      	ldr	r0, [r4, #12]
 80078c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c8:	4298      	cmp	r0, r3
 80078ca:	bfb8      	it	lt
 80078cc:	4618      	movlt	r0, r3
 80078ce:	e730      	b.n	8007732 <_printf_float+0xc6>
 80078d0:	2301      	movs	r3, #1
 80078d2:	464a      	mov	r2, r9
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	f43f af27 	beq.w	800772e <_printf_float+0xc2>
 80078e0:	f108 0801 	add.w	r8, r8, #1
 80078e4:	e7e6      	b.n	80078b4 <_printf_float+0x248>
 80078e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	dc39      	bgt.n	8007960 <_printf_float+0x2f4>
 80078ec:	4a1b      	ldr	r2, [pc, #108]	; (800795c <_printf_float+0x2f0>)
 80078ee:	2301      	movs	r3, #1
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f af19 	beq.w	800772e <_printf_float+0xc2>
 80078fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007900:	4313      	orrs	r3, r2
 8007902:	d102      	bne.n	800790a <_printf_float+0x29e>
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	07d9      	lsls	r1, r3, #31
 8007908:	d5d8      	bpl.n	80078bc <_printf_float+0x250>
 800790a:	ee18 3a10 	vmov	r3, s16
 800790e:	4652      	mov	r2, sl
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	f43f af09 	beq.w	800772e <_printf_float+0xc2>
 800791c:	f04f 0900 	mov.w	r9, #0
 8007920:	f104 0a1a 	add.w	sl, r4, #26
 8007924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007926:	425b      	negs	r3, r3
 8007928:	454b      	cmp	r3, r9
 800792a:	dc01      	bgt.n	8007930 <_printf_float+0x2c4>
 800792c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792e:	e792      	b.n	8007856 <_printf_float+0x1ea>
 8007930:	2301      	movs	r3, #1
 8007932:	4652      	mov	r2, sl
 8007934:	4631      	mov	r1, r6
 8007936:	4628      	mov	r0, r5
 8007938:	47b8      	blx	r7
 800793a:	3001      	adds	r0, #1
 800793c:	f43f aef7 	beq.w	800772e <_printf_float+0xc2>
 8007940:	f109 0901 	add.w	r9, r9, #1
 8007944:	e7ee      	b.n	8007924 <_printf_float+0x2b8>
 8007946:	bf00      	nop
 8007948:	7fefffff 	.word	0x7fefffff
 800794c:	08009fe0 	.word	0x08009fe0
 8007950:	08009fe4 	.word	0x08009fe4
 8007954:	08009fec 	.word	0x08009fec
 8007958:	08009fe8 	.word	0x08009fe8
 800795c:	08009ff0 	.word	0x08009ff0
 8007960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007964:	429a      	cmp	r2, r3
 8007966:	bfa8      	it	ge
 8007968:	461a      	movge	r2, r3
 800796a:	2a00      	cmp	r2, #0
 800796c:	4691      	mov	r9, r2
 800796e:	dc37      	bgt.n	80079e0 <_printf_float+0x374>
 8007970:	f04f 0b00 	mov.w	fp, #0
 8007974:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007978:	f104 021a 	add.w	r2, r4, #26
 800797c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800797e:	9305      	str	r3, [sp, #20]
 8007980:	eba3 0309 	sub.w	r3, r3, r9
 8007984:	455b      	cmp	r3, fp
 8007986:	dc33      	bgt.n	80079f0 <_printf_float+0x384>
 8007988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800798c:	429a      	cmp	r2, r3
 800798e:	db3b      	blt.n	8007a08 <_printf_float+0x39c>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	07da      	lsls	r2, r3, #31
 8007994:	d438      	bmi.n	8007a08 <_printf_float+0x39c>
 8007996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007998:	9a05      	ldr	r2, [sp, #20]
 800799a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800799c:	1a9a      	subs	r2, r3, r2
 800799e:	eba3 0901 	sub.w	r9, r3, r1
 80079a2:	4591      	cmp	r9, r2
 80079a4:	bfa8      	it	ge
 80079a6:	4691      	movge	r9, r2
 80079a8:	f1b9 0f00 	cmp.w	r9, #0
 80079ac:	dc35      	bgt.n	8007a1a <_printf_float+0x3ae>
 80079ae:	f04f 0800 	mov.w	r8, #0
 80079b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079b6:	f104 0a1a 	add.w	sl, r4, #26
 80079ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	eba3 0309 	sub.w	r3, r3, r9
 80079c4:	4543      	cmp	r3, r8
 80079c6:	f77f af79 	ble.w	80078bc <_printf_float+0x250>
 80079ca:	2301      	movs	r3, #1
 80079cc:	4652      	mov	r2, sl
 80079ce:	4631      	mov	r1, r6
 80079d0:	4628      	mov	r0, r5
 80079d2:	47b8      	blx	r7
 80079d4:	3001      	adds	r0, #1
 80079d6:	f43f aeaa 	beq.w	800772e <_printf_float+0xc2>
 80079da:	f108 0801 	add.w	r8, r8, #1
 80079de:	e7ec      	b.n	80079ba <_printf_float+0x34e>
 80079e0:	4613      	mov	r3, r2
 80079e2:	4631      	mov	r1, r6
 80079e4:	4642      	mov	r2, r8
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b8      	blx	r7
 80079ea:	3001      	adds	r0, #1
 80079ec:	d1c0      	bne.n	8007970 <_printf_float+0x304>
 80079ee:	e69e      	b.n	800772e <_printf_float+0xc2>
 80079f0:	2301      	movs	r3, #1
 80079f2:	4631      	mov	r1, r6
 80079f4:	4628      	mov	r0, r5
 80079f6:	9205      	str	r2, [sp, #20]
 80079f8:	47b8      	blx	r7
 80079fa:	3001      	adds	r0, #1
 80079fc:	f43f ae97 	beq.w	800772e <_printf_float+0xc2>
 8007a00:	9a05      	ldr	r2, [sp, #20]
 8007a02:	f10b 0b01 	add.w	fp, fp, #1
 8007a06:	e7b9      	b.n	800797c <_printf_float+0x310>
 8007a08:	ee18 3a10 	vmov	r3, s16
 8007a0c:	4652      	mov	r2, sl
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b8      	blx	r7
 8007a14:	3001      	adds	r0, #1
 8007a16:	d1be      	bne.n	8007996 <_printf_float+0x32a>
 8007a18:	e689      	b.n	800772e <_printf_float+0xc2>
 8007a1a:	9a05      	ldr	r2, [sp, #20]
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	4442      	add	r2, r8
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	d1c1      	bne.n	80079ae <_printf_float+0x342>
 8007a2a:	e680      	b.n	800772e <_printf_float+0xc2>
 8007a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a2e:	2a01      	cmp	r2, #1
 8007a30:	dc01      	bgt.n	8007a36 <_printf_float+0x3ca>
 8007a32:	07db      	lsls	r3, r3, #31
 8007a34:	d538      	bpl.n	8007aa8 <_printf_float+0x43c>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4642      	mov	r2, r8
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	f43f ae74 	beq.w	800772e <_printf_float+0xc2>
 8007a46:	ee18 3a10 	vmov	r3, s16
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4628      	mov	r0, r5
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	f43f ae6b 	beq.w	800772e <_printf_float+0xc2>
 8007a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f7f9 f83a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a64:	b9d8      	cbnz	r0, 8007a9e <_printf_float+0x432>
 8007a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a68:	f108 0201 	add.w	r2, r8, #1
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b8      	blx	r7
 8007a74:	3001      	adds	r0, #1
 8007a76:	d10e      	bne.n	8007a96 <_printf_float+0x42a>
 8007a78:	e659      	b.n	800772e <_printf_float+0xc2>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	4631      	mov	r1, r6
 8007a80:	4628      	mov	r0, r5
 8007a82:	47b8      	blx	r7
 8007a84:	3001      	adds	r0, #1
 8007a86:	f43f ae52 	beq.w	800772e <_printf_float+0xc2>
 8007a8a:	f108 0801 	add.w	r8, r8, #1
 8007a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a90:	3b01      	subs	r3, #1
 8007a92:	4543      	cmp	r3, r8
 8007a94:	dcf1      	bgt.n	8007a7a <_printf_float+0x40e>
 8007a96:	464b      	mov	r3, r9
 8007a98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a9c:	e6dc      	b.n	8007858 <_printf_float+0x1ec>
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	f104 0a1a 	add.w	sl, r4, #26
 8007aa6:	e7f2      	b.n	8007a8e <_printf_float+0x422>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4642      	mov	r2, r8
 8007aac:	e7df      	b.n	8007a6e <_printf_float+0x402>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	464a      	mov	r2, r9
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	47b8      	blx	r7
 8007ab8:	3001      	adds	r0, #1
 8007aba:	f43f ae38 	beq.w	800772e <_printf_float+0xc2>
 8007abe:	f108 0801 	add.w	r8, r8, #1
 8007ac2:	68e3      	ldr	r3, [r4, #12]
 8007ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ac6:	1a5b      	subs	r3, r3, r1
 8007ac8:	4543      	cmp	r3, r8
 8007aca:	dcf0      	bgt.n	8007aae <_printf_float+0x442>
 8007acc:	e6fa      	b.n	80078c4 <_printf_float+0x258>
 8007ace:	f04f 0800 	mov.w	r8, #0
 8007ad2:	f104 0919 	add.w	r9, r4, #25
 8007ad6:	e7f4      	b.n	8007ac2 <_printf_float+0x456>

08007ad8 <_printf_common>:
 8007ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007adc:	4616      	mov	r6, r2
 8007ade:	4699      	mov	r9, r3
 8007ae0:	688a      	ldr	r2, [r1, #8]
 8007ae2:	690b      	ldr	r3, [r1, #16]
 8007ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	bfb8      	it	lt
 8007aec:	4613      	movlt	r3, r2
 8007aee:	6033      	str	r3, [r6, #0]
 8007af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007af4:	4607      	mov	r7, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	b10a      	cbz	r2, 8007afe <_printf_common+0x26>
 8007afa:	3301      	adds	r3, #1
 8007afc:	6033      	str	r3, [r6, #0]
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	0699      	lsls	r1, r3, #26
 8007b02:	bf42      	ittt	mi
 8007b04:	6833      	ldrmi	r3, [r6, #0]
 8007b06:	3302      	addmi	r3, #2
 8007b08:	6033      	strmi	r3, [r6, #0]
 8007b0a:	6825      	ldr	r5, [r4, #0]
 8007b0c:	f015 0506 	ands.w	r5, r5, #6
 8007b10:	d106      	bne.n	8007b20 <_printf_common+0x48>
 8007b12:	f104 0a19 	add.w	sl, r4, #25
 8007b16:	68e3      	ldr	r3, [r4, #12]
 8007b18:	6832      	ldr	r2, [r6, #0]
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	42ab      	cmp	r3, r5
 8007b1e:	dc26      	bgt.n	8007b6e <_printf_common+0x96>
 8007b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b24:	1e13      	subs	r3, r2, #0
 8007b26:	6822      	ldr	r2, [r4, #0]
 8007b28:	bf18      	it	ne
 8007b2a:	2301      	movne	r3, #1
 8007b2c:	0692      	lsls	r2, r2, #26
 8007b2e:	d42b      	bmi.n	8007b88 <_printf_common+0xb0>
 8007b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b34:	4649      	mov	r1, r9
 8007b36:	4638      	mov	r0, r7
 8007b38:	47c0      	blx	r8
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	d01e      	beq.n	8007b7c <_printf_common+0xa4>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	68e5      	ldr	r5, [r4, #12]
 8007b42:	6832      	ldr	r2, [r6, #0]
 8007b44:	f003 0306 	and.w	r3, r3, #6
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	bf08      	it	eq
 8007b4c:	1aad      	subeq	r5, r5, r2
 8007b4e:	68a3      	ldr	r3, [r4, #8]
 8007b50:	6922      	ldr	r2, [r4, #16]
 8007b52:	bf0c      	ite	eq
 8007b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b58:	2500      	movne	r5, #0
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	bfc4      	itt	gt
 8007b5e:	1a9b      	subgt	r3, r3, r2
 8007b60:	18ed      	addgt	r5, r5, r3
 8007b62:	2600      	movs	r6, #0
 8007b64:	341a      	adds	r4, #26
 8007b66:	42b5      	cmp	r5, r6
 8007b68:	d11a      	bne.n	8007ba0 <_printf_common+0xc8>
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	e008      	b.n	8007b80 <_printf_common+0xa8>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4652      	mov	r2, sl
 8007b72:	4649      	mov	r1, r9
 8007b74:	4638      	mov	r0, r7
 8007b76:	47c0      	blx	r8
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d103      	bne.n	8007b84 <_printf_common+0xac>
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b84:	3501      	adds	r5, #1
 8007b86:	e7c6      	b.n	8007b16 <_printf_common+0x3e>
 8007b88:	18e1      	adds	r1, r4, r3
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	2030      	movs	r0, #48	; 0x30
 8007b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b92:	4422      	add	r2, r4
 8007b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b9c:	3302      	adds	r3, #2
 8007b9e:	e7c7      	b.n	8007b30 <_printf_common+0x58>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	47c0      	blx	r8
 8007baa:	3001      	adds	r0, #1
 8007bac:	d0e6      	beq.n	8007b7c <_printf_common+0xa4>
 8007bae:	3601      	adds	r6, #1
 8007bb0:	e7d9      	b.n	8007b66 <_printf_common+0x8e>
	...

08007bb4 <_printf_i>:
 8007bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	7e0f      	ldrb	r7, [r1, #24]
 8007bba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bbc:	2f78      	cmp	r7, #120	; 0x78
 8007bbe:	4691      	mov	r9, r2
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	469a      	mov	sl, r3
 8007bc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bca:	d807      	bhi.n	8007bdc <_printf_i+0x28>
 8007bcc:	2f62      	cmp	r7, #98	; 0x62
 8007bce:	d80a      	bhi.n	8007be6 <_printf_i+0x32>
 8007bd0:	2f00      	cmp	r7, #0
 8007bd2:	f000 80d8 	beq.w	8007d86 <_printf_i+0x1d2>
 8007bd6:	2f58      	cmp	r7, #88	; 0x58
 8007bd8:	f000 80a3 	beq.w	8007d22 <_printf_i+0x16e>
 8007bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007be4:	e03a      	b.n	8007c5c <_printf_i+0xa8>
 8007be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bea:	2b15      	cmp	r3, #21
 8007bec:	d8f6      	bhi.n	8007bdc <_printf_i+0x28>
 8007bee:	a101      	add	r1, pc, #4	; (adr r1, 8007bf4 <_printf_i+0x40>)
 8007bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c61 	.word	0x08007c61
 8007bfc:	08007bdd 	.word	0x08007bdd
 8007c00:	08007bdd 	.word	0x08007bdd
 8007c04:	08007bdd 	.word	0x08007bdd
 8007c08:	08007bdd 	.word	0x08007bdd
 8007c0c:	08007c61 	.word	0x08007c61
 8007c10:	08007bdd 	.word	0x08007bdd
 8007c14:	08007bdd 	.word	0x08007bdd
 8007c18:	08007bdd 	.word	0x08007bdd
 8007c1c:	08007bdd 	.word	0x08007bdd
 8007c20:	08007d6d 	.word	0x08007d6d
 8007c24:	08007c91 	.word	0x08007c91
 8007c28:	08007d4f 	.word	0x08007d4f
 8007c2c:	08007bdd 	.word	0x08007bdd
 8007c30:	08007bdd 	.word	0x08007bdd
 8007c34:	08007d8f 	.word	0x08007d8f
 8007c38:	08007bdd 	.word	0x08007bdd
 8007c3c:	08007c91 	.word	0x08007c91
 8007c40:	08007bdd 	.word	0x08007bdd
 8007c44:	08007bdd 	.word	0x08007bdd
 8007c48:	08007d57 	.word	0x08007d57
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	1d1a      	adds	r2, r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	602a      	str	r2, [r5, #0]
 8007c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e0a3      	b.n	8007da8 <_printf_i+0x1f4>
 8007c60:	6820      	ldr	r0, [r4, #0]
 8007c62:	6829      	ldr	r1, [r5, #0]
 8007c64:	0606      	lsls	r6, r0, #24
 8007c66:	f101 0304 	add.w	r3, r1, #4
 8007c6a:	d50a      	bpl.n	8007c82 <_printf_i+0xce>
 8007c6c:	680e      	ldr	r6, [r1, #0]
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	da03      	bge.n	8007c7c <_printf_i+0xc8>
 8007c74:	232d      	movs	r3, #45	; 0x2d
 8007c76:	4276      	negs	r6, r6
 8007c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c7c:	485e      	ldr	r0, [pc, #376]	; (8007df8 <_printf_i+0x244>)
 8007c7e:	230a      	movs	r3, #10
 8007c80:	e019      	b.n	8007cb6 <_printf_i+0x102>
 8007c82:	680e      	ldr	r6, [r1, #0]
 8007c84:	602b      	str	r3, [r5, #0]
 8007c86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c8a:	bf18      	it	ne
 8007c8c:	b236      	sxthne	r6, r6
 8007c8e:	e7ef      	b.n	8007c70 <_printf_i+0xbc>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	6820      	ldr	r0, [r4, #0]
 8007c94:	1d19      	adds	r1, r3, #4
 8007c96:	6029      	str	r1, [r5, #0]
 8007c98:	0601      	lsls	r1, r0, #24
 8007c9a:	d501      	bpl.n	8007ca0 <_printf_i+0xec>
 8007c9c:	681e      	ldr	r6, [r3, #0]
 8007c9e:	e002      	b.n	8007ca6 <_printf_i+0xf2>
 8007ca0:	0646      	lsls	r6, r0, #25
 8007ca2:	d5fb      	bpl.n	8007c9c <_printf_i+0xe8>
 8007ca4:	881e      	ldrh	r6, [r3, #0]
 8007ca6:	4854      	ldr	r0, [pc, #336]	; (8007df8 <_printf_i+0x244>)
 8007ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8007caa:	bf0c      	ite	eq
 8007cac:	2308      	moveq	r3, #8
 8007cae:	230a      	movne	r3, #10
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cb6:	6865      	ldr	r5, [r4, #4]
 8007cb8:	60a5      	str	r5, [r4, #8]
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	bfa2      	ittt	ge
 8007cbe:	6821      	ldrge	r1, [r4, #0]
 8007cc0:	f021 0104 	bicge.w	r1, r1, #4
 8007cc4:	6021      	strge	r1, [r4, #0]
 8007cc6:	b90e      	cbnz	r6, 8007ccc <_printf_i+0x118>
 8007cc8:	2d00      	cmp	r5, #0
 8007cca:	d04d      	beq.n	8007d68 <_printf_i+0x1b4>
 8007ccc:	4615      	mov	r5, r2
 8007cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8007cd6:	5dc7      	ldrb	r7, [r0, r7]
 8007cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cdc:	4637      	mov	r7, r6
 8007cde:	42bb      	cmp	r3, r7
 8007ce0:	460e      	mov	r6, r1
 8007ce2:	d9f4      	bls.n	8007cce <_printf_i+0x11a>
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d10b      	bne.n	8007d00 <_printf_i+0x14c>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	07de      	lsls	r6, r3, #31
 8007cec:	d508      	bpl.n	8007d00 <_printf_i+0x14c>
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	6861      	ldr	r1, [r4, #4]
 8007cf2:	4299      	cmp	r1, r3
 8007cf4:	bfde      	ittt	le
 8007cf6:	2330      	movle	r3, #48	; 0x30
 8007cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d00:	1b52      	subs	r2, r2, r5
 8007d02:	6122      	str	r2, [r4, #16]
 8007d04:	f8cd a000 	str.w	sl, [sp]
 8007d08:	464b      	mov	r3, r9
 8007d0a:	aa03      	add	r2, sp, #12
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	4640      	mov	r0, r8
 8007d10:	f7ff fee2 	bl	8007ad8 <_printf_common>
 8007d14:	3001      	adds	r0, #1
 8007d16:	d14c      	bne.n	8007db2 <_printf_i+0x1fe>
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	b004      	add	sp, #16
 8007d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d22:	4835      	ldr	r0, [pc, #212]	; (8007df8 <_printf_i+0x244>)
 8007d24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d28:	6829      	ldr	r1, [r5, #0]
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d30:	6029      	str	r1, [r5, #0]
 8007d32:	061d      	lsls	r5, r3, #24
 8007d34:	d514      	bpl.n	8007d60 <_printf_i+0x1ac>
 8007d36:	07df      	lsls	r7, r3, #31
 8007d38:	bf44      	itt	mi
 8007d3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d3e:	6023      	strmi	r3, [r4, #0]
 8007d40:	b91e      	cbnz	r6, 8007d4a <_printf_i+0x196>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f023 0320 	bic.w	r3, r3, #32
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	2310      	movs	r3, #16
 8007d4c:	e7b0      	b.n	8007cb0 <_printf_i+0xfc>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f043 0320 	orr.w	r3, r3, #32
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	2378      	movs	r3, #120	; 0x78
 8007d58:	4828      	ldr	r0, [pc, #160]	; (8007dfc <_printf_i+0x248>)
 8007d5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d5e:	e7e3      	b.n	8007d28 <_printf_i+0x174>
 8007d60:	0659      	lsls	r1, r3, #25
 8007d62:	bf48      	it	mi
 8007d64:	b2b6      	uxthmi	r6, r6
 8007d66:	e7e6      	b.n	8007d36 <_printf_i+0x182>
 8007d68:	4615      	mov	r5, r2
 8007d6a:	e7bb      	b.n	8007ce4 <_printf_i+0x130>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	6826      	ldr	r6, [r4, #0]
 8007d70:	6961      	ldr	r1, [r4, #20]
 8007d72:	1d18      	adds	r0, r3, #4
 8007d74:	6028      	str	r0, [r5, #0]
 8007d76:	0635      	lsls	r5, r6, #24
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	d501      	bpl.n	8007d80 <_printf_i+0x1cc>
 8007d7c:	6019      	str	r1, [r3, #0]
 8007d7e:	e002      	b.n	8007d86 <_printf_i+0x1d2>
 8007d80:	0670      	lsls	r0, r6, #25
 8007d82:	d5fb      	bpl.n	8007d7c <_printf_i+0x1c8>
 8007d84:	8019      	strh	r1, [r3, #0]
 8007d86:	2300      	movs	r3, #0
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	4615      	mov	r5, r2
 8007d8c:	e7ba      	b.n	8007d04 <_printf_i+0x150>
 8007d8e:	682b      	ldr	r3, [r5, #0]
 8007d90:	1d1a      	adds	r2, r3, #4
 8007d92:	602a      	str	r2, [r5, #0]
 8007d94:	681d      	ldr	r5, [r3, #0]
 8007d96:	6862      	ldr	r2, [r4, #4]
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7f8 fa28 	bl	80001f0 <memchr>
 8007da0:	b108      	cbz	r0, 8007da6 <_printf_i+0x1f2>
 8007da2:	1b40      	subs	r0, r0, r5
 8007da4:	6060      	str	r0, [r4, #4]
 8007da6:	6863      	ldr	r3, [r4, #4]
 8007da8:	6123      	str	r3, [r4, #16]
 8007daa:	2300      	movs	r3, #0
 8007dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007db0:	e7a8      	b.n	8007d04 <_printf_i+0x150>
 8007db2:	6923      	ldr	r3, [r4, #16]
 8007db4:	462a      	mov	r2, r5
 8007db6:	4649      	mov	r1, r9
 8007db8:	4640      	mov	r0, r8
 8007dba:	47d0      	blx	sl
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d0ab      	beq.n	8007d18 <_printf_i+0x164>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	079b      	lsls	r3, r3, #30
 8007dc4:	d413      	bmi.n	8007dee <_printf_i+0x23a>
 8007dc6:	68e0      	ldr	r0, [r4, #12]
 8007dc8:	9b03      	ldr	r3, [sp, #12]
 8007dca:	4298      	cmp	r0, r3
 8007dcc:	bfb8      	it	lt
 8007dce:	4618      	movlt	r0, r3
 8007dd0:	e7a4      	b.n	8007d1c <_printf_i+0x168>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4632      	mov	r2, r6
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	4640      	mov	r0, r8
 8007dda:	47d0      	blx	sl
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d09b      	beq.n	8007d18 <_printf_i+0x164>
 8007de0:	3501      	adds	r5, #1
 8007de2:	68e3      	ldr	r3, [r4, #12]
 8007de4:	9903      	ldr	r1, [sp, #12]
 8007de6:	1a5b      	subs	r3, r3, r1
 8007de8:	42ab      	cmp	r3, r5
 8007dea:	dcf2      	bgt.n	8007dd2 <_printf_i+0x21e>
 8007dec:	e7eb      	b.n	8007dc6 <_printf_i+0x212>
 8007dee:	2500      	movs	r5, #0
 8007df0:	f104 0619 	add.w	r6, r4, #25
 8007df4:	e7f5      	b.n	8007de2 <_printf_i+0x22e>
 8007df6:	bf00      	nop
 8007df8:	08009ff2 	.word	0x08009ff2
 8007dfc:	0800a003 	.word	0x0800a003

08007e00 <iprintf>:
 8007e00:	b40f      	push	{r0, r1, r2, r3}
 8007e02:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <iprintf+0x2c>)
 8007e04:	b513      	push	{r0, r1, r4, lr}
 8007e06:	681c      	ldr	r4, [r3, #0]
 8007e08:	b124      	cbz	r4, 8007e14 <iprintf+0x14>
 8007e0a:	69a3      	ldr	r3, [r4, #24]
 8007e0c:	b913      	cbnz	r3, 8007e14 <iprintf+0x14>
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f7ff fa1c 	bl	800724c <__sinit>
 8007e14:	ab05      	add	r3, sp, #20
 8007e16:	9a04      	ldr	r2, [sp, #16]
 8007e18:	68a1      	ldr	r1, [r4, #8]
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f001 fdfb 	bl	8009a18 <_vfiprintf_r>
 8007e22:	b002      	add	sp, #8
 8007e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e28:	b004      	add	sp, #16
 8007e2a:	4770      	bx	lr
 8007e2c:	20000010 	.word	0x20000010

08007e30 <_puts_r>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	460e      	mov	r6, r1
 8007e34:	4605      	mov	r5, r0
 8007e36:	b118      	cbz	r0, 8007e40 <_puts_r+0x10>
 8007e38:	6983      	ldr	r3, [r0, #24]
 8007e3a:	b90b      	cbnz	r3, 8007e40 <_puts_r+0x10>
 8007e3c:	f7ff fa06 	bl	800724c <__sinit>
 8007e40:	69ab      	ldr	r3, [r5, #24]
 8007e42:	68ac      	ldr	r4, [r5, #8]
 8007e44:	b913      	cbnz	r3, 8007e4c <_puts_r+0x1c>
 8007e46:	4628      	mov	r0, r5
 8007e48:	f7ff fa00 	bl	800724c <__sinit>
 8007e4c:	4b2c      	ldr	r3, [pc, #176]	; (8007f00 <_puts_r+0xd0>)
 8007e4e:	429c      	cmp	r4, r3
 8007e50:	d120      	bne.n	8007e94 <_puts_r+0x64>
 8007e52:	686c      	ldr	r4, [r5, #4]
 8007e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e56:	07db      	lsls	r3, r3, #31
 8007e58:	d405      	bmi.n	8007e66 <_puts_r+0x36>
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	0598      	lsls	r0, r3, #22
 8007e5e:	d402      	bmi.n	8007e66 <_puts_r+0x36>
 8007e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e62:	f7ff fab6 	bl	80073d2 <__retarget_lock_acquire_recursive>
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	0719      	lsls	r1, r3, #28
 8007e6a:	d51d      	bpl.n	8007ea8 <_puts_r+0x78>
 8007e6c:	6923      	ldr	r3, [r4, #16]
 8007e6e:	b1db      	cbz	r3, 8007ea8 <_puts_r+0x78>
 8007e70:	3e01      	subs	r6, #1
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	60a3      	str	r3, [r4, #8]
 8007e7c:	bb39      	cbnz	r1, 8007ece <_puts_r+0x9e>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	da38      	bge.n	8007ef4 <_puts_r+0xc4>
 8007e82:	4622      	mov	r2, r4
 8007e84:	210a      	movs	r1, #10
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 f906 	bl	8008098 <__swbuf_r>
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d011      	beq.n	8007eb4 <_puts_r+0x84>
 8007e90:	250a      	movs	r5, #10
 8007e92:	e011      	b.n	8007eb8 <_puts_r+0x88>
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <_puts_r+0xd4>)
 8007e96:	429c      	cmp	r4, r3
 8007e98:	d101      	bne.n	8007e9e <_puts_r+0x6e>
 8007e9a:	68ac      	ldr	r4, [r5, #8]
 8007e9c:	e7da      	b.n	8007e54 <_puts_r+0x24>
 8007e9e:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <_puts_r+0xd8>)
 8007ea0:	429c      	cmp	r4, r3
 8007ea2:	bf08      	it	eq
 8007ea4:	68ec      	ldreq	r4, [r5, #12]
 8007ea6:	e7d5      	b.n	8007e54 <_puts_r+0x24>
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f000 f958 	bl	8008160 <__swsetup_r>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d0dd      	beq.n	8007e70 <_puts_r+0x40>
 8007eb4:	f04f 35ff 	mov.w	r5, #4294967295
 8007eb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eba:	07da      	lsls	r2, r3, #31
 8007ebc:	d405      	bmi.n	8007eca <_puts_r+0x9a>
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	059b      	lsls	r3, r3, #22
 8007ec2:	d402      	bmi.n	8007eca <_puts_r+0x9a>
 8007ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ec6:	f7ff fa85 	bl	80073d4 <__retarget_lock_release_recursive>
 8007eca:	4628      	mov	r0, r5
 8007ecc:	bd70      	pop	{r4, r5, r6, pc}
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da04      	bge.n	8007edc <_puts_r+0xac>
 8007ed2:	69a2      	ldr	r2, [r4, #24]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	dc06      	bgt.n	8007ee6 <_puts_r+0xb6>
 8007ed8:	290a      	cmp	r1, #10
 8007eda:	d004      	beq.n	8007ee6 <_puts_r+0xb6>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	6022      	str	r2, [r4, #0]
 8007ee2:	7019      	strb	r1, [r3, #0]
 8007ee4:	e7c5      	b.n	8007e72 <_puts_r+0x42>
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 f8d5 	bl	8008098 <__swbuf_r>
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d1bf      	bne.n	8007e72 <_puts_r+0x42>
 8007ef2:	e7df      	b.n	8007eb4 <_puts_r+0x84>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	250a      	movs	r5, #10
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	6022      	str	r2, [r4, #0]
 8007efc:	701d      	strb	r5, [r3, #0]
 8007efe:	e7db      	b.n	8007eb8 <_puts_r+0x88>
 8007f00:	08009f9c 	.word	0x08009f9c
 8007f04:	08009fbc 	.word	0x08009fbc
 8007f08:	08009f7c 	.word	0x08009f7c

08007f0c <puts>:
 8007f0c:	4b02      	ldr	r3, [pc, #8]	; (8007f18 <puts+0xc>)
 8007f0e:	4601      	mov	r1, r0
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	f7ff bf8d 	b.w	8007e30 <_puts_r>
 8007f16:	bf00      	nop
 8007f18:	20000010 	.word	0x20000010

08007f1c <cleanup_glue>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	460c      	mov	r4, r1
 8007f20:	6809      	ldr	r1, [r1, #0]
 8007f22:	4605      	mov	r5, r0
 8007f24:	b109      	cbz	r1, 8007f2a <cleanup_glue+0xe>
 8007f26:	f7ff fff9 	bl	8007f1c <cleanup_glue>
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f32:	f001 bcfb 	b.w	800992c <_free_r>
	...

08007f38 <_reclaim_reent>:
 8007f38:	4b2c      	ldr	r3, [pc, #176]	; (8007fec <_reclaim_reent+0xb4>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4283      	cmp	r3, r0
 8007f3e:	b570      	push	{r4, r5, r6, lr}
 8007f40:	4604      	mov	r4, r0
 8007f42:	d051      	beq.n	8007fe8 <_reclaim_reent+0xb0>
 8007f44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f46:	b143      	cbz	r3, 8007f5a <_reclaim_reent+0x22>
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d14a      	bne.n	8007fe4 <_reclaim_reent+0xac>
 8007f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f50:	6819      	ldr	r1, [r3, #0]
 8007f52:	b111      	cbz	r1, 8007f5a <_reclaim_reent+0x22>
 8007f54:	4620      	mov	r0, r4
 8007f56:	f001 fce9 	bl	800992c <_free_r>
 8007f5a:	6961      	ldr	r1, [r4, #20]
 8007f5c:	b111      	cbz	r1, 8007f64 <_reclaim_reent+0x2c>
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f001 fce4 	bl	800992c <_free_r>
 8007f64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f66:	b111      	cbz	r1, 8007f6e <_reclaim_reent+0x36>
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f001 fcdf 	bl	800992c <_free_r>
 8007f6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007f70:	b111      	cbz	r1, 8007f78 <_reclaim_reent+0x40>
 8007f72:	4620      	mov	r0, r4
 8007f74:	f001 fcda 	bl	800992c <_free_r>
 8007f78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007f7a:	b111      	cbz	r1, 8007f82 <_reclaim_reent+0x4a>
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f001 fcd5 	bl	800992c <_free_r>
 8007f82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007f84:	b111      	cbz	r1, 8007f8c <_reclaim_reent+0x54>
 8007f86:	4620      	mov	r0, r4
 8007f88:	f001 fcd0 	bl	800992c <_free_r>
 8007f8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007f8e:	b111      	cbz	r1, 8007f96 <_reclaim_reent+0x5e>
 8007f90:	4620      	mov	r0, r4
 8007f92:	f001 fccb 	bl	800992c <_free_r>
 8007f96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007f98:	b111      	cbz	r1, 8007fa0 <_reclaim_reent+0x68>
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f001 fcc6 	bl	800992c <_free_r>
 8007fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fa2:	b111      	cbz	r1, 8007faa <_reclaim_reent+0x72>
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f001 fcc1 	bl	800992c <_free_r>
 8007faa:	69a3      	ldr	r3, [r4, #24]
 8007fac:	b1e3      	cbz	r3, 8007fe8 <_reclaim_reent+0xb0>
 8007fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	4798      	blx	r3
 8007fb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007fb6:	b1b9      	cbz	r1, 8007fe8 <_reclaim_reent+0xb0>
 8007fb8:	4620      	mov	r0, r4
 8007fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007fbe:	f7ff bfad 	b.w	8007f1c <cleanup_glue>
 8007fc2:	5949      	ldr	r1, [r1, r5]
 8007fc4:	b941      	cbnz	r1, 8007fd8 <_reclaim_reent+0xa0>
 8007fc6:	3504      	adds	r5, #4
 8007fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fca:	2d80      	cmp	r5, #128	; 0x80
 8007fcc:	68d9      	ldr	r1, [r3, #12]
 8007fce:	d1f8      	bne.n	8007fc2 <_reclaim_reent+0x8a>
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f001 fcab 	bl	800992c <_free_r>
 8007fd6:	e7ba      	b.n	8007f4e <_reclaim_reent+0x16>
 8007fd8:	680e      	ldr	r6, [r1, #0]
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f001 fca6 	bl	800992c <_free_r>
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	e7ef      	b.n	8007fc4 <_reclaim_reent+0x8c>
 8007fe4:	2500      	movs	r5, #0
 8007fe6:	e7ef      	b.n	8007fc8 <_reclaim_reent+0x90>
 8007fe8:	bd70      	pop	{r4, r5, r6, pc}
 8007fea:	bf00      	nop
 8007fec:	20000010 	.word	0x20000010

08007ff0 <_sbrk_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4d06      	ldr	r5, [pc, #24]	; (800800c <_sbrk_r+0x1c>)
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	f7f9 fddc 	bl	8001bb8 <_sbrk>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	d102      	bne.n	800800a <_sbrk_r+0x1a>
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	b103      	cbz	r3, 800800a <_sbrk_r+0x1a>
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	20015294 	.word	0x20015294

08008010 <__sread>:
 8008010:	b510      	push	{r4, lr}
 8008012:	460c      	mov	r4, r1
 8008014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008018:	f001 fe2e 	bl	8009c78 <_read_r>
 800801c:	2800      	cmp	r0, #0
 800801e:	bfab      	itete	ge
 8008020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008022:	89a3      	ldrhlt	r3, [r4, #12]
 8008024:	181b      	addge	r3, r3, r0
 8008026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800802a:	bfac      	ite	ge
 800802c:	6563      	strge	r3, [r4, #84]	; 0x54
 800802e:	81a3      	strhlt	r3, [r4, #12]
 8008030:	bd10      	pop	{r4, pc}

08008032 <__swrite>:
 8008032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008036:	461f      	mov	r7, r3
 8008038:	898b      	ldrh	r3, [r1, #12]
 800803a:	05db      	lsls	r3, r3, #23
 800803c:	4605      	mov	r5, r0
 800803e:	460c      	mov	r4, r1
 8008040:	4616      	mov	r6, r2
 8008042:	d505      	bpl.n	8008050 <__swrite+0x1e>
 8008044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008048:	2302      	movs	r3, #2
 800804a:	2200      	movs	r2, #0
 800804c:	f001 f848 	bl	80090e0 <_lseek_r>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	4632      	mov	r2, r6
 800805e:	463b      	mov	r3, r7
 8008060:	4628      	mov	r0, r5
 8008062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008066:	f000 b869 	b.w	800813c <_write_r>

0800806a <__sseek>:
 800806a:	b510      	push	{r4, lr}
 800806c:	460c      	mov	r4, r1
 800806e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008072:	f001 f835 	bl	80090e0 <_lseek_r>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	bf15      	itete	ne
 800807c:	6560      	strne	r0, [r4, #84]	; 0x54
 800807e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008086:	81a3      	strheq	r3, [r4, #12]
 8008088:	bf18      	it	ne
 800808a:	81a3      	strhne	r3, [r4, #12]
 800808c:	bd10      	pop	{r4, pc}

0800808e <__sclose>:
 800808e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008092:	f000 b8d3 	b.w	800823c <_close_r>
	...

08008098 <__swbuf_r>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	460e      	mov	r6, r1
 800809c:	4614      	mov	r4, r2
 800809e:	4605      	mov	r5, r0
 80080a0:	b118      	cbz	r0, 80080aa <__swbuf_r+0x12>
 80080a2:	6983      	ldr	r3, [r0, #24]
 80080a4:	b90b      	cbnz	r3, 80080aa <__swbuf_r+0x12>
 80080a6:	f7ff f8d1 	bl	800724c <__sinit>
 80080aa:	4b21      	ldr	r3, [pc, #132]	; (8008130 <__swbuf_r+0x98>)
 80080ac:	429c      	cmp	r4, r3
 80080ae:	d12b      	bne.n	8008108 <__swbuf_r+0x70>
 80080b0:	686c      	ldr	r4, [r5, #4]
 80080b2:	69a3      	ldr	r3, [r4, #24]
 80080b4:	60a3      	str	r3, [r4, #8]
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	071a      	lsls	r2, r3, #28
 80080ba:	d52f      	bpl.n	800811c <__swbuf_r+0x84>
 80080bc:	6923      	ldr	r3, [r4, #16]
 80080be:	b36b      	cbz	r3, 800811c <__swbuf_r+0x84>
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	6820      	ldr	r0, [r4, #0]
 80080c4:	1ac0      	subs	r0, r0, r3
 80080c6:	6963      	ldr	r3, [r4, #20]
 80080c8:	b2f6      	uxtb	r6, r6
 80080ca:	4283      	cmp	r3, r0
 80080cc:	4637      	mov	r7, r6
 80080ce:	dc04      	bgt.n	80080da <__swbuf_r+0x42>
 80080d0:	4621      	mov	r1, r4
 80080d2:	4628      	mov	r0, r5
 80080d4:	f000 ffc4 	bl	8009060 <_fflush_r>
 80080d8:	bb30      	cbnz	r0, 8008128 <__swbuf_r+0x90>
 80080da:	68a3      	ldr	r3, [r4, #8]
 80080dc:	3b01      	subs	r3, #1
 80080de:	60a3      	str	r3, [r4, #8]
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	6022      	str	r2, [r4, #0]
 80080e6:	701e      	strb	r6, [r3, #0]
 80080e8:	6963      	ldr	r3, [r4, #20]
 80080ea:	3001      	adds	r0, #1
 80080ec:	4283      	cmp	r3, r0
 80080ee:	d004      	beq.n	80080fa <__swbuf_r+0x62>
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	07db      	lsls	r3, r3, #31
 80080f4:	d506      	bpl.n	8008104 <__swbuf_r+0x6c>
 80080f6:	2e0a      	cmp	r6, #10
 80080f8:	d104      	bne.n	8008104 <__swbuf_r+0x6c>
 80080fa:	4621      	mov	r1, r4
 80080fc:	4628      	mov	r0, r5
 80080fe:	f000 ffaf 	bl	8009060 <_fflush_r>
 8008102:	b988      	cbnz	r0, 8008128 <__swbuf_r+0x90>
 8008104:	4638      	mov	r0, r7
 8008106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <__swbuf_r+0x9c>)
 800810a:	429c      	cmp	r4, r3
 800810c:	d101      	bne.n	8008112 <__swbuf_r+0x7a>
 800810e:	68ac      	ldr	r4, [r5, #8]
 8008110:	e7cf      	b.n	80080b2 <__swbuf_r+0x1a>
 8008112:	4b09      	ldr	r3, [pc, #36]	; (8008138 <__swbuf_r+0xa0>)
 8008114:	429c      	cmp	r4, r3
 8008116:	bf08      	it	eq
 8008118:	68ec      	ldreq	r4, [r5, #12]
 800811a:	e7ca      	b.n	80080b2 <__swbuf_r+0x1a>
 800811c:	4621      	mov	r1, r4
 800811e:	4628      	mov	r0, r5
 8008120:	f000 f81e 	bl	8008160 <__swsetup_r>
 8008124:	2800      	cmp	r0, #0
 8008126:	d0cb      	beq.n	80080c0 <__swbuf_r+0x28>
 8008128:	f04f 37ff 	mov.w	r7, #4294967295
 800812c:	e7ea      	b.n	8008104 <__swbuf_r+0x6c>
 800812e:	bf00      	nop
 8008130:	08009f9c 	.word	0x08009f9c
 8008134:	08009fbc 	.word	0x08009fbc
 8008138:	08009f7c 	.word	0x08009f7c

0800813c <_write_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d07      	ldr	r5, [pc, #28]	; (800815c <_write_r+0x20>)
 8008140:	4604      	mov	r4, r0
 8008142:	4608      	mov	r0, r1
 8008144:	4611      	mov	r1, r2
 8008146:	2200      	movs	r2, #0
 8008148:	602a      	str	r2, [r5, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	f7f8 feb6 	bl	8000ebc <_write>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_write_r+0x1e>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_write_r+0x1e>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	20015294 	.word	0x20015294

08008160 <__swsetup_r>:
 8008160:	4b32      	ldr	r3, [pc, #200]	; (800822c <__swsetup_r+0xcc>)
 8008162:	b570      	push	{r4, r5, r6, lr}
 8008164:	681d      	ldr	r5, [r3, #0]
 8008166:	4606      	mov	r6, r0
 8008168:	460c      	mov	r4, r1
 800816a:	b125      	cbz	r5, 8008176 <__swsetup_r+0x16>
 800816c:	69ab      	ldr	r3, [r5, #24]
 800816e:	b913      	cbnz	r3, 8008176 <__swsetup_r+0x16>
 8008170:	4628      	mov	r0, r5
 8008172:	f7ff f86b 	bl	800724c <__sinit>
 8008176:	4b2e      	ldr	r3, [pc, #184]	; (8008230 <__swsetup_r+0xd0>)
 8008178:	429c      	cmp	r4, r3
 800817a:	d10f      	bne.n	800819c <__swsetup_r+0x3c>
 800817c:	686c      	ldr	r4, [r5, #4]
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008184:	0719      	lsls	r1, r3, #28
 8008186:	d42c      	bmi.n	80081e2 <__swsetup_r+0x82>
 8008188:	06dd      	lsls	r5, r3, #27
 800818a:	d411      	bmi.n	80081b0 <__swsetup_r+0x50>
 800818c:	2309      	movs	r3, #9
 800818e:	6033      	str	r3, [r6, #0]
 8008190:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	f04f 30ff 	mov.w	r0, #4294967295
 800819a:	e03e      	b.n	800821a <__swsetup_r+0xba>
 800819c:	4b25      	ldr	r3, [pc, #148]	; (8008234 <__swsetup_r+0xd4>)
 800819e:	429c      	cmp	r4, r3
 80081a0:	d101      	bne.n	80081a6 <__swsetup_r+0x46>
 80081a2:	68ac      	ldr	r4, [r5, #8]
 80081a4:	e7eb      	b.n	800817e <__swsetup_r+0x1e>
 80081a6:	4b24      	ldr	r3, [pc, #144]	; (8008238 <__swsetup_r+0xd8>)
 80081a8:	429c      	cmp	r4, r3
 80081aa:	bf08      	it	eq
 80081ac:	68ec      	ldreq	r4, [r5, #12]
 80081ae:	e7e6      	b.n	800817e <__swsetup_r+0x1e>
 80081b0:	0758      	lsls	r0, r3, #29
 80081b2:	d512      	bpl.n	80081da <__swsetup_r+0x7a>
 80081b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081b6:	b141      	cbz	r1, 80081ca <__swsetup_r+0x6a>
 80081b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081bc:	4299      	cmp	r1, r3
 80081be:	d002      	beq.n	80081c6 <__swsetup_r+0x66>
 80081c0:	4630      	mov	r0, r6
 80081c2:	f001 fbb3 	bl	800992c <_free_r>
 80081c6:	2300      	movs	r3, #0
 80081c8:	6363      	str	r3, [r4, #52]	; 0x34
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081d0:	81a3      	strh	r3, [r4, #12]
 80081d2:	2300      	movs	r3, #0
 80081d4:	6063      	str	r3, [r4, #4]
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f043 0308 	orr.w	r3, r3, #8
 80081e0:	81a3      	strh	r3, [r4, #12]
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	b94b      	cbnz	r3, 80081fa <__swsetup_r+0x9a>
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081f0:	d003      	beq.n	80081fa <__swsetup_r+0x9a>
 80081f2:	4621      	mov	r1, r4
 80081f4:	4630      	mov	r0, r6
 80081f6:	f000 ffab 	bl	8009150 <__smakebuf_r>
 80081fa:	89a0      	ldrh	r0, [r4, #12]
 80081fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008200:	f010 0301 	ands.w	r3, r0, #1
 8008204:	d00a      	beq.n	800821c <__swsetup_r+0xbc>
 8008206:	2300      	movs	r3, #0
 8008208:	60a3      	str	r3, [r4, #8]
 800820a:	6963      	ldr	r3, [r4, #20]
 800820c:	425b      	negs	r3, r3
 800820e:	61a3      	str	r3, [r4, #24]
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	b943      	cbnz	r3, 8008226 <__swsetup_r+0xc6>
 8008214:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008218:	d1ba      	bne.n	8008190 <__swsetup_r+0x30>
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	0781      	lsls	r1, r0, #30
 800821e:	bf58      	it	pl
 8008220:	6963      	ldrpl	r3, [r4, #20]
 8008222:	60a3      	str	r3, [r4, #8]
 8008224:	e7f4      	b.n	8008210 <__swsetup_r+0xb0>
 8008226:	2000      	movs	r0, #0
 8008228:	e7f7      	b.n	800821a <__swsetup_r+0xba>
 800822a:	bf00      	nop
 800822c:	20000010 	.word	0x20000010
 8008230:	08009f9c 	.word	0x08009f9c
 8008234:	08009fbc 	.word	0x08009fbc
 8008238:	08009f7c 	.word	0x08009f7c

0800823c <_close_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d06      	ldr	r5, [pc, #24]	; (8008258 <_close_r+0x1c>)
 8008240:	2300      	movs	r3, #0
 8008242:	4604      	mov	r4, r0
 8008244:	4608      	mov	r0, r1
 8008246:	602b      	str	r3, [r5, #0]
 8008248:	f7f9 fc81 	bl	8001b4e <_close>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d102      	bne.n	8008256 <_close_r+0x1a>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b103      	cbz	r3, 8008256 <_close_r+0x1a>
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	20015294 	.word	0x20015294

0800825c <quorem>:
 800825c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	6903      	ldr	r3, [r0, #16]
 8008262:	690c      	ldr	r4, [r1, #16]
 8008264:	42a3      	cmp	r3, r4
 8008266:	4607      	mov	r7, r0
 8008268:	f2c0 8081 	blt.w	800836e <quorem+0x112>
 800826c:	3c01      	subs	r4, #1
 800826e:	f101 0814 	add.w	r8, r1, #20
 8008272:	f100 0514 	add.w	r5, r0, #20
 8008276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800827a:	9301      	str	r3, [sp, #4]
 800827c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008284:	3301      	adds	r3, #1
 8008286:	429a      	cmp	r2, r3
 8008288:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800828c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008290:	fbb2 f6f3 	udiv	r6, r2, r3
 8008294:	d331      	bcc.n	80082fa <quorem+0x9e>
 8008296:	f04f 0e00 	mov.w	lr, #0
 800829a:	4640      	mov	r0, r8
 800829c:	46ac      	mov	ip, r5
 800829e:	46f2      	mov	sl, lr
 80082a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80082a4:	b293      	uxth	r3, r2
 80082a6:	fb06 e303 	mla	r3, r6, r3, lr
 80082aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	ebaa 0303 	sub.w	r3, sl, r3
 80082b4:	f8dc a000 	ldr.w	sl, [ip]
 80082b8:	0c12      	lsrs	r2, r2, #16
 80082ba:	fa13 f38a 	uxtah	r3, r3, sl
 80082be:	fb06 e202 	mla	r2, r6, r2, lr
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082ca:	b292      	uxth	r2, r2
 80082cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80082d8:	4581      	cmp	r9, r0
 80082da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082de:	f84c 3b04 	str.w	r3, [ip], #4
 80082e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082e6:	d2db      	bcs.n	80082a0 <quorem+0x44>
 80082e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80082ec:	b92b      	cbnz	r3, 80082fa <quorem+0x9e>
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	3b04      	subs	r3, #4
 80082f2:	429d      	cmp	r5, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	d32e      	bcc.n	8008356 <quorem+0xfa>
 80082f8:	613c      	str	r4, [r7, #16]
 80082fa:	4638      	mov	r0, r7
 80082fc:	f001 f9fe 	bl	80096fc <__mcmp>
 8008300:	2800      	cmp	r0, #0
 8008302:	db24      	blt.n	800834e <quorem+0xf2>
 8008304:	3601      	adds	r6, #1
 8008306:	4628      	mov	r0, r5
 8008308:	f04f 0c00 	mov.w	ip, #0
 800830c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008310:	f8d0 e000 	ldr.w	lr, [r0]
 8008314:	b293      	uxth	r3, r2
 8008316:	ebac 0303 	sub.w	r3, ip, r3
 800831a:	0c12      	lsrs	r2, r2, #16
 800831c:	fa13 f38e 	uxtah	r3, r3, lr
 8008320:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008324:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008328:	b29b      	uxth	r3, r3
 800832a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800832e:	45c1      	cmp	r9, r8
 8008330:	f840 3b04 	str.w	r3, [r0], #4
 8008334:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008338:	d2e8      	bcs.n	800830c <quorem+0xb0>
 800833a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800833e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008342:	b922      	cbnz	r2, 800834e <quorem+0xf2>
 8008344:	3b04      	subs	r3, #4
 8008346:	429d      	cmp	r5, r3
 8008348:	461a      	mov	r2, r3
 800834a:	d30a      	bcc.n	8008362 <quorem+0x106>
 800834c:	613c      	str	r4, [r7, #16]
 800834e:	4630      	mov	r0, r6
 8008350:	b003      	add	sp, #12
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	3b04      	subs	r3, #4
 800835a:	2a00      	cmp	r2, #0
 800835c:	d1cc      	bne.n	80082f8 <quorem+0x9c>
 800835e:	3c01      	subs	r4, #1
 8008360:	e7c7      	b.n	80082f2 <quorem+0x96>
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	3b04      	subs	r3, #4
 8008366:	2a00      	cmp	r2, #0
 8008368:	d1f0      	bne.n	800834c <quorem+0xf0>
 800836a:	3c01      	subs	r4, #1
 800836c:	e7eb      	b.n	8008346 <quorem+0xea>
 800836e:	2000      	movs	r0, #0
 8008370:	e7ee      	b.n	8008350 <quorem+0xf4>
 8008372:	0000      	movs	r0, r0
 8008374:	0000      	movs	r0, r0
	...

08008378 <_dtoa_r>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	ed2d 8b04 	vpush	{d8-d9}
 8008380:	ec57 6b10 	vmov	r6, r7, d0
 8008384:	b093      	sub	sp, #76	; 0x4c
 8008386:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008388:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800838c:	9106      	str	r1, [sp, #24]
 800838e:	ee10 aa10 	vmov	sl, s0
 8008392:	4604      	mov	r4, r0
 8008394:	9209      	str	r2, [sp, #36]	; 0x24
 8008396:	930c      	str	r3, [sp, #48]	; 0x30
 8008398:	46bb      	mov	fp, r7
 800839a:	b975      	cbnz	r5, 80083ba <_dtoa_r+0x42>
 800839c:	2010      	movs	r0, #16
 800839e:	f000 ff17 	bl	80091d0 <malloc>
 80083a2:	4602      	mov	r2, r0
 80083a4:	6260      	str	r0, [r4, #36]	; 0x24
 80083a6:	b920      	cbnz	r0, 80083b2 <_dtoa_r+0x3a>
 80083a8:	4ba7      	ldr	r3, [pc, #668]	; (8008648 <_dtoa_r+0x2d0>)
 80083aa:	21ea      	movs	r1, #234	; 0xea
 80083ac:	48a7      	ldr	r0, [pc, #668]	; (800864c <_dtoa_r+0x2d4>)
 80083ae:	f001 fc75 	bl	8009c9c <__assert_func>
 80083b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083b6:	6005      	str	r5, [r0, #0]
 80083b8:	60c5      	str	r5, [r0, #12]
 80083ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083bc:	6819      	ldr	r1, [r3, #0]
 80083be:	b151      	cbz	r1, 80083d6 <_dtoa_r+0x5e>
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	604a      	str	r2, [r1, #4]
 80083c4:	2301      	movs	r3, #1
 80083c6:	4093      	lsls	r3, r2
 80083c8:	608b      	str	r3, [r1, #8]
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 ff54 	bl	8009278 <_Bfree>
 80083d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	1e3b      	subs	r3, r7, #0
 80083d8:	bfaa      	itet	ge
 80083da:	2300      	movge	r3, #0
 80083dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80083e0:	f8c8 3000 	strge.w	r3, [r8]
 80083e4:	4b9a      	ldr	r3, [pc, #616]	; (8008650 <_dtoa_r+0x2d8>)
 80083e6:	bfbc      	itt	lt
 80083e8:	2201      	movlt	r2, #1
 80083ea:	f8c8 2000 	strlt.w	r2, [r8]
 80083ee:	ea33 030b 	bics.w	r3, r3, fp
 80083f2:	d11b      	bne.n	800842c <_dtoa_r+0xb4>
 80083f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008400:	4333      	orrs	r3, r6
 8008402:	f000 8592 	beq.w	8008f2a <_dtoa_r+0xbb2>
 8008406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008408:	b963      	cbnz	r3, 8008424 <_dtoa_r+0xac>
 800840a:	4b92      	ldr	r3, [pc, #584]	; (8008654 <_dtoa_r+0x2dc>)
 800840c:	e022      	b.n	8008454 <_dtoa_r+0xdc>
 800840e:	4b92      	ldr	r3, [pc, #584]	; (8008658 <_dtoa_r+0x2e0>)
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	3308      	adds	r3, #8
 8008414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	9801      	ldr	r0, [sp, #4]
 800841a:	b013      	add	sp, #76	; 0x4c
 800841c:	ecbd 8b04 	vpop	{d8-d9}
 8008420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008424:	4b8b      	ldr	r3, [pc, #556]	; (8008654 <_dtoa_r+0x2dc>)
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	3303      	adds	r3, #3
 800842a:	e7f3      	b.n	8008414 <_dtoa_r+0x9c>
 800842c:	2200      	movs	r2, #0
 800842e:	2300      	movs	r3, #0
 8008430:	4650      	mov	r0, sl
 8008432:	4659      	mov	r1, fp
 8008434:	f7f8 fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 8008438:	ec4b ab19 	vmov	d9, sl, fp
 800843c:	4680      	mov	r8, r0
 800843e:	b158      	cbz	r0, 8008458 <_dtoa_r+0xe0>
 8008440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008442:	2301      	movs	r3, #1
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 856b 	beq.w	8008f24 <_dtoa_r+0xbac>
 800844e:	4883      	ldr	r0, [pc, #524]	; (800865c <_dtoa_r+0x2e4>)
 8008450:	6018      	str	r0, [r3, #0]
 8008452:	1e43      	subs	r3, r0, #1
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	e7df      	b.n	8008418 <_dtoa_r+0xa0>
 8008458:	ec4b ab10 	vmov	d0, sl, fp
 800845c:	aa10      	add	r2, sp, #64	; 0x40
 800845e:	a911      	add	r1, sp, #68	; 0x44
 8008460:	4620      	mov	r0, r4
 8008462:	f001 f9f1 	bl	8009848 <__d2b>
 8008466:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800846a:	ee08 0a10 	vmov	s16, r0
 800846e:	2d00      	cmp	r5, #0
 8008470:	f000 8084 	beq.w	800857c <_dtoa_r+0x204>
 8008474:	ee19 3a90 	vmov	r3, s19
 8008478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800847c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008480:	4656      	mov	r6, sl
 8008482:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800848a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800848e:	4b74      	ldr	r3, [pc, #464]	; (8008660 <_dtoa_r+0x2e8>)
 8008490:	2200      	movs	r2, #0
 8008492:	4630      	mov	r0, r6
 8008494:	4639      	mov	r1, r7
 8008496:	f7f7 feff 	bl	8000298 <__aeabi_dsub>
 800849a:	a365      	add	r3, pc, #404	; (adr r3, 8008630 <_dtoa_r+0x2b8>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f7f8 f8b2 	bl	8000608 <__aeabi_dmul>
 80084a4:	a364      	add	r3, pc, #400	; (adr r3, 8008638 <_dtoa_r+0x2c0>)
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	f7f7 fef7 	bl	800029c <__adddf3>
 80084ae:	4606      	mov	r6, r0
 80084b0:	4628      	mov	r0, r5
 80084b2:	460f      	mov	r7, r1
 80084b4:	f7f8 f83e 	bl	8000534 <__aeabi_i2d>
 80084b8:	a361      	add	r3, pc, #388	; (adr r3, 8008640 <_dtoa_r+0x2c8>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f8 f8a3 	bl	8000608 <__aeabi_dmul>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4630      	mov	r0, r6
 80084c8:	4639      	mov	r1, r7
 80084ca:	f7f7 fee7 	bl	800029c <__adddf3>
 80084ce:	4606      	mov	r6, r0
 80084d0:	460f      	mov	r7, r1
 80084d2:	f7f8 fb49 	bl	8000b68 <__aeabi_d2iz>
 80084d6:	2200      	movs	r2, #0
 80084d8:	9000      	str	r0, [sp, #0]
 80084da:	2300      	movs	r3, #0
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f8 fb04 	bl	8000aec <__aeabi_dcmplt>
 80084e4:	b150      	cbz	r0, 80084fc <_dtoa_r+0x184>
 80084e6:	9800      	ldr	r0, [sp, #0]
 80084e8:	f7f8 f824 	bl	8000534 <__aeabi_i2d>
 80084ec:	4632      	mov	r2, r6
 80084ee:	463b      	mov	r3, r7
 80084f0:	f7f8 faf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80084f4:	b910      	cbnz	r0, 80084fc <_dtoa_r+0x184>
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	9b00      	ldr	r3, [sp, #0]
 80084fe:	2b16      	cmp	r3, #22
 8008500:	d85a      	bhi.n	80085b8 <_dtoa_r+0x240>
 8008502:	9a00      	ldr	r2, [sp, #0]
 8008504:	4b57      	ldr	r3, [pc, #348]	; (8008664 <_dtoa_r+0x2ec>)
 8008506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	ec51 0b19 	vmov	r0, r1, d9
 8008512:	f7f8 faeb 	bl	8000aec <__aeabi_dcmplt>
 8008516:	2800      	cmp	r0, #0
 8008518:	d050      	beq.n	80085bc <_dtoa_r+0x244>
 800851a:	9b00      	ldr	r3, [sp, #0]
 800851c:	3b01      	subs	r3, #1
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	2300      	movs	r3, #0
 8008522:	930b      	str	r3, [sp, #44]	; 0x2c
 8008524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008526:	1b5d      	subs	r5, r3, r5
 8008528:	1e6b      	subs	r3, r5, #1
 800852a:	9305      	str	r3, [sp, #20]
 800852c:	bf45      	ittet	mi
 800852e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008532:	9304      	strmi	r3, [sp, #16]
 8008534:	2300      	movpl	r3, #0
 8008536:	2300      	movmi	r3, #0
 8008538:	bf4c      	ite	mi
 800853a:	9305      	strmi	r3, [sp, #20]
 800853c:	9304      	strpl	r3, [sp, #16]
 800853e:	9b00      	ldr	r3, [sp, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	db3d      	blt.n	80085c0 <_dtoa_r+0x248>
 8008544:	9b05      	ldr	r3, [sp, #20]
 8008546:	9a00      	ldr	r2, [sp, #0]
 8008548:	920a      	str	r2, [sp, #40]	; 0x28
 800854a:	4413      	add	r3, r2
 800854c:	9305      	str	r3, [sp, #20]
 800854e:	2300      	movs	r3, #0
 8008550:	9307      	str	r3, [sp, #28]
 8008552:	9b06      	ldr	r3, [sp, #24]
 8008554:	2b09      	cmp	r3, #9
 8008556:	f200 8089 	bhi.w	800866c <_dtoa_r+0x2f4>
 800855a:	2b05      	cmp	r3, #5
 800855c:	bfc4      	itt	gt
 800855e:	3b04      	subgt	r3, #4
 8008560:	9306      	strgt	r3, [sp, #24]
 8008562:	9b06      	ldr	r3, [sp, #24]
 8008564:	f1a3 0302 	sub.w	r3, r3, #2
 8008568:	bfcc      	ite	gt
 800856a:	2500      	movgt	r5, #0
 800856c:	2501      	movle	r5, #1
 800856e:	2b03      	cmp	r3, #3
 8008570:	f200 8087 	bhi.w	8008682 <_dtoa_r+0x30a>
 8008574:	e8df f003 	tbb	[pc, r3]
 8008578:	59383a2d 	.word	0x59383a2d
 800857c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008580:	441d      	add	r5, r3
 8008582:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008586:	2b20      	cmp	r3, #32
 8008588:	bfc1      	itttt	gt
 800858a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800858e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008592:	fa0b f303 	lslgt.w	r3, fp, r3
 8008596:	fa26 f000 	lsrgt.w	r0, r6, r0
 800859a:	bfda      	itte	le
 800859c:	f1c3 0320 	rsble	r3, r3, #32
 80085a0:	fa06 f003 	lslle.w	r0, r6, r3
 80085a4:	4318      	orrgt	r0, r3
 80085a6:	f7f7 ffb5 	bl	8000514 <__aeabi_ui2d>
 80085aa:	2301      	movs	r3, #1
 80085ac:	4606      	mov	r6, r0
 80085ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80085b2:	3d01      	subs	r5, #1
 80085b4:	930e      	str	r3, [sp, #56]	; 0x38
 80085b6:	e76a      	b.n	800848e <_dtoa_r+0x116>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e7b2      	b.n	8008522 <_dtoa_r+0x1aa>
 80085bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80085be:	e7b1      	b.n	8008524 <_dtoa_r+0x1ac>
 80085c0:	9b04      	ldr	r3, [sp, #16]
 80085c2:	9a00      	ldr	r2, [sp, #0]
 80085c4:	1a9b      	subs	r3, r3, r2
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	4253      	negs	r3, r2
 80085ca:	9307      	str	r3, [sp, #28]
 80085cc:	2300      	movs	r3, #0
 80085ce:	930a      	str	r3, [sp, #40]	; 0x28
 80085d0:	e7bf      	b.n	8008552 <_dtoa_r+0x1da>
 80085d2:	2300      	movs	r3, #0
 80085d4:	9308      	str	r3, [sp, #32]
 80085d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dc55      	bgt.n	8008688 <_dtoa_r+0x310>
 80085dc:	2301      	movs	r3, #1
 80085de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085e2:	461a      	mov	r2, r3
 80085e4:	9209      	str	r2, [sp, #36]	; 0x24
 80085e6:	e00c      	b.n	8008602 <_dtoa_r+0x28a>
 80085e8:	2301      	movs	r3, #1
 80085ea:	e7f3      	b.n	80085d4 <_dtoa_r+0x25c>
 80085ec:	2300      	movs	r3, #0
 80085ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f0:	9308      	str	r3, [sp, #32]
 80085f2:	9b00      	ldr	r3, [sp, #0]
 80085f4:	4413      	add	r3, r2
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	3301      	adds	r3, #1
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	9303      	str	r3, [sp, #12]
 80085fe:	bfb8      	it	lt
 8008600:	2301      	movlt	r3, #1
 8008602:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008604:	2200      	movs	r2, #0
 8008606:	6042      	str	r2, [r0, #4]
 8008608:	2204      	movs	r2, #4
 800860a:	f102 0614 	add.w	r6, r2, #20
 800860e:	429e      	cmp	r6, r3
 8008610:	6841      	ldr	r1, [r0, #4]
 8008612:	d93d      	bls.n	8008690 <_dtoa_r+0x318>
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fdef 	bl	80091f8 <_Balloc>
 800861a:	9001      	str	r0, [sp, #4]
 800861c:	2800      	cmp	r0, #0
 800861e:	d13b      	bne.n	8008698 <_dtoa_r+0x320>
 8008620:	4b11      	ldr	r3, [pc, #68]	; (8008668 <_dtoa_r+0x2f0>)
 8008622:	4602      	mov	r2, r0
 8008624:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008628:	e6c0      	b.n	80083ac <_dtoa_r+0x34>
 800862a:	2301      	movs	r3, #1
 800862c:	e7df      	b.n	80085ee <_dtoa_r+0x276>
 800862e:	bf00      	nop
 8008630:	636f4361 	.word	0x636f4361
 8008634:	3fd287a7 	.word	0x3fd287a7
 8008638:	8b60c8b3 	.word	0x8b60c8b3
 800863c:	3fc68a28 	.word	0x3fc68a28
 8008640:	509f79fb 	.word	0x509f79fb
 8008644:	3fd34413 	.word	0x3fd34413
 8008648:	0800a021 	.word	0x0800a021
 800864c:	0800a038 	.word	0x0800a038
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	0800a01d 	.word	0x0800a01d
 8008658:	0800a014 	.word	0x0800a014
 800865c:	08009ff1 	.word	0x08009ff1
 8008660:	3ff80000 	.word	0x3ff80000
 8008664:	0800a128 	.word	0x0800a128
 8008668:	0800a093 	.word	0x0800a093
 800866c:	2501      	movs	r5, #1
 800866e:	2300      	movs	r3, #0
 8008670:	9306      	str	r3, [sp, #24]
 8008672:	9508      	str	r5, [sp, #32]
 8008674:	f04f 33ff 	mov.w	r3, #4294967295
 8008678:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800867c:	2200      	movs	r2, #0
 800867e:	2312      	movs	r3, #18
 8008680:	e7b0      	b.n	80085e4 <_dtoa_r+0x26c>
 8008682:	2301      	movs	r3, #1
 8008684:	9308      	str	r3, [sp, #32]
 8008686:	e7f5      	b.n	8008674 <_dtoa_r+0x2fc>
 8008688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800868a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800868e:	e7b8      	b.n	8008602 <_dtoa_r+0x28a>
 8008690:	3101      	adds	r1, #1
 8008692:	6041      	str	r1, [r0, #4]
 8008694:	0052      	lsls	r2, r2, #1
 8008696:	e7b8      	b.n	800860a <_dtoa_r+0x292>
 8008698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800869a:	9a01      	ldr	r2, [sp, #4]
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	2b0e      	cmp	r3, #14
 80086a2:	f200 809d 	bhi.w	80087e0 <_dtoa_r+0x468>
 80086a6:	2d00      	cmp	r5, #0
 80086a8:	f000 809a 	beq.w	80087e0 <_dtoa_r+0x468>
 80086ac:	9b00      	ldr	r3, [sp, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dd32      	ble.n	8008718 <_dtoa_r+0x3a0>
 80086b2:	4ab7      	ldr	r2, [pc, #732]	; (8008990 <_dtoa_r+0x618>)
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086c0:	9b00      	ldr	r3, [sp, #0]
 80086c2:	05d8      	lsls	r0, r3, #23
 80086c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80086c8:	d516      	bpl.n	80086f8 <_dtoa_r+0x380>
 80086ca:	4bb2      	ldr	r3, [pc, #712]	; (8008994 <_dtoa_r+0x61c>)
 80086cc:	ec51 0b19 	vmov	r0, r1, d9
 80086d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086d4:	f7f8 f8c2 	bl	800085c <__aeabi_ddiv>
 80086d8:	f007 070f 	and.w	r7, r7, #15
 80086dc:	4682      	mov	sl, r0
 80086de:	468b      	mov	fp, r1
 80086e0:	2503      	movs	r5, #3
 80086e2:	4eac      	ldr	r6, [pc, #688]	; (8008994 <_dtoa_r+0x61c>)
 80086e4:	b957      	cbnz	r7, 80086fc <_dtoa_r+0x384>
 80086e6:	4642      	mov	r2, r8
 80086e8:	464b      	mov	r3, r9
 80086ea:	4650      	mov	r0, sl
 80086ec:	4659      	mov	r1, fp
 80086ee:	f7f8 f8b5 	bl	800085c <__aeabi_ddiv>
 80086f2:	4682      	mov	sl, r0
 80086f4:	468b      	mov	fp, r1
 80086f6:	e028      	b.n	800874a <_dtoa_r+0x3d2>
 80086f8:	2502      	movs	r5, #2
 80086fa:	e7f2      	b.n	80086e2 <_dtoa_r+0x36a>
 80086fc:	07f9      	lsls	r1, r7, #31
 80086fe:	d508      	bpl.n	8008712 <_dtoa_r+0x39a>
 8008700:	4640      	mov	r0, r8
 8008702:	4649      	mov	r1, r9
 8008704:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008708:	f7f7 ff7e 	bl	8000608 <__aeabi_dmul>
 800870c:	3501      	adds	r5, #1
 800870e:	4680      	mov	r8, r0
 8008710:	4689      	mov	r9, r1
 8008712:	107f      	asrs	r7, r7, #1
 8008714:	3608      	adds	r6, #8
 8008716:	e7e5      	b.n	80086e4 <_dtoa_r+0x36c>
 8008718:	f000 809b 	beq.w	8008852 <_dtoa_r+0x4da>
 800871c:	9b00      	ldr	r3, [sp, #0]
 800871e:	4f9d      	ldr	r7, [pc, #628]	; (8008994 <_dtoa_r+0x61c>)
 8008720:	425e      	negs	r6, r3
 8008722:	4b9b      	ldr	r3, [pc, #620]	; (8008990 <_dtoa_r+0x618>)
 8008724:	f006 020f 	and.w	r2, r6, #15
 8008728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	ec51 0b19 	vmov	r0, r1, d9
 8008734:	f7f7 ff68 	bl	8000608 <__aeabi_dmul>
 8008738:	1136      	asrs	r6, r6, #4
 800873a:	4682      	mov	sl, r0
 800873c:	468b      	mov	fp, r1
 800873e:	2300      	movs	r3, #0
 8008740:	2502      	movs	r5, #2
 8008742:	2e00      	cmp	r6, #0
 8008744:	d17a      	bne.n	800883c <_dtoa_r+0x4c4>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1d3      	bne.n	80086f2 <_dtoa_r+0x37a>
 800874a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 8082 	beq.w	8008856 <_dtoa_r+0x4de>
 8008752:	4b91      	ldr	r3, [pc, #580]	; (8008998 <_dtoa_r+0x620>)
 8008754:	2200      	movs	r2, #0
 8008756:	4650      	mov	r0, sl
 8008758:	4659      	mov	r1, fp
 800875a:	f7f8 f9c7 	bl	8000aec <__aeabi_dcmplt>
 800875e:	2800      	cmp	r0, #0
 8008760:	d079      	beq.n	8008856 <_dtoa_r+0x4de>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d076      	beq.n	8008856 <_dtoa_r+0x4de>
 8008768:	9b02      	ldr	r3, [sp, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	dd36      	ble.n	80087dc <_dtoa_r+0x464>
 800876e:	9b00      	ldr	r3, [sp, #0]
 8008770:	4650      	mov	r0, sl
 8008772:	4659      	mov	r1, fp
 8008774:	1e5f      	subs	r7, r3, #1
 8008776:	2200      	movs	r2, #0
 8008778:	4b88      	ldr	r3, [pc, #544]	; (800899c <_dtoa_r+0x624>)
 800877a:	f7f7 ff45 	bl	8000608 <__aeabi_dmul>
 800877e:	9e02      	ldr	r6, [sp, #8]
 8008780:	4682      	mov	sl, r0
 8008782:	468b      	mov	fp, r1
 8008784:	3501      	adds	r5, #1
 8008786:	4628      	mov	r0, r5
 8008788:	f7f7 fed4 	bl	8000534 <__aeabi_i2d>
 800878c:	4652      	mov	r2, sl
 800878e:	465b      	mov	r3, fp
 8008790:	f7f7 ff3a 	bl	8000608 <__aeabi_dmul>
 8008794:	4b82      	ldr	r3, [pc, #520]	; (80089a0 <_dtoa_r+0x628>)
 8008796:	2200      	movs	r2, #0
 8008798:	f7f7 fd80 	bl	800029c <__adddf3>
 800879c:	46d0      	mov	r8, sl
 800879e:	46d9      	mov	r9, fp
 80087a0:	4682      	mov	sl, r0
 80087a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80087a6:	2e00      	cmp	r6, #0
 80087a8:	d158      	bne.n	800885c <_dtoa_r+0x4e4>
 80087aa:	4b7e      	ldr	r3, [pc, #504]	; (80089a4 <_dtoa_r+0x62c>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f7 fd71 	bl	8000298 <__aeabi_dsub>
 80087b6:	4652      	mov	r2, sl
 80087b8:	465b      	mov	r3, fp
 80087ba:	4680      	mov	r8, r0
 80087bc:	4689      	mov	r9, r1
 80087be:	f7f8 f9b3 	bl	8000b28 <__aeabi_dcmpgt>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f040 8295 	bne.w	8008cf2 <_dtoa_r+0x97a>
 80087c8:	4652      	mov	r2, sl
 80087ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087ce:	4640      	mov	r0, r8
 80087d0:	4649      	mov	r1, r9
 80087d2:	f7f8 f98b 	bl	8000aec <__aeabi_dcmplt>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f040 8289 	bne.w	8008cee <_dtoa_r+0x976>
 80087dc:	ec5b ab19 	vmov	sl, fp, d9
 80087e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f2c0 8148 	blt.w	8008a78 <_dtoa_r+0x700>
 80087e8:	9a00      	ldr	r2, [sp, #0]
 80087ea:	2a0e      	cmp	r2, #14
 80087ec:	f300 8144 	bgt.w	8008a78 <_dtoa_r+0x700>
 80087f0:	4b67      	ldr	r3, [pc, #412]	; (8008990 <_dtoa_r+0x618>)
 80087f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f280 80d5 	bge.w	80089ac <_dtoa_r+0x634>
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f300 80d1 	bgt.w	80089ac <_dtoa_r+0x634>
 800880a:	f040 826f 	bne.w	8008cec <_dtoa_r+0x974>
 800880e:	4b65      	ldr	r3, [pc, #404]	; (80089a4 <_dtoa_r+0x62c>)
 8008810:	2200      	movs	r2, #0
 8008812:	4640      	mov	r0, r8
 8008814:	4649      	mov	r1, r9
 8008816:	f7f7 fef7 	bl	8000608 <__aeabi_dmul>
 800881a:	4652      	mov	r2, sl
 800881c:	465b      	mov	r3, fp
 800881e:	f7f8 f979 	bl	8000b14 <__aeabi_dcmpge>
 8008822:	9e03      	ldr	r6, [sp, #12]
 8008824:	4637      	mov	r7, r6
 8008826:	2800      	cmp	r0, #0
 8008828:	f040 8245 	bne.w	8008cb6 <_dtoa_r+0x93e>
 800882c:	9d01      	ldr	r5, [sp, #4]
 800882e:	2331      	movs	r3, #49	; 0x31
 8008830:	f805 3b01 	strb.w	r3, [r5], #1
 8008834:	9b00      	ldr	r3, [sp, #0]
 8008836:	3301      	adds	r3, #1
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	e240      	b.n	8008cbe <_dtoa_r+0x946>
 800883c:	07f2      	lsls	r2, r6, #31
 800883e:	d505      	bpl.n	800884c <_dtoa_r+0x4d4>
 8008840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008844:	f7f7 fee0 	bl	8000608 <__aeabi_dmul>
 8008848:	3501      	adds	r5, #1
 800884a:	2301      	movs	r3, #1
 800884c:	1076      	asrs	r6, r6, #1
 800884e:	3708      	adds	r7, #8
 8008850:	e777      	b.n	8008742 <_dtoa_r+0x3ca>
 8008852:	2502      	movs	r5, #2
 8008854:	e779      	b.n	800874a <_dtoa_r+0x3d2>
 8008856:	9f00      	ldr	r7, [sp, #0]
 8008858:	9e03      	ldr	r6, [sp, #12]
 800885a:	e794      	b.n	8008786 <_dtoa_r+0x40e>
 800885c:	9901      	ldr	r1, [sp, #4]
 800885e:	4b4c      	ldr	r3, [pc, #304]	; (8008990 <_dtoa_r+0x618>)
 8008860:	4431      	add	r1, r6
 8008862:	910d      	str	r1, [sp, #52]	; 0x34
 8008864:	9908      	ldr	r1, [sp, #32]
 8008866:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800886a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800886e:	2900      	cmp	r1, #0
 8008870:	d043      	beq.n	80088fa <_dtoa_r+0x582>
 8008872:	494d      	ldr	r1, [pc, #308]	; (80089a8 <_dtoa_r+0x630>)
 8008874:	2000      	movs	r0, #0
 8008876:	f7f7 fff1 	bl	800085c <__aeabi_ddiv>
 800887a:	4652      	mov	r2, sl
 800887c:	465b      	mov	r3, fp
 800887e:	f7f7 fd0b 	bl	8000298 <__aeabi_dsub>
 8008882:	9d01      	ldr	r5, [sp, #4]
 8008884:	4682      	mov	sl, r0
 8008886:	468b      	mov	fp, r1
 8008888:	4649      	mov	r1, r9
 800888a:	4640      	mov	r0, r8
 800888c:	f7f8 f96c 	bl	8000b68 <__aeabi_d2iz>
 8008890:	4606      	mov	r6, r0
 8008892:	f7f7 fe4f 	bl	8000534 <__aeabi_i2d>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4640      	mov	r0, r8
 800889c:	4649      	mov	r1, r9
 800889e:	f7f7 fcfb 	bl	8000298 <__aeabi_dsub>
 80088a2:	3630      	adds	r6, #48	; 0x30
 80088a4:	f805 6b01 	strb.w	r6, [r5], #1
 80088a8:	4652      	mov	r2, sl
 80088aa:	465b      	mov	r3, fp
 80088ac:	4680      	mov	r8, r0
 80088ae:	4689      	mov	r9, r1
 80088b0:	f7f8 f91c 	bl	8000aec <__aeabi_dcmplt>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d163      	bne.n	8008980 <_dtoa_r+0x608>
 80088b8:	4642      	mov	r2, r8
 80088ba:	464b      	mov	r3, r9
 80088bc:	4936      	ldr	r1, [pc, #216]	; (8008998 <_dtoa_r+0x620>)
 80088be:	2000      	movs	r0, #0
 80088c0:	f7f7 fcea 	bl	8000298 <__aeabi_dsub>
 80088c4:	4652      	mov	r2, sl
 80088c6:	465b      	mov	r3, fp
 80088c8:	f7f8 f910 	bl	8000aec <__aeabi_dcmplt>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f040 80b5 	bne.w	8008a3c <_dtoa_r+0x6c4>
 80088d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088d4:	429d      	cmp	r5, r3
 80088d6:	d081      	beq.n	80087dc <_dtoa_r+0x464>
 80088d8:	4b30      	ldr	r3, [pc, #192]	; (800899c <_dtoa_r+0x624>)
 80088da:	2200      	movs	r2, #0
 80088dc:	4650      	mov	r0, sl
 80088de:	4659      	mov	r1, fp
 80088e0:	f7f7 fe92 	bl	8000608 <__aeabi_dmul>
 80088e4:	4b2d      	ldr	r3, [pc, #180]	; (800899c <_dtoa_r+0x624>)
 80088e6:	4682      	mov	sl, r0
 80088e8:	468b      	mov	fp, r1
 80088ea:	4640      	mov	r0, r8
 80088ec:	4649      	mov	r1, r9
 80088ee:	2200      	movs	r2, #0
 80088f0:	f7f7 fe8a 	bl	8000608 <__aeabi_dmul>
 80088f4:	4680      	mov	r8, r0
 80088f6:	4689      	mov	r9, r1
 80088f8:	e7c6      	b.n	8008888 <_dtoa_r+0x510>
 80088fa:	4650      	mov	r0, sl
 80088fc:	4659      	mov	r1, fp
 80088fe:	f7f7 fe83 	bl	8000608 <__aeabi_dmul>
 8008902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008904:	9d01      	ldr	r5, [sp, #4]
 8008906:	930f      	str	r3, [sp, #60]	; 0x3c
 8008908:	4682      	mov	sl, r0
 800890a:	468b      	mov	fp, r1
 800890c:	4649      	mov	r1, r9
 800890e:	4640      	mov	r0, r8
 8008910:	f7f8 f92a 	bl	8000b68 <__aeabi_d2iz>
 8008914:	4606      	mov	r6, r0
 8008916:	f7f7 fe0d 	bl	8000534 <__aeabi_i2d>
 800891a:	3630      	adds	r6, #48	; 0x30
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f7 fcb8 	bl	8000298 <__aeabi_dsub>
 8008928:	f805 6b01 	strb.w	r6, [r5], #1
 800892c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800892e:	429d      	cmp	r5, r3
 8008930:	4680      	mov	r8, r0
 8008932:	4689      	mov	r9, r1
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	d124      	bne.n	8008984 <_dtoa_r+0x60c>
 800893a:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <_dtoa_r+0x630>)
 800893c:	4650      	mov	r0, sl
 800893e:	4659      	mov	r1, fp
 8008940:	f7f7 fcac 	bl	800029c <__adddf3>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4640      	mov	r0, r8
 800894a:	4649      	mov	r1, r9
 800894c:	f7f8 f8ec 	bl	8000b28 <__aeabi_dcmpgt>
 8008950:	2800      	cmp	r0, #0
 8008952:	d173      	bne.n	8008a3c <_dtoa_r+0x6c4>
 8008954:	4652      	mov	r2, sl
 8008956:	465b      	mov	r3, fp
 8008958:	4913      	ldr	r1, [pc, #76]	; (80089a8 <_dtoa_r+0x630>)
 800895a:	2000      	movs	r0, #0
 800895c:	f7f7 fc9c 	bl	8000298 <__aeabi_dsub>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	f7f8 f8c0 	bl	8000aec <__aeabi_dcmplt>
 800896c:	2800      	cmp	r0, #0
 800896e:	f43f af35 	beq.w	80087dc <_dtoa_r+0x464>
 8008972:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008974:	1e6b      	subs	r3, r5, #1
 8008976:	930f      	str	r3, [sp, #60]	; 0x3c
 8008978:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800897c:	2b30      	cmp	r3, #48	; 0x30
 800897e:	d0f8      	beq.n	8008972 <_dtoa_r+0x5fa>
 8008980:	9700      	str	r7, [sp, #0]
 8008982:	e049      	b.n	8008a18 <_dtoa_r+0x6a0>
 8008984:	4b05      	ldr	r3, [pc, #20]	; (800899c <_dtoa_r+0x624>)
 8008986:	f7f7 fe3f 	bl	8000608 <__aeabi_dmul>
 800898a:	4680      	mov	r8, r0
 800898c:	4689      	mov	r9, r1
 800898e:	e7bd      	b.n	800890c <_dtoa_r+0x594>
 8008990:	0800a128 	.word	0x0800a128
 8008994:	0800a100 	.word	0x0800a100
 8008998:	3ff00000 	.word	0x3ff00000
 800899c:	40240000 	.word	0x40240000
 80089a0:	401c0000 	.word	0x401c0000
 80089a4:	40140000 	.word	0x40140000
 80089a8:	3fe00000 	.word	0x3fe00000
 80089ac:	9d01      	ldr	r5, [sp, #4]
 80089ae:	4656      	mov	r6, sl
 80089b0:	465f      	mov	r7, fp
 80089b2:	4642      	mov	r2, r8
 80089b4:	464b      	mov	r3, r9
 80089b6:	4630      	mov	r0, r6
 80089b8:	4639      	mov	r1, r7
 80089ba:	f7f7 ff4f 	bl	800085c <__aeabi_ddiv>
 80089be:	f7f8 f8d3 	bl	8000b68 <__aeabi_d2iz>
 80089c2:	4682      	mov	sl, r0
 80089c4:	f7f7 fdb6 	bl	8000534 <__aeabi_i2d>
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	f7f7 fe1c 	bl	8000608 <__aeabi_dmul>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4630      	mov	r0, r6
 80089d6:	4639      	mov	r1, r7
 80089d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80089dc:	f7f7 fc5c 	bl	8000298 <__aeabi_dsub>
 80089e0:	f805 6b01 	strb.w	r6, [r5], #1
 80089e4:	9e01      	ldr	r6, [sp, #4]
 80089e6:	9f03      	ldr	r7, [sp, #12]
 80089e8:	1bae      	subs	r6, r5, r6
 80089ea:	42b7      	cmp	r7, r6
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	d135      	bne.n	8008a5e <_dtoa_r+0x6e6>
 80089f2:	f7f7 fc53 	bl	800029c <__adddf3>
 80089f6:	4642      	mov	r2, r8
 80089f8:	464b      	mov	r3, r9
 80089fa:	4606      	mov	r6, r0
 80089fc:	460f      	mov	r7, r1
 80089fe:	f7f8 f893 	bl	8000b28 <__aeabi_dcmpgt>
 8008a02:	b9d0      	cbnz	r0, 8008a3a <_dtoa_r+0x6c2>
 8008a04:	4642      	mov	r2, r8
 8008a06:	464b      	mov	r3, r9
 8008a08:	4630      	mov	r0, r6
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	f7f8 f864 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a10:	b110      	cbz	r0, 8008a18 <_dtoa_r+0x6a0>
 8008a12:	f01a 0f01 	tst.w	sl, #1
 8008a16:	d110      	bne.n	8008a3a <_dtoa_r+0x6c2>
 8008a18:	4620      	mov	r0, r4
 8008a1a:	ee18 1a10 	vmov	r1, s16
 8008a1e:	f000 fc2b 	bl	8009278 <_Bfree>
 8008a22:	2300      	movs	r3, #0
 8008a24:	9800      	ldr	r0, [sp, #0]
 8008a26:	702b      	strb	r3, [r5, #0]
 8008a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	6018      	str	r0, [r3, #0]
 8008a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f43f acf1 	beq.w	8008418 <_dtoa_r+0xa0>
 8008a36:	601d      	str	r5, [r3, #0]
 8008a38:	e4ee      	b.n	8008418 <_dtoa_r+0xa0>
 8008a3a:	9f00      	ldr	r7, [sp, #0]
 8008a3c:	462b      	mov	r3, r5
 8008a3e:	461d      	mov	r5, r3
 8008a40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a44:	2a39      	cmp	r2, #57	; 0x39
 8008a46:	d106      	bne.n	8008a56 <_dtoa_r+0x6de>
 8008a48:	9a01      	ldr	r2, [sp, #4]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d1f7      	bne.n	8008a3e <_dtoa_r+0x6c6>
 8008a4e:	9901      	ldr	r1, [sp, #4]
 8008a50:	2230      	movs	r2, #48	; 0x30
 8008a52:	3701      	adds	r7, #1
 8008a54:	700a      	strb	r2, [r1, #0]
 8008a56:	781a      	ldrb	r2, [r3, #0]
 8008a58:	3201      	adds	r2, #1
 8008a5a:	701a      	strb	r2, [r3, #0]
 8008a5c:	e790      	b.n	8008980 <_dtoa_r+0x608>
 8008a5e:	4ba6      	ldr	r3, [pc, #664]	; (8008cf8 <_dtoa_r+0x980>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	f7f7 fdd1 	bl	8000608 <__aeabi_dmul>
 8008a66:	2200      	movs	r2, #0
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	f7f8 f833 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d09d      	beq.n	80089b2 <_dtoa_r+0x63a>
 8008a76:	e7cf      	b.n	8008a18 <_dtoa_r+0x6a0>
 8008a78:	9a08      	ldr	r2, [sp, #32]
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	f000 80d7 	beq.w	8008c2e <_dtoa_r+0x8b6>
 8008a80:	9a06      	ldr	r2, [sp, #24]
 8008a82:	2a01      	cmp	r2, #1
 8008a84:	f300 80ba 	bgt.w	8008bfc <_dtoa_r+0x884>
 8008a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	f000 80b2 	beq.w	8008bf4 <_dtoa_r+0x87c>
 8008a90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a94:	9e07      	ldr	r6, [sp, #28]
 8008a96:	9d04      	ldr	r5, [sp, #16]
 8008a98:	9a04      	ldr	r2, [sp, #16]
 8008a9a:	441a      	add	r2, r3
 8008a9c:	9204      	str	r2, [sp, #16]
 8008a9e:	9a05      	ldr	r2, [sp, #20]
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	441a      	add	r2, r3
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	9205      	str	r2, [sp, #20]
 8008aa8:	f000 fc9e 	bl	80093e8 <__i2b>
 8008aac:	4607      	mov	r7, r0
 8008aae:	2d00      	cmp	r5, #0
 8008ab0:	dd0c      	ble.n	8008acc <_dtoa_r+0x754>
 8008ab2:	9b05      	ldr	r3, [sp, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	dd09      	ble.n	8008acc <_dtoa_r+0x754>
 8008ab8:	42ab      	cmp	r3, r5
 8008aba:	9a04      	ldr	r2, [sp, #16]
 8008abc:	bfa8      	it	ge
 8008abe:	462b      	movge	r3, r5
 8008ac0:	1ad2      	subs	r2, r2, r3
 8008ac2:	9204      	str	r2, [sp, #16]
 8008ac4:	9a05      	ldr	r2, [sp, #20]
 8008ac6:	1aed      	subs	r5, r5, r3
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	9305      	str	r3, [sp, #20]
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	b31b      	cbz	r3, 8008b18 <_dtoa_r+0x7a0>
 8008ad0:	9b08      	ldr	r3, [sp, #32]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80af 	beq.w	8008c36 <_dtoa_r+0x8be>
 8008ad8:	2e00      	cmp	r6, #0
 8008ada:	dd13      	ble.n	8008b04 <_dtoa_r+0x78c>
 8008adc:	4639      	mov	r1, r7
 8008ade:	4632      	mov	r2, r6
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 fd41 	bl	8009568 <__pow5mult>
 8008ae6:	ee18 2a10 	vmov	r2, s16
 8008aea:	4601      	mov	r1, r0
 8008aec:	4607      	mov	r7, r0
 8008aee:	4620      	mov	r0, r4
 8008af0:	f000 fc90 	bl	8009414 <__multiply>
 8008af4:	ee18 1a10 	vmov	r1, s16
 8008af8:	4680      	mov	r8, r0
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 fbbc 	bl	8009278 <_Bfree>
 8008b00:	ee08 8a10 	vmov	s16, r8
 8008b04:	9b07      	ldr	r3, [sp, #28]
 8008b06:	1b9a      	subs	r2, r3, r6
 8008b08:	d006      	beq.n	8008b18 <_dtoa_r+0x7a0>
 8008b0a:	ee18 1a10 	vmov	r1, s16
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fd2a 	bl	8009568 <__pow5mult>
 8008b14:	ee08 0a10 	vmov	s16, r0
 8008b18:	2101      	movs	r1, #1
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fc64 	bl	80093e8 <__i2b>
 8008b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	4606      	mov	r6, r0
 8008b26:	f340 8088 	ble.w	8008c3a <_dtoa_r+0x8c2>
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	4601      	mov	r1, r0
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 fd1a 	bl	8009568 <__pow5mult>
 8008b34:	9b06      	ldr	r3, [sp, #24]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	4606      	mov	r6, r0
 8008b3a:	f340 8081 	ble.w	8008c40 <_dtoa_r+0x8c8>
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	6933      	ldr	r3, [r6, #16]
 8008b44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b48:	6918      	ldr	r0, [r3, #16]
 8008b4a:	f000 fbfd 	bl	8009348 <__hi0bits>
 8008b4e:	f1c0 0020 	rsb	r0, r0, #32
 8008b52:	9b05      	ldr	r3, [sp, #20]
 8008b54:	4418      	add	r0, r3
 8008b56:	f010 001f 	ands.w	r0, r0, #31
 8008b5a:	f000 8092 	beq.w	8008c82 <_dtoa_r+0x90a>
 8008b5e:	f1c0 0320 	rsb	r3, r0, #32
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	f340 808a 	ble.w	8008c7c <_dtoa_r+0x904>
 8008b68:	f1c0 001c 	rsb	r0, r0, #28
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	4403      	add	r3, r0
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	9b05      	ldr	r3, [sp, #20]
 8008b74:	4403      	add	r3, r0
 8008b76:	4405      	add	r5, r0
 8008b78:	9305      	str	r3, [sp, #20]
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	dd07      	ble.n	8008b90 <_dtoa_r+0x818>
 8008b80:	ee18 1a10 	vmov	r1, s16
 8008b84:	461a      	mov	r2, r3
 8008b86:	4620      	mov	r0, r4
 8008b88:	f000 fd48 	bl	800961c <__lshift>
 8008b8c:	ee08 0a10 	vmov	s16, r0
 8008b90:	9b05      	ldr	r3, [sp, #20]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	dd05      	ble.n	8008ba2 <_dtoa_r+0x82a>
 8008b96:	4631      	mov	r1, r6
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fd3e 	bl	800961c <__lshift>
 8008ba0:	4606      	mov	r6, r0
 8008ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d06e      	beq.n	8008c86 <_dtoa_r+0x90e>
 8008ba8:	ee18 0a10 	vmov	r0, s16
 8008bac:	4631      	mov	r1, r6
 8008bae:	f000 fda5 	bl	80096fc <__mcmp>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	da67      	bge.n	8008c86 <_dtoa_r+0x90e>
 8008bb6:	9b00      	ldr	r3, [sp, #0]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	ee18 1a10 	vmov	r1, s16
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	220a      	movs	r2, #10
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 fb79 	bl	80092bc <__multadd>
 8008bca:	9b08      	ldr	r3, [sp, #32]
 8008bcc:	ee08 0a10 	vmov	s16, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 81b1 	beq.w	8008f38 <_dtoa_r+0xbc0>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4639      	mov	r1, r7
 8008bda:	220a      	movs	r2, #10
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f000 fb6d 	bl	80092bc <__multadd>
 8008be2:	9b02      	ldr	r3, [sp, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	4607      	mov	r7, r0
 8008be8:	f300 808e 	bgt.w	8008d08 <_dtoa_r+0x990>
 8008bec:	9b06      	ldr	r3, [sp, #24]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	dc51      	bgt.n	8008c96 <_dtoa_r+0x91e>
 8008bf2:	e089      	b.n	8008d08 <_dtoa_r+0x990>
 8008bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bfa:	e74b      	b.n	8008a94 <_dtoa_r+0x71c>
 8008bfc:	9b03      	ldr	r3, [sp, #12]
 8008bfe:	1e5e      	subs	r6, r3, #1
 8008c00:	9b07      	ldr	r3, [sp, #28]
 8008c02:	42b3      	cmp	r3, r6
 8008c04:	bfbf      	itttt	lt
 8008c06:	9b07      	ldrlt	r3, [sp, #28]
 8008c08:	9607      	strlt	r6, [sp, #28]
 8008c0a:	1af2      	sublt	r2, r6, r3
 8008c0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c0e:	bfb6      	itet	lt
 8008c10:	189b      	addlt	r3, r3, r2
 8008c12:	1b9e      	subge	r6, r3, r6
 8008c14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	bfb8      	it	lt
 8008c1a:	2600      	movlt	r6, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bfb7      	itett	lt
 8008c20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008c24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c28:	1a9d      	sublt	r5, r3, r2
 8008c2a:	2300      	movlt	r3, #0
 8008c2c:	e734      	b.n	8008a98 <_dtoa_r+0x720>
 8008c2e:	9e07      	ldr	r6, [sp, #28]
 8008c30:	9d04      	ldr	r5, [sp, #16]
 8008c32:	9f08      	ldr	r7, [sp, #32]
 8008c34:	e73b      	b.n	8008aae <_dtoa_r+0x736>
 8008c36:	9a07      	ldr	r2, [sp, #28]
 8008c38:	e767      	b.n	8008b0a <_dtoa_r+0x792>
 8008c3a:	9b06      	ldr	r3, [sp, #24]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	dc18      	bgt.n	8008c72 <_dtoa_r+0x8fa>
 8008c40:	f1ba 0f00 	cmp.w	sl, #0
 8008c44:	d115      	bne.n	8008c72 <_dtoa_r+0x8fa>
 8008c46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c4a:	b993      	cbnz	r3, 8008c72 <_dtoa_r+0x8fa>
 8008c4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c50:	0d1b      	lsrs	r3, r3, #20
 8008c52:	051b      	lsls	r3, r3, #20
 8008c54:	b183      	cbz	r3, 8008c78 <_dtoa_r+0x900>
 8008c56:	9b04      	ldr	r3, [sp, #16]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	9304      	str	r3, [sp, #16]
 8008c5c:	9b05      	ldr	r3, [sp, #20]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	9305      	str	r3, [sp, #20]
 8008c62:	f04f 0801 	mov.w	r8, #1
 8008c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f47f af6a 	bne.w	8008b42 <_dtoa_r+0x7ca>
 8008c6e:	2001      	movs	r0, #1
 8008c70:	e76f      	b.n	8008b52 <_dtoa_r+0x7da>
 8008c72:	f04f 0800 	mov.w	r8, #0
 8008c76:	e7f6      	b.n	8008c66 <_dtoa_r+0x8ee>
 8008c78:	4698      	mov	r8, r3
 8008c7a:	e7f4      	b.n	8008c66 <_dtoa_r+0x8ee>
 8008c7c:	f43f af7d 	beq.w	8008b7a <_dtoa_r+0x802>
 8008c80:	4618      	mov	r0, r3
 8008c82:	301c      	adds	r0, #28
 8008c84:	e772      	b.n	8008b6c <_dtoa_r+0x7f4>
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dc37      	bgt.n	8008cfc <_dtoa_r+0x984>
 8008c8c:	9b06      	ldr	r3, [sp, #24]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	dd34      	ble.n	8008cfc <_dtoa_r+0x984>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	9302      	str	r3, [sp, #8]
 8008c96:	9b02      	ldr	r3, [sp, #8]
 8008c98:	b96b      	cbnz	r3, 8008cb6 <_dtoa_r+0x93e>
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	2205      	movs	r2, #5
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 fb0c 	bl	80092bc <__multadd>
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	ee18 0a10 	vmov	r0, s16
 8008cac:	f000 fd26 	bl	80096fc <__mcmp>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f73f adbb 	bgt.w	800882c <_dtoa_r+0x4b4>
 8008cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb8:	9d01      	ldr	r5, [sp, #4]
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	f04f 0800 	mov.w	r8, #0
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fad7 	bl	8009278 <_Bfree>
 8008cca:	2f00      	cmp	r7, #0
 8008ccc:	f43f aea4 	beq.w	8008a18 <_dtoa_r+0x6a0>
 8008cd0:	f1b8 0f00 	cmp.w	r8, #0
 8008cd4:	d005      	beq.n	8008ce2 <_dtoa_r+0x96a>
 8008cd6:	45b8      	cmp	r8, r7
 8008cd8:	d003      	beq.n	8008ce2 <_dtoa_r+0x96a>
 8008cda:	4641      	mov	r1, r8
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 facb 	bl	8009278 <_Bfree>
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 fac7 	bl	8009278 <_Bfree>
 8008cea:	e695      	b.n	8008a18 <_dtoa_r+0x6a0>
 8008cec:	2600      	movs	r6, #0
 8008cee:	4637      	mov	r7, r6
 8008cf0:	e7e1      	b.n	8008cb6 <_dtoa_r+0x93e>
 8008cf2:	9700      	str	r7, [sp, #0]
 8008cf4:	4637      	mov	r7, r6
 8008cf6:	e599      	b.n	800882c <_dtoa_r+0x4b4>
 8008cf8:	40240000 	.word	0x40240000
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80ca 	beq.w	8008e98 <_dtoa_r+0xb20>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	9302      	str	r3, [sp, #8]
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	dd05      	ble.n	8008d18 <_dtoa_r+0x9a0>
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	462a      	mov	r2, r5
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 fc83 	bl	800961c <__lshift>
 8008d16:	4607      	mov	r7, r0
 8008d18:	f1b8 0f00 	cmp.w	r8, #0
 8008d1c:	d05b      	beq.n	8008dd6 <_dtoa_r+0xa5e>
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fa69 	bl	80091f8 <_Balloc>
 8008d26:	4605      	mov	r5, r0
 8008d28:	b928      	cbnz	r0, 8008d36 <_dtoa_r+0x9be>
 8008d2a:	4b87      	ldr	r3, [pc, #540]	; (8008f48 <_dtoa_r+0xbd0>)
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d32:	f7ff bb3b 	b.w	80083ac <_dtoa_r+0x34>
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	3202      	adds	r2, #2
 8008d3a:	0092      	lsls	r2, r2, #2
 8008d3c:	f107 010c 	add.w	r1, r7, #12
 8008d40:	300c      	adds	r0, #12
 8008d42:	f7fe fb48 	bl	80073d6 <memcpy>
 8008d46:	2201      	movs	r2, #1
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 fc66 	bl	800961c <__lshift>
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	f103 0901 	add.w	r9, r3, #1
 8008d56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	9305      	str	r3, [sp, #20]
 8008d5e:	f00a 0301 	and.w	r3, sl, #1
 8008d62:	46b8      	mov	r8, r7
 8008d64:	9304      	str	r3, [sp, #16]
 8008d66:	4607      	mov	r7, r0
 8008d68:	4631      	mov	r1, r6
 8008d6a:	ee18 0a10 	vmov	r0, s16
 8008d6e:	f7ff fa75 	bl	800825c <quorem>
 8008d72:	4641      	mov	r1, r8
 8008d74:	9002      	str	r0, [sp, #8]
 8008d76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d7a:	ee18 0a10 	vmov	r0, s16
 8008d7e:	f000 fcbd 	bl	80096fc <__mcmp>
 8008d82:	463a      	mov	r2, r7
 8008d84:	9003      	str	r0, [sp, #12]
 8008d86:	4631      	mov	r1, r6
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fcd3 	bl	8009734 <__mdiff>
 8008d8e:	68c2      	ldr	r2, [r0, #12]
 8008d90:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d94:	4605      	mov	r5, r0
 8008d96:	bb02      	cbnz	r2, 8008dda <_dtoa_r+0xa62>
 8008d98:	4601      	mov	r1, r0
 8008d9a:	ee18 0a10 	vmov	r0, s16
 8008d9e:	f000 fcad 	bl	80096fc <__mcmp>
 8008da2:	4602      	mov	r2, r0
 8008da4:	4629      	mov	r1, r5
 8008da6:	4620      	mov	r0, r4
 8008da8:	9207      	str	r2, [sp, #28]
 8008daa:	f000 fa65 	bl	8009278 <_Bfree>
 8008dae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008db2:	ea43 0102 	orr.w	r1, r3, r2
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	430b      	orrs	r3, r1
 8008dba:	464d      	mov	r5, r9
 8008dbc:	d10f      	bne.n	8008dde <_dtoa_r+0xa66>
 8008dbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dc2:	d02a      	beq.n	8008e1a <_dtoa_r+0xaa2>
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dd02      	ble.n	8008dd0 <_dtoa_r+0xa58>
 8008dca:	9b02      	ldr	r3, [sp, #8]
 8008dcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008dd0:	f88b a000 	strb.w	sl, [fp]
 8008dd4:	e775      	b.n	8008cc2 <_dtoa_r+0x94a>
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	e7ba      	b.n	8008d50 <_dtoa_r+0x9d8>
 8008dda:	2201      	movs	r2, #1
 8008ddc:	e7e2      	b.n	8008da4 <_dtoa_r+0xa2c>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	db04      	blt.n	8008dee <_dtoa_r+0xa76>
 8008de4:	9906      	ldr	r1, [sp, #24]
 8008de6:	430b      	orrs	r3, r1
 8008de8:	9904      	ldr	r1, [sp, #16]
 8008dea:	430b      	orrs	r3, r1
 8008dec:	d122      	bne.n	8008e34 <_dtoa_r+0xabc>
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	ddee      	ble.n	8008dd0 <_dtoa_r+0xa58>
 8008df2:	ee18 1a10 	vmov	r1, s16
 8008df6:	2201      	movs	r2, #1
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fc0f 	bl	800961c <__lshift>
 8008dfe:	4631      	mov	r1, r6
 8008e00:	ee08 0a10 	vmov	s16, r0
 8008e04:	f000 fc7a 	bl	80096fc <__mcmp>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	dc03      	bgt.n	8008e14 <_dtoa_r+0xa9c>
 8008e0c:	d1e0      	bne.n	8008dd0 <_dtoa_r+0xa58>
 8008e0e:	f01a 0f01 	tst.w	sl, #1
 8008e12:	d0dd      	beq.n	8008dd0 <_dtoa_r+0xa58>
 8008e14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e18:	d1d7      	bne.n	8008dca <_dtoa_r+0xa52>
 8008e1a:	2339      	movs	r3, #57	; 0x39
 8008e1c:	f88b 3000 	strb.w	r3, [fp]
 8008e20:	462b      	mov	r3, r5
 8008e22:	461d      	mov	r5, r3
 8008e24:	3b01      	subs	r3, #1
 8008e26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e2a:	2a39      	cmp	r2, #57	; 0x39
 8008e2c:	d071      	beq.n	8008f12 <_dtoa_r+0xb9a>
 8008e2e:	3201      	adds	r2, #1
 8008e30:	701a      	strb	r2, [r3, #0]
 8008e32:	e746      	b.n	8008cc2 <_dtoa_r+0x94a>
 8008e34:	2a00      	cmp	r2, #0
 8008e36:	dd07      	ble.n	8008e48 <_dtoa_r+0xad0>
 8008e38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e3c:	d0ed      	beq.n	8008e1a <_dtoa_r+0xaa2>
 8008e3e:	f10a 0301 	add.w	r3, sl, #1
 8008e42:	f88b 3000 	strb.w	r3, [fp]
 8008e46:	e73c      	b.n	8008cc2 <_dtoa_r+0x94a>
 8008e48:	9b05      	ldr	r3, [sp, #20]
 8008e4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e4e:	4599      	cmp	r9, r3
 8008e50:	d047      	beq.n	8008ee2 <_dtoa_r+0xb6a>
 8008e52:	ee18 1a10 	vmov	r1, s16
 8008e56:	2300      	movs	r3, #0
 8008e58:	220a      	movs	r2, #10
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 fa2e 	bl	80092bc <__multadd>
 8008e60:	45b8      	cmp	r8, r7
 8008e62:	ee08 0a10 	vmov	s16, r0
 8008e66:	f04f 0300 	mov.w	r3, #0
 8008e6a:	f04f 020a 	mov.w	r2, #10
 8008e6e:	4641      	mov	r1, r8
 8008e70:	4620      	mov	r0, r4
 8008e72:	d106      	bne.n	8008e82 <_dtoa_r+0xb0a>
 8008e74:	f000 fa22 	bl	80092bc <__multadd>
 8008e78:	4680      	mov	r8, r0
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	f109 0901 	add.w	r9, r9, #1
 8008e80:	e772      	b.n	8008d68 <_dtoa_r+0x9f0>
 8008e82:	f000 fa1b 	bl	80092bc <__multadd>
 8008e86:	4639      	mov	r1, r7
 8008e88:	4680      	mov	r8, r0
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	220a      	movs	r2, #10
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fa14 	bl	80092bc <__multadd>
 8008e94:	4607      	mov	r7, r0
 8008e96:	e7f1      	b.n	8008e7c <_dtoa_r+0xb04>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	9302      	str	r3, [sp, #8]
 8008e9c:	9d01      	ldr	r5, [sp, #4]
 8008e9e:	ee18 0a10 	vmov	r0, s16
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	f7ff f9da 	bl	800825c <quorem>
 8008ea8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008eac:	9b01      	ldr	r3, [sp, #4]
 8008eae:	f805 ab01 	strb.w	sl, [r5], #1
 8008eb2:	1aea      	subs	r2, r5, r3
 8008eb4:	9b02      	ldr	r3, [sp, #8]
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	dd09      	ble.n	8008ece <_dtoa_r+0xb56>
 8008eba:	ee18 1a10 	vmov	r1, s16
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	220a      	movs	r2, #10
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f000 f9fa 	bl	80092bc <__multadd>
 8008ec8:	ee08 0a10 	vmov	s16, r0
 8008ecc:	e7e7      	b.n	8008e9e <_dtoa_r+0xb26>
 8008ece:	9b02      	ldr	r3, [sp, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bfc8      	it	gt
 8008ed4:	461d      	movgt	r5, r3
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	bfd8      	it	le
 8008eda:	2501      	movle	r5, #1
 8008edc:	441d      	add	r5, r3
 8008ede:	f04f 0800 	mov.w	r8, #0
 8008ee2:	ee18 1a10 	vmov	r1, s16
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f000 fb97 	bl	800961c <__lshift>
 8008eee:	4631      	mov	r1, r6
 8008ef0:	ee08 0a10 	vmov	s16, r0
 8008ef4:	f000 fc02 	bl	80096fc <__mcmp>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	dc91      	bgt.n	8008e20 <_dtoa_r+0xaa8>
 8008efc:	d102      	bne.n	8008f04 <_dtoa_r+0xb8c>
 8008efe:	f01a 0f01 	tst.w	sl, #1
 8008f02:	d18d      	bne.n	8008e20 <_dtoa_r+0xaa8>
 8008f04:	462b      	mov	r3, r5
 8008f06:	461d      	mov	r5, r3
 8008f08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f0c:	2a30      	cmp	r2, #48	; 0x30
 8008f0e:	d0fa      	beq.n	8008f06 <_dtoa_r+0xb8e>
 8008f10:	e6d7      	b.n	8008cc2 <_dtoa_r+0x94a>
 8008f12:	9a01      	ldr	r2, [sp, #4]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d184      	bne.n	8008e22 <_dtoa_r+0xaaa>
 8008f18:	9b00      	ldr	r3, [sp, #0]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	2331      	movs	r3, #49	; 0x31
 8008f20:	7013      	strb	r3, [r2, #0]
 8008f22:	e6ce      	b.n	8008cc2 <_dtoa_r+0x94a>
 8008f24:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <_dtoa_r+0xbd4>)
 8008f26:	f7ff ba95 	b.w	8008454 <_dtoa_r+0xdc>
 8008f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f47f aa6e 	bne.w	800840e <_dtoa_r+0x96>
 8008f32:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <_dtoa_r+0xbd8>)
 8008f34:	f7ff ba8e 	b.w	8008454 <_dtoa_r+0xdc>
 8008f38:	9b02      	ldr	r3, [sp, #8]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dcae      	bgt.n	8008e9c <_dtoa_r+0xb24>
 8008f3e:	9b06      	ldr	r3, [sp, #24]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	f73f aea8 	bgt.w	8008c96 <_dtoa_r+0x91e>
 8008f46:	e7a9      	b.n	8008e9c <_dtoa_r+0xb24>
 8008f48:	0800a093 	.word	0x0800a093
 8008f4c:	08009ff0 	.word	0x08009ff0
 8008f50:	0800a014 	.word	0x0800a014

08008f54 <__sflush_r>:
 8008f54:	898a      	ldrh	r2, [r1, #12]
 8008f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	0710      	lsls	r0, r2, #28
 8008f5e:	460c      	mov	r4, r1
 8008f60:	d458      	bmi.n	8009014 <__sflush_r+0xc0>
 8008f62:	684b      	ldr	r3, [r1, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dc05      	bgt.n	8008f74 <__sflush_r+0x20>
 8008f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	dc02      	bgt.n	8008f74 <__sflush_r+0x20>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f76:	2e00      	cmp	r6, #0
 8008f78:	d0f9      	beq.n	8008f6e <__sflush_r+0x1a>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f80:	682f      	ldr	r7, [r5, #0]
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	d032      	beq.n	8008fec <__sflush_r+0x98>
 8008f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	075a      	lsls	r2, r3, #29
 8008f8c:	d505      	bpl.n	8008f9a <__sflush_r+0x46>
 8008f8e:	6863      	ldr	r3, [r4, #4]
 8008f90:	1ac0      	subs	r0, r0, r3
 8008f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f94:	b10b      	cbz	r3, 8008f9a <__sflush_r+0x46>
 8008f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f98:	1ac0      	subs	r0, r0, r3
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa0:	6a21      	ldr	r1, [r4, #32]
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	47b0      	blx	r6
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	d106      	bne.n	8008fba <__sflush_r+0x66>
 8008fac:	6829      	ldr	r1, [r5, #0]
 8008fae:	291d      	cmp	r1, #29
 8008fb0:	d82c      	bhi.n	800900c <__sflush_r+0xb8>
 8008fb2:	4a2a      	ldr	r2, [pc, #168]	; (800905c <__sflush_r+0x108>)
 8008fb4:	40ca      	lsrs	r2, r1
 8008fb6:	07d6      	lsls	r6, r2, #31
 8008fb8:	d528      	bpl.n	800900c <__sflush_r+0xb8>
 8008fba:	2200      	movs	r2, #0
 8008fbc:	6062      	str	r2, [r4, #4]
 8008fbe:	04d9      	lsls	r1, r3, #19
 8008fc0:	6922      	ldr	r2, [r4, #16]
 8008fc2:	6022      	str	r2, [r4, #0]
 8008fc4:	d504      	bpl.n	8008fd0 <__sflush_r+0x7c>
 8008fc6:	1c42      	adds	r2, r0, #1
 8008fc8:	d101      	bne.n	8008fce <__sflush_r+0x7a>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	b903      	cbnz	r3, 8008fd0 <__sflush_r+0x7c>
 8008fce:	6560      	str	r0, [r4, #84]	; 0x54
 8008fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fd2:	602f      	str	r7, [r5, #0]
 8008fd4:	2900      	cmp	r1, #0
 8008fd6:	d0ca      	beq.n	8008f6e <__sflush_r+0x1a>
 8008fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	d002      	beq.n	8008fe6 <__sflush_r+0x92>
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f000 fca3 	bl	800992c <_free_r>
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8008fea:	e7c1      	b.n	8008f70 <__sflush_r+0x1c>
 8008fec:	6a21      	ldr	r1, [r4, #32]
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b0      	blx	r6
 8008ff4:	1c41      	adds	r1, r0, #1
 8008ff6:	d1c7      	bne.n	8008f88 <__sflush_r+0x34>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0c4      	beq.n	8008f88 <__sflush_r+0x34>
 8008ffe:	2b1d      	cmp	r3, #29
 8009000:	d001      	beq.n	8009006 <__sflush_r+0xb2>
 8009002:	2b16      	cmp	r3, #22
 8009004:	d101      	bne.n	800900a <__sflush_r+0xb6>
 8009006:	602f      	str	r7, [r5, #0]
 8009008:	e7b1      	b.n	8008f6e <__sflush_r+0x1a>
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	e7ad      	b.n	8008f70 <__sflush_r+0x1c>
 8009014:	690f      	ldr	r7, [r1, #16]
 8009016:	2f00      	cmp	r7, #0
 8009018:	d0a9      	beq.n	8008f6e <__sflush_r+0x1a>
 800901a:	0793      	lsls	r3, r2, #30
 800901c:	680e      	ldr	r6, [r1, #0]
 800901e:	bf08      	it	eq
 8009020:	694b      	ldreq	r3, [r1, #20]
 8009022:	600f      	str	r7, [r1, #0]
 8009024:	bf18      	it	ne
 8009026:	2300      	movne	r3, #0
 8009028:	eba6 0807 	sub.w	r8, r6, r7
 800902c:	608b      	str	r3, [r1, #8]
 800902e:	f1b8 0f00 	cmp.w	r8, #0
 8009032:	dd9c      	ble.n	8008f6e <__sflush_r+0x1a>
 8009034:	6a21      	ldr	r1, [r4, #32]
 8009036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009038:	4643      	mov	r3, r8
 800903a:	463a      	mov	r2, r7
 800903c:	4628      	mov	r0, r5
 800903e:	47b0      	blx	r6
 8009040:	2800      	cmp	r0, #0
 8009042:	dc06      	bgt.n	8009052 <__sflush_r+0xfe>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	e78e      	b.n	8008f70 <__sflush_r+0x1c>
 8009052:	4407      	add	r7, r0
 8009054:	eba8 0800 	sub.w	r8, r8, r0
 8009058:	e7e9      	b.n	800902e <__sflush_r+0xda>
 800905a:	bf00      	nop
 800905c:	20400001 	.word	0x20400001

08009060 <_fflush_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	690b      	ldr	r3, [r1, #16]
 8009064:	4605      	mov	r5, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b913      	cbnz	r3, 8009070 <_fflush_r+0x10>
 800906a:	2500      	movs	r5, #0
 800906c:	4628      	mov	r0, r5
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	b118      	cbz	r0, 800907a <_fflush_r+0x1a>
 8009072:	6983      	ldr	r3, [r0, #24]
 8009074:	b90b      	cbnz	r3, 800907a <_fflush_r+0x1a>
 8009076:	f7fe f8e9 	bl	800724c <__sinit>
 800907a:	4b14      	ldr	r3, [pc, #80]	; (80090cc <_fflush_r+0x6c>)
 800907c:	429c      	cmp	r4, r3
 800907e:	d11b      	bne.n	80090b8 <_fflush_r+0x58>
 8009080:	686c      	ldr	r4, [r5, #4]
 8009082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0ef      	beq.n	800906a <_fflush_r+0xa>
 800908a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800908c:	07d0      	lsls	r0, r2, #31
 800908e:	d404      	bmi.n	800909a <_fflush_r+0x3a>
 8009090:	0599      	lsls	r1, r3, #22
 8009092:	d402      	bmi.n	800909a <_fflush_r+0x3a>
 8009094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009096:	f7fe f99c 	bl	80073d2 <__retarget_lock_acquire_recursive>
 800909a:	4628      	mov	r0, r5
 800909c:	4621      	mov	r1, r4
 800909e:	f7ff ff59 	bl	8008f54 <__sflush_r>
 80090a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090a4:	07da      	lsls	r2, r3, #31
 80090a6:	4605      	mov	r5, r0
 80090a8:	d4e0      	bmi.n	800906c <_fflush_r+0xc>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	059b      	lsls	r3, r3, #22
 80090ae:	d4dd      	bmi.n	800906c <_fflush_r+0xc>
 80090b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b2:	f7fe f98f 	bl	80073d4 <__retarget_lock_release_recursive>
 80090b6:	e7d9      	b.n	800906c <_fflush_r+0xc>
 80090b8:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <_fflush_r+0x70>)
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d101      	bne.n	80090c2 <_fflush_r+0x62>
 80090be:	68ac      	ldr	r4, [r5, #8]
 80090c0:	e7df      	b.n	8009082 <_fflush_r+0x22>
 80090c2:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <_fflush_r+0x74>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	bf08      	it	eq
 80090c8:	68ec      	ldreq	r4, [r5, #12]
 80090ca:	e7da      	b.n	8009082 <_fflush_r+0x22>
 80090cc:	08009f9c 	.word	0x08009f9c
 80090d0:	08009fbc 	.word	0x08009fbc
 80090d4:	08009f7c 	.word	0x08009f7c

080090d8 <_localeconv_r>:
 80090d8:	4800      	ldr	r0, [pc, #0]	; (80090dc <_localeconv_r+0x4>)
 80090da:	4770      	bx	lr
 80090dc:	20000164 	.word	0x20000164

080090e0 <_lseek_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d07      	ldr	r5, [pc, #28]	; (8009100 <_lseek_r+0x20>)
 80090e4:	4604      	mov	r4, r0
 80090e6:	4608      	mov	r0, r1
 80090e8:	4611      	mov	r1, r2
 80090ea:	2200      	movs	r2, #0
 80090ec:	602a      	str	r2, [r5, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	f7f8 fd54 	bl	8001b9c <_lseek>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d102      	bne.n	80090fe <_lseek_r+0x1e>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b103      	cbz	r3, 80090fe <_lseek_r+0x1e>
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	20015294 	.word	0x20015294

08009104 <__swhatbuf_r>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	460e      	mov	r6, r1
 8009108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910c:	2900      	cmp	r1, #0
 800910e:	b096      	sub	sp, #88	; 0x58
 8009110:	4614      	mov	r4, r2
 8009112:	461d      	mov	r5, r3
 8009114:	da08      	bge.n	8009128 <__swhatbuf_r+0x24>
 8009116:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	061a      	lsls	r2, r3, #24
 8009120:	d410      	bmi.n	8009144 <__swhatbuf_r+0x40>
 8009122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009126:	e00e      	b.n	8009146 <__swhatbuf_r+0x42>
 8009128:	466a      	mov	r2, sp
 800912a:	f000 fde7 	bl	8009cfc <_fstat_r>
 800912e:	2800      	cmp	r0, #0
 8009130:	dbf1      	blt.n	8009116 <__swhatbuf_r+0x12>
 8009132:	9a01      	ldr	r2, [sp, #4]
 8009134:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009138:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800913c:	425a      	negs	r2, r3
 800913e:	415a      	adcs	r2, r3
 8009140:	602a      	str	r2, [r5, #0]
 8009142:	e7ee      	b.n	8009122 <__swhatbuf_r+0x1e>
 8009144:	2340      	movs	r3, #64	; 0x40
 8009146:	2000      	movs	r0, #0
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	b016      	add	sp, #88	; 0x58
 800914c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009150 <__smakebuf_r>:
 8009150:	898b      	ldrh	r3, [r1, #12]
 8009152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009154:	079d      	lsls	r5, r3, #30
 8009156:	4606      	mov	r6, r0
 8009158:	460c      	mov	r4, r1
 800915a:	d507      	bpl.n	800916c <__smakebuf_r+0x1c>
 800915c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	6123      	str	r3, [r4, #16]
 8009164:	2301      	movs	r3, #1
 8009166:	6163      	str	r3, [r4, #20]
 8009168:	b002      	add	sp, #8
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	ab01      	add	r3, sp, #4
 800916e:	466a      	mov	r2, sp
 8009170:	f7ff ffc8 	bl	8009104 <__swhatbuf_r>
 8009174:	9900      	ldr	r1, [sp, #0]
 8009176:	4605      	mov	r5, r0
 8009178:	4630      	mov	r0, r6
 800917a:	f7fe f963 	bl	8007444 <_malloc_r>
 800917e:	b948      	cbnz	r0, 8009194 <__smakebuf_r+0x44>
 8009180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009184:	059a      	lsls	r2, r3, #22
 8009186:	d4ef      	bmi.n	8009168 <__smakebuf_r+0x18>
 8009188:	f023 0303 	bic.w	r3, r3, #3
 800918c:	f043 0302 	orr.w	r3, r3, #2
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	e7e3      	b.n	800915c <__smakebuf_r+0xc>
 8009194:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <__smakebuf_r+0x7c>)
 8009196:	62b3      	str	r3, [r6, #40]	; 0x28
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	6020      	str	r0, [r4, #0]
 800919c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	9b00      	ldr	r3, [sp, #0]
 80091a4:	6163      	str	r3, [r4, #20]
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	6120      	str	r0, [r4, #16]
 80091aa:	b15b      	cbz	r3, 80091c4 <__smakebuf_r+0x74>
 80091ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b0:	4630      	mov	r0, r6
 80091b2:	f000 fdb5 	bl	8009d20 <_isatty_r>
 80091b6:	b128      	cbz	r0, 80091c4 <__smakebuf_r+0x74>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	f043 0301 	orr.w	r3, r3, #1
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	89a0      	ldrh	r0, [r4, #12]
 80091c6:	4305      	orrs	r5, r0
 80091c8:	81a5      	strh	r5, [r4, #12]
 80091ca:	e7cd      	b.n	8009168 <__smakebuf_r+0x18>
 80091cc:	080071e5 	.word	0x080071e5

080091d0 <malloc>:
 80091d0:	4b02      	ldr	r3, [pc, #8]	; (80091dc <malloc+0xc>)
 80091d2:	4601      	mov	r1, r0
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	f7fe b935 	b.w	8007444 <_malloc_r>
 80091da:	bf00      	nop
 80091dc:	20000010 	.word	0x20000010

080091e0 <__malloc_lock>:
 80091e0:	4801      	ldr	r0, [pc, #4]	; (80091e8 <__malloc_lock+0x8>)
 80091e2:	f7fe b8f6 	b.w	80073d2 <__retarget_lock_acquire_recursive>
 80091e6:	bf00      	nop
 80091e8:	20015288 	.word	0x20015288

080091ec <__malloc_unlock>:
 80091ec:	4801      	ldr	r0, [pc, #4]	; (80091f4 <__malloc_unlock+0x8>)
 80091ee:	f7fe b8f1 	b.w	80073d4 <__retarget_lock_release_recursive>
 80091f2:	bf00      	nop
 80091f4:	20015288 	.word	0x20015288

080091f8 <_Balloc>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091fc:	4604      	mov	r4, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	b976      	cbnz	r6, 8009220 <_Balloc+0x28>
 8009202:	2010      	movs	r0, #16
 8009204:	f7ff ffe4 	bl	80091d0 <malloc>
 8009208:	4602      	mov	r2, r0
 800920a:	6260      	str	r0, [r4, #36]	; 0x24
 800920c:	b920      	cbnz	r0, 8009218 <_Balloc+0x20>
 800920e:	4b18      	ldr	r3, [pc, #96]	; (8009270 <_Balloc+0x78>)
 8009210:	4818      	ldr	r0, [pc, #96]	; (8009274 <_Balloc+0x7c>)
 8009212:	2166      	movs	r1, #102	; 0x66
 8009214:	f000 fd42 	bl	8009c9c <__assert_func>
 8009218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800921c:	6006      	str	r6, [r0, #0]
 800921e:	60c6      	str	r6, [r0, #12]
 8009220:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009222:	68f3      	ldr	r3, [r6, #12]
 8009224:	b183      	cbz	r3, 8009248 <_Balloc+0x50>
 8009226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800922e:	b9b8      	cbnz	r0, 8009260 <_Balloc+0x68>
 8009230:	2101      	movs	r1, #1
 8009232:	fa01 f605 	lsl.w	r6, r1, r5
 8009236:	1d72      	adds	r2, r6, #5
 8009238:	0092      	lsls	r2, r2, #2
 800923a:	4620      	mov	r0, r4
 800923c:	f000 fb60 	bl	8009900 <_calloc_r>
 8009240:	b160      	cbz	r0, 800925c <_Balloc+0x64>
 8009242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009246:	e00e      	b.n	8009266 <_Balloc+0x6e>
 8009248:	2221      	movs	r2, #33	; 0x21
 800924a:	2104      	movs	r1, #4
 800924c:	4620      	mov	r0, r4
 800924e:	f000 fb57 	bl	8009900 <_calloc_r>
 8009252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009254:	60f0      	str	r0, [r6, #12]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e4      	bne.n	8009226 <_Balloc+0x2e>
 800925c:	2000      	movs	r0, #0
 800925e:	bd70      	pop	{r4, r5, r6, pc}
 8009260:	6802      	ldr	r2, [r0, #0]
 8009262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009266:	2300      	movs	r3, #0
 8009268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800926c:	e7f7      	b.n	800925e <_Balloc+0x66>
 800926e:	bf00      	nop
 8009270:	0800a021 	.word	0x0800a021
 8009274:	0800a0a4 	.word	0x0800a0a4

08009278 <_Bfree>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800927c:	4605      	mov	r5, r0
 800927e:	460c      	mov	r4, r1
 8009280:	b976      	cbnz	r6, 80092a0 <_Bfree+0x28>
 8009282:	2010      	movs	r0, #16
 8009284:	f7ff ffa4 	bl	80091d0 <malloc>
 8009288:	4602      	mov	r2, r0
 800928a:	6268      	str	r0, [r5, #36]	; 0x24
 800928c:	b920      	cbnz	r0, 8009298 <_Bfree+0x20>
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <_Bfree+0x3c>)
 8009290:	4809      	ldr	r0, [pc, #36]	; (80092b8 <_Bfree+0x40>)
 8009292:	218a      	movs	r1, #138	; 0x8a
 8009294:	f000 fd02 	bl	8009c9c <__assert_func>
 8009298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800929c:	6006      	str	r6, [r0, #0]
 800929e:	60c6      	str	r6, [r0, #12]
 80092a0:	b13c      	cbz	r4, 80092b2 <_Bfree+0x3a>
 80092a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092a4:	6862      	ldr	r2, [r4, #4]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092ac:	6021      	str	r1, [r4, #0]
 80092ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	0800a021 	.word	0x0800a021
 80092b8:	0800a0a4 	.word	0x0800a0a4

080092bc <__multadd>:
 80092bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c0:	690d      	ldr	r5, [r1, #16]
 80092c2:	4607      	mov	r7, r0
 80092c4:	460c      	mov	r4, r1
 80092c6:	461e      	mov	r6, r3
 80092c8:	f101 0c14 	add.w	ip, r1, #20
 80092cc:	2000      	movs	r0, #0
 80092ce:	f8dc 3000 	ldr.w	r3, [ip]
 80092d2:	b299      	uxth	r1, r3
 80092d4:	fb02 6101 	mla	r1, r2, r1, r6
 80092d8:	0c1e      	lsrs	r6, r3, #16
 80092da:	0c0b      	lsrs	r3, r1, #16
 80092dc:	fb02 3306 	mla	r3, r2, r6, r3
 80092e0:	b289      	uxth	r1, r1
 80092e2:	3001      	adds	r0, #1
 80092e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092e8:	4285      	cmp	r5, r0
 80092ea:	f84c 1b04 	str.w	r1, [ip], #4
 80092ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092f2:	dcec      	bgt.n	80092ce <__multadd+0x12>
 80092f4:	b30e      	cbz	r6, 800933a <__multadd+0x7e>
 80092f6:	68a3      	ldr	r3, [r4, #8]
 80092f8:	42ab      	cmp	r3, r5
 80092fa:	dc19      	bgt.n	8009330 <__multadd+0x74>
 80092fc:	6861      	ldr	r1, [r4, #4]
 80092fe:	4638      	mov	r0, r7
 8009300:	3101      	adds	r1, #1
 8009302:	f7ff ff79 	bl	80091f8 <_Balloc>
 8009306:	4680      	mov	r8, r0
 8009308:	b928      	cbnz	r0, 8009316 <__multadd+0x5a>
 800930a:	4602      	mov	r2, r0
 800930c:	4b0c      	ldr	r3, [pc, #48]	; (8009340 <__multadd+0x84>)
 800930e:	480d      	ldr	r0, [pc, #52]	; (8009344 <__multadd+0x88>)
 8009310:	21b5      	movs	r1, #181	; 0xb5
 8009312:	f000 fcc3 	bl	8009c9c <__assert_func>
 8009316:	6922      	ldr	r2, [r4, #16]
 8009318:	3202      	adds	r2, #2
 800931a:	f104 010c 	add.w	r1, r4, #12
 800931e:	0092      	lsls	r2, r2, #2
 8009320:	300c      	adds	r0, #12
 8009322:	f7fe f858 	bl	80073d6 <memcpy>
 8009326:	4621      	mov	r1, r4
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ffa5 	bl	8009278 <_Bfree>
 800932e:	4644      	mov	r4, r8
 8009330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009334:	3501      	adds	r5, #1
 8009336:	615e      	str	r6, [r3, #20]
 8009338:	6125      	str	r5, [r4, #16]
 800933a:	4620      	mov	r0, r4
 800933c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009340:	0800a093 	.word	0x0800a093
 8009344:	0800a0a4 	.word	0x0800a0a4

08009348 <__hi0bits>:
 8009348:	0c03      	lsrs	r3, r0, #16
 800934a:	041b      	lsls	r3, r3, #16
 800934c:	b9d3      	cbnz	r3, 8009384 <__hi0bits+0x3c>
 800934e:	0400      	lsls	r0, r0, #16
 8009350:	2310      	movs	r3, #16
 8009352:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009356:	bf04      	itt	eq
 8009358:	0200      	lsleq	r0, r0, #8
 800935a:	3308      	addeq	r3, #8
 800935c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009360:	bf04      	itt	eq
 8009362:	0100      	lsleq	r0, r0, #4
 8009364:	3304      	addeq	r3, #4
 8009366:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800936a:	bf04      	itt	eq
 800936c:	0080      	lsleq	r0, r0, #2
 800936e:	3302      	addeq	r3, #2
 8009370:	2800      	cmp	r0, #0
 8009372:	db05      	blt.n	8009380 <__hi0bits+0x38>
 8009374:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009378:	f103 0301 	add.w	r3, r3, #1
 800937c:	bf08      	it	eq
 800937e:	2320      	moveq	r3, #32
 8009380:	4618      	mov	r0, r3
 8009382:	4770      	bx	lr
 8009384:	2300      	movs	r3, #0
 8009386:	e7e4      	b.n	8009352 <__hi0bits+0xa>

08009388 <__lo0bits>:
 8009388:	6803      	ldr	r3, [r0, #0]
 800938a:	f013 0207 	ands.w	r2, r3, #7
 800938e:	4601      	mov	r1, r0
 8009390:	d00b      	beq.n	80093aa <__lo0bits+0x22>
 8009392:	07da      	lsls	r2, r3, #31
 8009394:	d423      	bmi.n	80093de <__lo0bits+0x56>
 8009396:	0798      	lsls	r0, r3, #30
 8009398:	bf49      	itett	mi
 800939a:	085b      	lsrmi	r3, r3, #1
 800939c:	089b      	lsrpl	r3, r3, #2
 800939e:	2001      	movmi	r0, #1
 80093a0:	600b      	strmi	r3, [r1, #0]
 80093a2:	bf5c      	itt	pl
 80093a4:	600b      	strpl	r3, [r1, #0]
 80093a6:	2002      	movpl	r0, #2
 80093a8:	4770      	bx	lr
 80093aa:	b298      	uxth	r0, r3
 80093ac:	b9a8      	cbnz	r0, 80093da <__lo0bits+0x52>
 80093ae:	0c1b      	lsrs	r3, r3, #16
 80093b0:	2010      	movs	r0, #16
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	b90a      	cbnz	r2, 80093ba <__lo0bits+0x32>
 80093b6:	3008      	adds	r0, #8
 80093b8:	0a1b      	lsrs	r3, r3, #8
 80093ba:	071a      	lsls	r2, r3, #28
 80093bc:	bf04      	itt	eq
 80093be:	091b      	lsreq	r3, r3, #4
 80093c0:	3004      	addeq	r0, #4
 80093c2:	079a      	lsls	r2, r3, #30
 80093c4:	bf04      	itt	eq
 80093c6:	089b      	lsreq	r3, r3, #2
 80093c8:	3002      	addeq	r0, #2
 80093ca:	07da      	lsls	r2, r3, #31
 80093cc:	d403      	bmi.n	80093d6 <__lo0bits+0x4e>
 80093ce:	085b      	lsrs	r3, r3, #1
 80093d0:	f100 0001 	add.w	r0, r0, #1
 80093d4:	d005      	beq.n	80093e2 <__lo0bits+0x5a>
 80093d6:	600b      	str	r3, [r1, #0]
 80093d8:	4770      	bx	lr
 80093da:	4610      	mov	r0, r2
 80093dc:	e7e9      	b.n	80093b2 <__lo0bits+0x2a>
 80093de:	2000      	movs	r0, #0
 80093e0:	4770      	bx	lr
 80093e2:	2020      	movs	r0, #32
 80093e4:	4770      	bx	lr
	...

080093e8 <__i2b>:
 80093e8:	b510      	push	{r4, lr}
 80093ea:	460c      	mov	r4, r1
 80093ec:	2101      	movs	r1, #1
 80093ee:	f7ff ff03 	bl	80091f8 <_Balloc>
 80093f2:	4602      	mov	r2, r0
 80093f4:	b928      	cbnz	r0, 8009402 <__i2b+0x1a>
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <__i2b+0x24>)
 80093f8:	4805      	ldr	r0, [pc, #20]	; (8009410 <__i2b+0x28>)
 80093fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093fe:	f000 fc4d 	bl	8009c9c <__assert_func>
 8009402:	2301      	movs	r3, #1
 8009404:	6144      	str	r4, [r0, #20]
 8009406:	6103      	str	r3, [r0, #16]
 8009408:	bd10      	pop	{r4, pc}
 800940a:	bf00      	nop
 800940c:	0800a093 	.word	0x0800a093
 8009410:	0800a0a4 	.word	0x0800a0a4

08009414 <__multiply>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	4691      	mov	r9, r2
 800941a:	690a      	ldr	r2, [r1, #16]
 800941c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009420:	429a      	cmp	r2, r3
 8009422:	bfb8      	it	lt
 8009424:	460b      	movlt	r3, r1
 8009426:	460c      	mov	r4, r1
 8009428:	bfbc      	itt	lt
 800942a:	464c      	movlt	r4, r9
 800942c:	4699      	movlt	r9, r3
 800942e:	6927      	ldr	r7, [r4, #16]
 8009430:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009434:	68a3      	ldr	r3, [r4, #8]
 8009436:	6861      	ldr	r1, [r4, #4]
 8009438:	eb07 060a 	add.w	r6, r7, sl
 800943c:	42b3      	cmp	r3, r6
 800943e:	b085      	sub	sp, #20
 8009440:	bfb8      	it	lt
 8009442:	3101      	addlt	r1, #1
 8009444:	f7ff fed8 	bl	80091f8 <_Balloc>
 8009448:	b930      	cbnz	r0, 8009458 <__multiply+0x44>
 800944a:	4602      	mov	r2, r0
 800944c:	4b44      	ldr	r3, [pc, #272]	; (8009560 <__multiply+0x14c>)
 800944e:	4845      	ldr	r0, [pc, #276]	; (8009564 <__multiply+0x150>)
 8009450:	f240 115d 	movw	r1, #349	; 0x15d
 8009454:	f000 fc22 	bl	8009c9c <__assert_func>
 8009458:	f100 0514 	add.w	r5, r0, #20
 800945c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009460:	462b      	mov	r3, r5
 8009462:	2200      	movs	r2, #0
 8009464:	4543      	cmp	r3, r8
 8009466:	d321      	bcc.n	80094ac <__multiply+0x98>
 8009468:	f104 0314 	add.w	r3, r4, #20
 800946c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009470:	f109 0314 	add.w	r3, r9, #20
 8009474:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009478:	9202      	str	r2, [sp, #8]
 800947a:	1b3a      	subs	r2, r7, r4
 800947c:	3a15      	subs	r2, #21
 800947e:	f022 0203 	bic.w	r2, r2, #3
 8009482:	3204      	adds	r2, #4
 8009484:	f104 0115 	add.w	r1, r4, #21
 8009488:	428f      	cmp	r7, r1
 800948a:	bf38      	it	cc
 800948c:	2204      	movcc	r2, #4
 800948e:	9201      	str	r2, [sp, #4]
 8009490:	9a02      	ldr	r2, [sp, #8]
 8009492:	9303      	str	r3, [sp, #12]
 8009494:	429a      	cmp	r2, r3
 8009496:	d80c      	bhi.n	80094b2 <__multiply+0x9e>
 8009498:	2e00      	cmp	r6, #0
 800949a:	dd03      	ble.n	80094a4 <__multiply+0x90>
 800949c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d05a      	beq.n	800955a <__multiply+0x146>
 80094a4:	6106      	str	r6, [r0, #16]
 80094a6:	b005      	add	sp, #20
 80094a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ac:	f843 2b04 	str.w	r2, [r3], #4
 80094b0:	e7d8      	b.n	8009464 <__multiply+0x50>
 80094b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80094b6:	f1ba 0f00 	cmp.w	sl, #0
 80094ba:	d024      	beq.n	8009506 <__multiply+0xf2>
 80094bc:	f104 0e14 	add.w	lr, r4, #20
 80094c0:	46a9      	mov	r9, r5
 80094c2:	f04f 0c00 	mov.w	ip, #0
 80094c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094ca:	f8d9 1000 	ldr.w	r1, [r9]
 80094ce:	fa1f fb82 	uxth.w	fp, r2
 80094d2:	b289      	uxth	r1, r1
 80094d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80094d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094dc:	f8d9 2000 	ldr.w	r2, [r9]
 80094e0:	4461      	add	r1, ip
 80094e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80094ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094ee:	b289      	uxth	r1, r1
 80094f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094f4:	4577      	cmp	r7, lr
 80094f6:	f849 1b04 	str.w	r1, [r9], #4
 80094fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094fe:	d8e2      	bhi.n	80094c6 <__multiply+0xb2>
 8009500:	9a01      	ldr	r2, [sp, #4]
 8009502:	f845 c002 	str.w	ip, [r5, r2]
 8009506:	9a03      	ldr	r2, [sp, #12]
 8009508:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800950c:	3304      	adds	r3, #4
 800950e:	f1b9 0f00 	cmp.w	r9, #0
 8009512:	d020      	beq.n	8009556 <__multiply+0x142>
 8009514:	6829      	ldr	r1, [r5, #0]
 8009516:	f104 0c14 	add.w	ip, r4, #20
 800951a:	46ae      	mov	lr, r5
 800951c:	f04f 0a00 	mov.w	sl, #0
 8009520:	f8bc b000 	ldrh.w	fp, [ip]
 8009524:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009528:	fb09 220b 	mla	r2, r9, fp, r2
 800952c:	4492      	add	sl, r2
 800952e:	b289      	uxth	r1, r1
 8009530:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009534:	f84e 1b04 	str.w	r1, [lr], #4
 8009538:	f85c 2b04 	ldr.w	r2, [ip], #4
 800953c:	f8be 1000 	ldrh.w	r1, [lr]
 8009540:	0c12      	lsrs	r2, r2, #16
 8009542:	fb09 1102 	mla	r1, r9, r2, r1
 8009546:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800954a:	4567      	cmp	r7, ip
 800954c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009550:	d8e6      	bhi.n	8009520 <__multiply+0x10c>
 8009552:	9a01      	ldr	r2, [sp, #4]
 8009554:	50a9      	str	r1, [r5, r2]
 8009556:	3504      	adds	r5, #4
 8009558:	e79a      	b.n	8009490 <__multiply+0x7c>
 800955a:	3e01      	subs	r6, #1
 800955c:	e79c      	b.n	8009498 <__multiply+0x84>
 800955e:	bf00      	nop
 8009560:	0800a093 	.word	0x0800a093
 8009564:	0800a0a4 	.word	0x0800a0a4

08009568 <__pow5mult>:
 8009568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800956c:	4615      	mov	r5, r2
 800956e:	f012 0203 	ands.w	r2, r2, #3
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	d007      	beq.n	8009588 <__pow5mult+0x20>
 8009578:	4c25      	ldr	r4, [pc, #148]	; (8009610 <__pow5mult+0xa8>)
 800957a:	3a01      	subs	r2, #1
 800957c:	2300      	movs	r3, #0
 800957e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009582:	f7ff fe9b 	bl	80092bc <__multadd>
 8009586:	4607      	mov	r7, r0
 8009588:	10ad      	asrs	r5, r5, #2
 800958a:	d03d      	beq.n	8009608 <__pow5mult+0xa0>
 800958c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800958e:	b97c      	cbnz	r4, 80095b0 <__pow5mult+0x48>
 8009590:	2010      	movs	r0, #16
 8009592:	f7ff fe1d 	bl	80091d0 <malloc>
 8009596:	4602      	mov	r2, r0
 8009598:	6270      	str	r0, [r6, #36]	; 0x24
 800959a:	b928      	cbnz	r0, 80095a8 <__pow5mult+0x40>
 800959c:	4b1d      	ldr	r3, [pc, #116]	; (8009614 <__pow5mult+0xac>)
 800959e:	481e      	ldr	r0, [pc, #120]	; (8009618 <__pow5mult+0xb0>)
 80095a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80095a4:	f000 fb7a 	bl	8009c9c <__assert_func>
 80095a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095ac:	6004      	str	r4, [r0, #0]
 80095ae:	60c4      	str	r4, [r0, #12]
 80095b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095b8:	b94c      	cbnz	r4, 80095ce <__pow5mult+0x66>
 80095ba:	f240 2171 	movw	r1, #625	; 0x271
 80095be:	4630      	mov	r0, r6
 80095c0:	f7ff ff12 	bl	80093e8 <__i2b>
 80095c4:	2300      	movs	r3, #0
 80095c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80095ca:	4604      	mov	r4, r0
 80095cc:	6003      	str	r3, [r0, #0]
 80095ce:	f04f 0900 	mov.w	r9, #0
 80095d2:	07eb      	lsls	r3, r5, #31
 80095d4:	d50a      	bpl.n	80095ec <__pow5mult+0x84>
 80095d6:	4639      	mov	r1, r7
 80095d8:	4622      	mov	r2, r4
 80095da:	4630      	mov	r0, r6
 80095dc:	f7ff ff1a 	bl	8009414 <__multiply>
 80095e0:	4639      	mov	r1, r7
 80095e2:	4680      	mov	r8, r0
 80095e4:	4630      	mov	r0, r6
 80095e6:	f7ff fe47 	bl	8009278 <_Bfree>
 80095ea:	4647      	mov	r7, r8
 80095ec:	106d      	asrs	r5, r5, #1
 80095ee:	d00b      	beq.n	8009608 <__pow5mult+0xa0>
 80095f0:	6820      	ldr	r0, [r4, #0]
 80095f2:	b938      	cbnz	r0, 8009604 <__pow5mult+0x9c>
 80095f4:	4622      	mov	r2, r4
 80095f6:	4621      	mov	r1, r4
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7ff ff0b 	bl	8009414 <__multiply>
 80095fe:	6020      	str	r0, [r4, #0]
 8009600:	f8c0 9000 	str.w	r9, [r0]
 8009604:	4604      	mov	r4, r0
 8009606:	e7e4      	b.n	80095d2 <__pow5mult+0x6a>
 8009608:	4638      	mov	r0, r7
 800960a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800960e:	bf00      	nop
 8009610:	0800a1f0 	.word	0x0800a1f0
 8009614:	0800a021 	.word	0x0800a021
 8009618:	0800a0a4 	.word	0x0800a0a4

0800961c <__lshift>:
 800961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009620:	460c      	mov	r4, r1
 8009622:	6849      	ldr	r1, [r1, #4]
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800962a:	68a3      	ldr	r3, [r4, #8]
 800962c:	4607      	mov	r7, r0
 800962e:	4691      	mov	r9, r2
 8009630:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009634:	f108 0601 	add.w	r6, r8, #1
 8009638:	42b3      	cmp	r3, r6
 800963a:	db0b      	blt.n	8009654 <__lshift+0x38>
 800963c:	4638      	mov	r0, r7
 800963e:	f7ff fddb 	bl	80091f8 <_Balloc>
 8009642:	4605      	mov	r5, r0
 8009644:	b948      	cbnz	r0, 800965a <__lshift+0x3e>
 8009646:	4602      	mov	r2, r0
 8009648:	4b2a      	ldr	r3, [pc, #168]	; (80096f4 <__lshift+0xd8>)
 800964a:	482b      	ldr	r0, [pc, #172]	; (80096f8 <__lshift+0xdc>)
 800964c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009650:	f000 fb24 	bl	8009c9c <__assert_func>
 8009654:	3101      	adds	r1, #1
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	e7ee      	b.n	8009638 <__lshift+0x1c>
 800965a:	2300      	movs	r3, #0
 800965c:	f100 0114 	add.w	r1, r0, #20
 8009660:	f100 0210 	add.w	r2, r0, #16
 8009664:	4618      	mov	r0, r3
 8009666:	4553      	cmp	r3, sl
 8009668:	db37      	blt.n	80096da <__lshift+0xbe>
 800966a:	6920      	ldr	r0, [r4, #16]
 800966c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009670:	f104 0314 	add.w	r3, r4, #20
 8009674:	f019 091f 	ands.w	r9, r9, #31
 8009678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800967c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009680:	d02f      	beq.n	80096e2 <__lshift+0xc6>
 8009682:	f1c9 0e20 	rsb	lr, r9, #32
 8009686:	468a      	mov	sl, r1
 8009688:	f04f 0c00 	mov.w	ip, #0
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	fa02 f209 	lsl.w	r2, r2, r9
 8009692:	ea42 020c 	orr.w	r2, r2, ip
 8009696:	f84a 2b04 	str.w	r2, [sl], #4
 800969a:	f853 2b04 	ldr.w	r2, [r3], #4
 800969e:	4298      	cmp	r0, r3
 80096a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80096a4:	d8f2      	bhi.n	800968c <__lshift+0x70>
 80096a6:	1b03      	subs	r3, r0, r4
 80096a8:	3b15      	subs	r3, #21
 80096aa:	f023 0303 	bic.w	r3, r3, #3
 80096ae:	3304      	adds	r3, #4
 80096b0:	f104 0215 	add.w	r2, r4, #21
 80096b4:	4290      	cmp	r0, r2
 80096b6:	bf38      	it	cc
 80096b8:	2304      	movcc	r3, #4
 80096ba:	f841 c003 	str.w	ip, [r1, r3]
 80096be:	f1bc 0f00 	cmp.w	ip, #0
 80096c2:	d001      	beq.n	80096c8 <__lshift+0xac>
 80096c4:	f108 0602 	add.w	r6, r8, #2
 80096c8:	3e01      	subs	r6, #1
 80096ca:	4638      	mov	r0, r7
 80096cc:	612e      	str	r6, [r5, #16]
 80096ce:	4621      	mov	r1, r4
 80096d0:	f7ff fdd2 	bl	8009278 <_Bfree>
 80096d4:	4628      	mov	r0, r5
 80096d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096da:	f842 0f04 	str.w	r0, [r2, #4]!
 80096de:	3301      	adds	r3, #1
 80096e0:	e7c1      	b.n	8009666 <__lshift+0x4a>
 80096e2:	3904      	subs	r1, #4
 80096e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80096ec:	4298      	cmp	r0, r3
 80096ee:	d8f9      	bhi.n	80096e4 <__lshift+0xc8>
 80096f0:	e7ea      	b.n	80096c8 <__lshift+0xac>
 80096f2:	bf00      	nop
 80096f4:	0800a093 	.word	0x0800a093
 80096f8:	0800a0a4 	.word	0x0800a0a4

080096fc <__mcmp>:
 80096fc:	b530      	push	{r4, r5, lr}
 80096fe:	6902      	ldr	r2, [r0, #16]
 8009700:	690c      	ldr	r4, [r1, #16]
 8009702:	1b12      	subs	r2, r2, r4
 8009704:	d10e      	bne.n	8009724 <__mcmp+0x28>
 8009706:	f100 0314 	add.w	r3, r0, #20
 800970a:	3114      	adds	r1, #20
 800970c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009710:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009714:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009718:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800971c:	42a5      	cmp	r5, r4
 800971e:	d003      	beq.n	8009728 <__mcmp+0x2c>
 8009720:	d305      	bcc.n	800972e <__mcmp+0x32>
 8009722:	2201      	movs	r2, #1
 8009724:	4610      	mov	r0, r2
 8009726:	bd30      	pop	{r4, r5, pc}
 8009728:	4283      	cmp	r3, r0
 800972a:	d3f3      	bcc.n	8009714 <__mcmp+0x18>
 800972c:	e7fa      	b.n	8009724 <__mcmp+0x28>
 800972e:	f04f 32ff 	mov.w	r2, #4294967295
 8009732:	e7f7      	b.n	8009724 <__mcmp+0x28>

08009734 <__mdiff>:
 8009734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	460c      	mov	r4, r1
 800973a:	4606      	mov	r6, r0
 800973c:	4611      	mov	r1, r2
 800973e:	4620      	mov	r0, r4
 8009740:	4690      	mov	r8, r2
 8009742:	f7ff ffdb 	bl	80096fc <__mcmp>
 8009746:	1e05      	subs	r5, r0, #0
 8009748:	d110      	bne.n	800976c <__mdiff+0x38>
 800974a:	4629      	mov	r1, r5
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff fd53 	bl	80091f8 <_Balloc>
 8009752:	b930      	cbnz	r0, 8009762 <__mdiff+0x2e>
 8009754:	4b3a      	ldr	r3, [pc, #232]	; (8009840 <__mdiff+0x10c>)
 8009756:	4602      	mov	r2, r0
 8009758:	f240 2132 	movw	r1, #562	; 0x232
 800975c:	4839      	ldr	r0, [pc, #228]	; (8009844 <__mdiff+0x110>)
 800975e:	f000 fa9d 	bl	8009c9c <__assert_func>
 8009762:	2301      	movs	r3, #1
 8009764:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976c:	bfa4      	itt	ge
 800976e:	4643      	movge	r3, r8
 8009770:	46a0      	movge	r8, r4
 8009772:	4630      	mov	r0, r6
 8009774:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009778:	bfa6      	itte	ge
 800977a:	461c      	movge	r4, r3
 800977c:	2500      	movge	r5, #0
 800977e:	2501      	movlt	r5, #1
 8009780:	f7ff fd3a 	bl	80091f8 <_Balloc>
 8009784:	b920      	cbnz	r0, 8009790 <__mdiff+0x5c>
 8009786:	4b2e      	ldr	r3, [pc, #184]	; (8009840 <__mdiff+0x10c>)
 8009788:	4602      	mov	r2, r0
 800978a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800978e:	e7e5      	b.n	800975c <__mdiff+0x28>
 8009790:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009794:	6926      	ldr	r6, [r4, #16]
 8009796:	60c5      	str	r5, [r0, #12]
 8009798:	f104 0914 	add.w	r9, r4, #20
 800979c:	f108 0514 	add.w	r5, r8, #20
 80097a0:	f100 0e14 	add.w	lr, r0, #20
 80097a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80097a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097ac:	f108 0210 	add.w	r2, r8, #16
 80097b0:	46f2      	mov	sl, lr
 80097b2:	2100      	movs	r1, #0
 80097b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80097b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80097bc:	fa1f f883 	uxth.w	r8, r3
 80097c0:	fa11 f18b 	uxtah	r1, r1, fp
 80097c4:	0c1b      	lsrs	r3, r3, #16
 80097c6:	eba1 0808 	sub.w	r8, r1, r8
 80097ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097d2:	fa1f f888 	uxth.w	r8, r8
 80097d6:	1419      	asrs	r1, r3, #16
 80097d8:	454e      	cmp	r6, r9
 80097da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097de:	f84a 3b04 	str.w	r3, [sl], #4
 80097e2:	d8e7      	bhi.n	80097b4 <__mdiff+0x80>
 80097e4:	1b33      	subs	r3, r6, r4
 80097e6:	3b15      	subs	r3, #21
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	3304      	adds	r3, #4
 80097ee:	3415      	adds	r4, #21
 80097f0:	42a6      	cmp	r6, r4
 80097f2:	bf38      	it	cc
 80097f4:	2304      	movcc	r3, #4
 80097f6:	441d      	add	r5, r3
 80097f8:	4473      	add	r3, lr
 80097fa:	469e      	mov	lr, r3
 80097fc:	462e      	mov	r6, r5
 80097fe:	4566      	cmp	r6, ip
 8009800:	d30e      	bcc.n	8009820 <__mdiff+0xec>
 8009802:	f10c 0203 	add.w	r2, ip, #3
 8009806:	1b52      	subs	r2, r2, r5
 8009808:	f022 0203 	bic.w	r2, r2, #3
 800980c:	3d03      	subs	r5, #3
 800980e:	45ac      	cmp	ip, r5
 8009810:	bf38      	it	cc
 8009812:	2200      	movcc	r2, #0
 8009814:	441a      	add	r2, r3
 8009816:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800981a:	b17b      	cbz	r3, 800983c <__mdiff+0x108>
 800981c:	6107      	str	r7, [r0, #16]
 800981e:	e7a3      	b.n	8009768 <__mdiff+0x34>
 8009820:	f856 8b04 	ldr.w	r8, [r6], #4
 8009824:	fa11 f288 	uxtah	r2, r1, r8
 8009828:	1414      	asrs	r4, r2, #16
 800982a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800982e:	b292      	uxth	r2, r2
 8009830:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009834:	f84e 2b04 	str.w	r2, [lr], #4
 8009838:	1421      	asrs	r1, r4, #16
 800983a:	e7e0      	b.n	80097fe <__mdiff+0xca>
 800983c:	3f01      	subs	r7, #1
 800983e:	e7ea      	b.n	8009816 <__mdiff+0xe2>
 8009840:	0800a093 	.word	0x0800a093
 8009844:	0800a0a4 	.word	0x0800a0a4

08009848 <__d2b>:
 8009848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800984c:	4689      	mov	r9, r1
 800984e:	2101      	movs	r1, #1
 8009850:	ec57 6b10 	vmov	r6, r7, d0
 8009854:	4690      	mov	r8, r2
 8009856:	f7ff fccf 	bl	80091f8 <_Balloc>
 800985a:	4604      	mov	r4, r0
 800985c:	b930      	cbnz	r0, 800986c <__d2b+0x24>
 800985e:	4602      	mov	r2, r0
 8009860:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <__d2b+0xb0>)
 8009862:	4826      	ldr	r0, [pc, #152]	; (80098fc <__d2b+0xb4>)
 8009864:	f240 310a 	movw	r1, #778	; 0x30a
 8009868:	f000 fa18 	bl	8009c9c <__assert_func>
 800986c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009874:	bb35      	cbnz	r5, 80098c4 <__d2b+0x7c>
 8009876:	2e00      	cmp	r6, #0
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	d028      	beq.n	80098ce <__d2b+0x86>
 800987c:	4668      	mov	r0, sp
 800987e:	9600      	str	r6, [sp, #0]
 8009880:	f7ff fd82 	bl	8009388 <__lo0bits>
 8009884:	9900      	ldr	r1, [sp, #0]
 8009886:	b300      	cbz	r0, 80098ca <__d2b+0x82>
 8009888:	9a01      	ldr	r2, [sp, #4]
 800988a:	f1c0 0320 	rsb	r3, r0, #32
 800988e:	fa02 f303 	lsl.w	r3, r2, r3
 8009892:	430b      	orrs	r3, r1
 8009894:	40c2      	lsrs	r2, r0
 8009896:	6163      	str	r3, [r4, #20]
 8009898:	9201      	str	r2, [sp, #4]
 800989a:	9b01      	ldr	r3, [sp, #4]
 800989c:	61a3      	str	r3, [r4, #24]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bf14      	ite	ne
 80098a2:	2202      	movne	r2, #2
 80098a4:	2201      	moveq	r2, #1
 80098a6:	6122      	str	r2, [r4, #16]
 80098a8:	b1d5      	cbz	r5, 80098e0 <__d2b+0x98>
 80098aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80098ae:	4405      	add	r5, r0
 80098b0:	f8c9 5000 	str.w	r5, [r9]
 80098b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80098b8:	f8c8 0000 	str.w	r0, [r8]
 80098bc:	4620      	mov	r0, r4
 80098be:	b003      	add	sp, #12
 80098c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098c8:	e7d5      	b.n	8009876 <__d2b+0x2e>
 80098ca:	6161      	str	r1, [r4, #20]
 80098cc:	e7e5      	b.n	800989a <__d2b+0x52>
 80098ce:	a801      	add	r0, sp, #4
 80098d0:	f7ff fd5a 	bl	8009388 <__lo0bits>
 80098d4:	9b01      	ldr	r3, [sp, #4]
 80098d6:	6163      	str	r3, [r4, #20]
 80098d8:	2201      	movs	r2, #1
 80098da:	6122      	str	r2, [r4, #16]
 80098dc:	3020      	adds	r0, #32
 80098de:	e7e3      	b.n	80098a8 <__d2b+0x60>
 80098e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098e8:	f8c9 0000 	str.w	r0, [r9]
 80098ec:	6918      	ldr	r0, [r3, #16]
 80098ee:	f7ff fd2b 	bl	8009348 <__hi0bits>
 80098f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098f6:	e7df      	b.n	80098b8 <__d2b+0x70>
 80098f8:	0800a093 	.word	0x0800a093
 80098fc:	0800a0a4 	.word	0x0800a0a4

08009900 <_calloc_r>:
 8009900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009902:	fba1 2402 	umull	r2, r4, r1, r2
 8009906:	b94c      	cbnz	r4, 800991c <_calloc_r+0x1c>
 8009908:	4611      	mov	r1, r2
 800990a:	9201      	str	r2, [sp, #4]
 800990c:	f7fd fd9a 	bl	8007444 <_malloc_r>
 8009910:	9a01      	ldr	r2, [sp, #4]
 8009912:	4605      	mov	r5, r0
 8009914:	b930      	cbnz	r0, 8009924 <_calloc_r+0x24>
 8009916:	4628      	mov	r0, r5
 8009918:	b003      	add	sp, #12
 800991a:	bd30      	pop	{r4, r5, pc}
 800991c:	220c      	movs	r2, #12
 800991e:	6002      	str	r2, [r0, #0]
 8009920:	2500      	movs	r5, #0
 8009922:	e7f8      	b.n	8009916 <_calloc_r+0x16>
 8009924:	4621      	mov	r1, r4
 8009926:	f7fd fd64 	bl	80073f2 <memset>
 800992a:	e7f4      	b.n	8009916 <_calloc_r+0x16>

0800992c <_free_r>:
 800992c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800992e:	2900      	cmp	r1, #0
 8009930:	d044      	beq.n	80099bc <_free_r+0x90>
 8009932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009936:	9001      	str	r0, [sp, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f1a1 0404 	sub.w	r4, r1, #4
 800993e:	bfb8      	it	lt
 8009940:	18e4      	addlt	r4, r4, r3
 8009942:	f7ff fc4d 	bl	80091e0 <__malloc_lock>
 8009946:	4a1e      	ldr	r2, [pc, #120]	; (80099c0 <_free_r+0x94>)
 8009948:	9801      	ldr	r0, [sp, #4]
 800994a:	6813      	ldr	r3, [r2, #0]
 800994c:	b933      	cbnz	r3, 800995c <_free_r+0x30>
 800994e:	6063      	str	r3, [r4, #4]
 8009950:	6014      	str	r4, [r2, #0]
 8009952:	b003      	add	sp, #12
 8009954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009958:	f7ff bc48 	b.w	80091ec <__malloc_unlock>
 800995c:	42a3      	cmp	r3, r4
 800995e:	d908      	bls.n	8009972 <_free_r+0x46>
 8009960:	6825      	ldr	r5, [r4, #0]
 8009962:	1961      	adds	r1, r4, r5
 8009964:	428b      	cmp	r3, r1
 8009966:	bf01      	itttt	eq
 8009968:	6819      	ldreq	r1, [r3, #0]
 800996a:	685b      	ldreq	r3, [r3, #4]
 800996c:	1949      	addeq	r1, r1, r5
 800996e:	6021      	streq	r1, [r4, #0]
 8009970:	e7ed      	b.n	800994e <_free_r+0x22>
 8009972:	461a      	mov	r2, r3
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	b10b      	cbz	r3, 800997c <_free_r+0x50>
 8009978:	42a3      	cmp	r3, r4
 800997a:	d9fa      	bls.n	8009972 <_free_r+0x46>
 800997c:	6811      	ldr	r1, [r2, #0]
 800997e:	1855      	adds	r5, r2, r1
 8009980:	42a5      	cmp	r5, r4
 8009982:	d10b      	bne.n	800999c <_free_r+0x70>
 8009984:	6824      	ldr	r4, [r4, #0]
 8009986:	4421      	add	r1, r4
 8009988:	1854      	adds	r4, r2, r1
 800998a:	42a3      	cmp	r3, r4
 800998c:	6011      	str	r1, [r2, #0]
 800998e:	d1e0      	bne.n	8009952 <_free_r+0x26>
 8009990:	681c      	ldr	r4, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	6053      	str	r3, [r2, #4]
 8009996:	4421      	add	r1, r4
 8009998:	6011      	str	r1, [r2, #0]
 800999a:	e7da      	b.n	8009952 <_free_r+0x26>
 800999c:	d902      	bls.n	80099a4 <_free_r+0x78>
 800999e:	230c      	movs	r3, #12
 80099a0:	6003      	str	r3, [r0, #0]
 80099a2:	e7d6      	b.n	8009952 <_free_r+0x26>
 80099a4:	6825      	ldr	r5, [r4, #0]
 80099a6:	1961      	adds	r1, r4, r5
 80099a8:	428b      	cmp	r3, r1
 80099aa:	bf04      	itt	eq
 80099ac:	6819      	ldreq	r1, [r3, #0]
 80099ae:	685b      	ldreq	r3, [r3, #4]
 80099b0:	6063      	str	r3, [r4, #4]
 80099b2:	bf04      	itt	eq
 80099b4:	1949      	addeq	r1, r1, r5
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	6054      	str	r4, [r2, #4]
 80099ba:	e7ca      	b.n	8009952 <_free_r+0x26>
 80099bc:	b003      	add	sp, #12
 80099be:	bd30      	pop	{r4, r5, pc}
 80099c0:	2001528c 	.word	0x2001528c

080099c4 <__sfputc_r>:
 80099c4:	6893      	ldr	r3, [r2, #8]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	b410      	push	{r4}
 80099cc:	6093      	str	r3, [r2, #8]
 80099ce:	da08      	bge.n	80099e2 <__sfputc_r+0x1e>
 80099d0:	6994      	ldr	r4, [r2, #24]
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	db01      	blt.n	80099da <__sfputc_r+0x16>
 80099d6:	290a      	cmp	r1, #10
 80099d8:	d103      	bne.n	80099e2 <__sfputc_r+0x1e>
 80099da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099de:	f7fe bb5b 	b.w	8008098 <__swbuf_r>
 80099e2:	6813      	ldr	r3, [r2, #0]
 80099e4:	1c58      	adds	r0, r3, #1
 80099e6:	6010      	str	r0, [r2, #0]
 80099e8:	7019      	strb	r1, [r3, #0]
 80099ea:	4608      	mov	r0, r1
 80099ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <__sfputs_r>:
 80099f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f4:	4606      	mov	r6, r0
 80099f6:	460f      	mov	r7, r1
 80099f8:	4614      	mov	r4, r2
 80099fa:	18d5      	adds	r5, r2, r3
 80099fc:	42ac      	cmp	r4, r5
 80099fe:	d101      	bne.n	8009a04 <__sfputs_r+0x12>
 8009a00:	2000      	movs	r0, #0
 8009a02:	e007      	b.n	8009a14 <__sfputs_r+0x22>
 8009a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a08:	463a      	mov	r2, r7
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f7ff ffda 	bl	80099c4 <__sfputc_r>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d1f3      	bne.n	80099fc <__sfputs_r+0xa>
 8009a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a18 <_vfiprintf_r>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	460d      	mov	r5, r1
 8009a1e:	b09d      	sub	sp, #116	; 0x74
 8009a20:	4614      	mov	r4, r2
 8009a22:	4698      	mov	r8, r3
 8009a24:	4606      	mov	r6, r0
 8009a26:	b118      	cbz	r0, 8009a30 <_vfiprintf_r+0x18>
 8009a28:	6983      	ldr	r3, [r0, #24]
 8009a2a:	b90b      	cbnz	r3, 8009a30 <_vfiprintf_r+0x18>
 8009a2c:	f7fd fc0e 	bl	800724c <__sinit>
 8009a30:	4b89      	ldr	r3, [pc, #548]	; (8009c58 <_vfiprintf_r+0x240>)
 8009a32:	429d      	cmp	r5, r3
 8009a34:	d11b      	bne.n	8009a6e <_vfiprintf_r+0x56>
 8009a36:	6875      	ldr	r5, [r6, #4]
 8009a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a3a:	07d9      	lsls	r1, r3, #31
 8009a3c:	d405      	bmi.n	8009a4a <_vfiprintf_r+0x32>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	059a      	lsls	r2, r3, #22
 8009a42:	d402      	bmi.n	8009a4a <_vfiprintf_r+0x32>
 8009a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a46:	f7fd fcc4 	bl	80073d2 <__retarget_lock_acquire_recursive>
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	071b      	lsls	r3, r3, #28
 8009a4e:	d501      	bpl.n	8009a54 <_vfiprintf_r+0x3c>
 8009a50:	692b      	ldr	r3, [r5, #16]
 8009a52:	b9eb      	cbnz	r3, 8009a90 <_vfiprintf_r+0x78>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7fe fb82 	bl	8008160 <__swsetup_r>
 8009a5c:	b1c0      	cbz	r0, 8009a90 <_vfiprintf_r+0x78>
 8009a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a60:	07dc      	lsls	r4, r3, #31
 8009a62:	d50e      	bpl.n	8009a82 <_vfiprintf_r+0x6a>
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	b01d      	add	sp, #116	; 0x74
 8009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6e:	4b7b      	ldr	r3, [pc, #492]	; (8009c5c <_vfiprintf_r+0x244>)
 8009a70:	429d      	cmp	r5, r3
 8009a72:	d101      	bne.n	8009a78 <_vfiprintf_r+0x60>
 8009a74:	68b5      	ldr	r5, [r6, #8]
 8009a76:	e7df      	b.n	8009a38 <_vfiprintf_r+0x20>
 8009a78:	4b79      	ldr	r3, [pc, #484]	; (8009c60 <_vfiprintf_r+0x248>)
 8009a7a:	429d      	cmp	r5, r3
 8009a7c:	bf08      	it	eq
 8009a7e:	68f5      	ldreq	r5, [r6, #12]
 8009a80:	e7da      	b.n	8009a38 <_vfiprintf_r+0x20>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	0598      	lsls	r0, r3, #22
 8009a86:	d4ed      	bmi.n	8009a64 <_vfiprintf_r+0x4c>
 8009a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a8a:	f7fd fca3 	bl	80073d4 <__retarget_lock_release_recursive>
 8009a8e:	e7e9      	b.n	8009a64 <_vfiprintf_r+0x4c>
 8009a90:	2300      	movs	r3, #0
 8009a92:	9309      	str	r3, [sp, #36]	; 0x24
 8009a94:	2320      	movs	r3, #32
 8009a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a9e:	2330      	movs	r3, #48	; 0x30
 8009aa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c64 <_vfiprintf_r+0x24c>
 8009aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa8:	f04f 0901 	mov.w	r9, #1
 8009aac:	4623      	mov	r3, r4
 8009aae:	469a      	mov	sl, r3
 8009ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ab4:	b10a      	cbz	r2, 8009aba <_vfiprintf_r+0xa2>
 8009ab6:	2a25      	cmp	r2, #37	; 0x25
 8009ab8:	d1f9      	bne.n	8009aae <_vfiprintf_r+0x96>
 8009aba:	ebba 0b04 	subs.w	fp, sl, r4
 8009abe:	d00b      	beq.n	8009ad8 <_vfiprintf_r+0xc0>
 8009ac0:	465b      	mov	r3, fp
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7ff ff93 	bl	80099f2 <__sfputs_r>
 8009acc:	3001      	adds	r0, #1
 8009ace:	f000 80aa 	beq.w	8009c26 <_vfiprintf_r+0x20e>
 8009ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad4:	445a      	add	r2, fp
 8009ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 80a2 	beq.w	8009c26 <_vfiprintf_r+0x20e>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aec:	f10a 0a01 	add.w	sl, sl, #1
 8009af0:	9304      	str	r3, [sp, #16]
 8009af2:	9307      	str	r3, [sp, #28]
 8009af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af8:	931a      	str	r3, [sp, #104]	; 0x68
 8009afa:	4654      	mov	r4, sl
 8009afc:	2205      	movs	r2, #5
 8009afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b02:	4858      	ldr	r0, [pc, #352]	; (8009c64 <_vfiprintf_r+0x24c>)
 8009b04:	f7f6 fb74 	bl	80001f0 <memchr>
 8009b08:	9a04      	ldr	r2, [sp, #16]
 8009b0a:	b9d8      	cbnz	r0, 8009b44 <_vfiprintf_r+0x12c>
 8009b0c:	06d1      	lsls	r1, r2, #27
 8009b0e:	bf44      	itt	mi
 8009b10:	2320      	movmi	r3, #32
 8009b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b16:	0713      	lsls	r3, r2, #28
 8009b18:	bf44      	itt	mi
 8009b1a:	232b      	movmi	r3, #43	; 0x2b
 8009b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b20:	f89a 3000 	ldrb.w	r3, [sl]
 8009b24:	2b2a      	cmp	r3, #42	; 0x2a
 8009b26:	d015      	beq.n	8009b54 <_vfiprintf_r+0x13c>
 8009b28:	9a07      	ldr	r2, [sp, #28]
 8009b2a:	4654      	mov	r4, sl
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	f04f 0c0a 	mov.w	ip, #10
 8009b32:	4621      	mov	r1, r4
 8009b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b38:	3b30      	subs	r3, #48	; 0x30
 8009b3a:	2b09      	cmp	r3, #9
 8009b3c:	d94e      	bls.n	8009bdc <_vfiprintf_r+0x1c4>
 8009b3e:	b1b0      	cbz	r0, 8009b6e <_vfiprintf_r+0x156>
 8009b40:	9207      	str	r2, [sp, #28]
 8009b42:	e014      	b.n	8009b6e <_vfiprintf_r+0x156>
 8009b44:	eba0 0308 	sub.w	r3, r0, r8
 8009b48:	fa09 f303 	lsl.w	r3, r9, r3
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	46a2      	mov	sl, r4
 8009b52:	e7d2      	b.n	8009afa <_vfiprintf_r+0xe2>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	1d19      	adds	r1, r3, #4
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	9103      	str	r1, [sp, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	bfbb      	ittet	lt
 8009b60:	425b      	neglt	r3, r3
 8009b62:	f042 0202 	orrlt.w	r2, r2, #2
 8009b66:	9307      	strge	r3, [sp, #28]
 8009b68:	9307      	strlt	r3, [sp, #28]
 8009b6a:	bfb8      	it	lt
 8009b6c:	9204      	strlt	r2, [sp, #16]
 8009b6e:	7823      	ldrb	r3, [r4, #0]
 8009b70:	2b2e      	cmp	r3, #46	; 0x2e
 8009b72:	d10c      	bne.n	8009b8e <_vfiprintf_r+0x176>
 8009b74:	7863      	ldrb	r3, [r4, #1]
 8009b76:	2b2a      	cmp	r3, #42	; 0x2a
 8009b78:	d135      	bne.n	8009be6 <_vfiprintf_r+0x1ce>
 8009b7a:	9b03      	ldr	r3, [sp, #12]
 8009b7c:	1d1a      	adds	r2, r3, #4
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	9203      	str	r2, [sp, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bfb8      	it	lt
 8009b86:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b8a:	3402      	adds	r4, #2
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c74 <_vfiprintf_r+0x25c>
 8009b92:	7821      	ldrb	r1, [r4, #0]
 8009b94:	2203      	movs	r2, #3
 8009b96:	4650      	mov	r0, sl
 8009b98:	f7f6 fb2a 	bl	80001f0 <memchr>
 8009b9c:	b140      	cbz	r0, 8009bb0 <_vfiprintf_r+0x198>
 8009b9e:	2340      	movs	r3, #64	; 0x40
 8009ba0:	eba0 000a 	sub.w	r0, r0, sl
 8009ba4:	fa03 f000 	lsl.w	r0, r3, r0
 8009ba8:	9b04      	ldr	r3, [sp, #16]
 8009baa:	4303      	orrs	r3, r0
 8009bac:	3401      	adds	r4, #1
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb4:	482c      	ldr	r0, [pc, #176]	; (8009c68 <_vfiprintf_r+0x250>)
 8009bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bba:	2206      	movs	r2, #6
 8009bbc:	f7f6 fb18 	bl	80001f0 <memchr>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d03f      	beq.n	8009c44 <_vfiprintf_r+0x22c>
 8009bc4:	4b29      	ldr	r3, [pc, #164]	; (8009c6c <_vfiprintf_r+0x254>)
 8009bc6:	bb1b      	cbnz	r3, 8009c10 <_vfiprintf_r+0x1f8>
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	3307      	adds	r3, #7
 8009bcc:	f023 0307 	bic.w	r3, r3, #7
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	9303      	str	r3, [sp, #12]
 8009bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd6:	443b      	add	r3, r7
 8009bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bda:	e767      	b.n	8009aac <_vfiprintf_r+0x94>
 8009bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009be0:	460c      	mov	r4, r1
 8009be2:	2001      	movs	r0, #1
 8009be4:	e7a5      	b.n	8009b32 <_vfiprintf_r+0x11a>
 8009be6:	2300      	movs	r3, #0
 8009be8:	3401      	adds	r4, #1
 8009bea:	9305      	str	r3, [sp, #20]
 8009bec:	4619      	mov	r1, r3
 8009bee:	f04f 0c0a 	mov.w	ip, #10
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf8:	3a30      	subs	r2, #48	; 0x30
 8009bfa:	2a09      	cmp	r2, #9
 8009bfc:	d903      	bls.n	8009c06 <_vfiprintf_r+0x1ee>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0c5      	beq.n	8009b8e <_vfiprintf_r+0x176>
 8009c02:	9105      	str	r1, [sp, #20]
 8009c04:	e7c3      	b.n	8009b8e <_vfiprintf_r+0x176>
 8009c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e7f0      	b.n	8009bf2 <_vfiprintf_r+0x1da>
 8009c10:	ab03      	add	r3, sp, #12
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	462a      	mov	r2, r5
 8009c16:	4b16      	ldr	r3, [pc, #88]	; (8009c70 <_vfiprintf_r+0x258>)
 8009c18:	a904      	add	r1, sp, #16
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f7fd fd26 	bl	800766c <_printf_float>
 8009c20:	4607      	mov	r7, r0
 8009c22:	1c78      	adds	r0, r7, #1
 8009c24:	d1d6      	bne.n	8009bd4 <_vfiprintf_r+0x1bc>
 8009c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c28:	07d9      	lsls	r1, r3, #31
 8009c2a:	d405      	bmi.n	8009c38 <_vfiprintf_r+0x220>
 8009c2c:	89ab      	ldrh	r3, [r5, #12]
 8009c2e:	059a      	lsls	r2, r3, #22
 8009c30:	d402      	bmi.n	8009c38 <_vfiprintf_r+0x220>
 8009c32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c34:	f7fd fbce 	bl	80073d4 <__retarget_lock_release_recursive>
 8009c38:	89ab      	ldrh	r3, [r5, #12]
 8009c3a:	065b      	lsls	r3, r3, #25
 8009c3c:	f53f af12 	bmi.w	8009a64 <_vfiprintf_r+0x4c>
 8009c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c42:	e711      	b.n	8009a68 <_vfiprintf_r+0x50>
 8009c44:	ab03      	add	r3, sp, #12
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	462a      	mov	r2, r5
 8009c4a:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <_vfiprintf_r+0x258>)
 8009c4c:	a904      	add	r1, sp, #16
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f7fd ffb0 	bl	8007bb4 <_printf_i>
 8009c54:	e7e4      	b.n	8009c20 <_vfiprintf_r+0x208>
 8009c56:	bf00      	nop
 8009c58:	08009f9c 	.word	0x08009f9c
 8009c5c:	08009fbc 	.word	0x08009fbc
 8009c60:	08009f7c 	.word	0x08009f7c
 8009c64:	0800a1fc 	.word	0x0800a1fc
 8009c68:	0800a206 	.word	0x0800a206
 8009c6c:	0800766d 	.word	0x0800766d
 8009c70:	080099f3 	.word	0x080099f3
 8009c74:	0800a202 	.word	0x0800a202

08009c78 <_read_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	4d07      	ldr	r5, [pc, #28]	; (8009c98 <_read_r+0x20>)
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	4608      	mov	r0, r1
 8009c80:	4611      	mov	r1, r2
 8009c82:	2200      	movs	r2, #0
 8009c84:	602a      	str	r2, [r5, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	f7f7 ff44 	bl	8001b14 <_read>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_read_r+0x1e>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_read_r+0x1e>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	20015294 	.word	0x20015294

08009c9c <__assert_func>:
 8009c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4b09      	ldr	r3, [pc, #36]	; (8009cc8 <__assert_func+0x2c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	68d8      	ldr	r0, [r3, #12]
 8009caa:	b14c      	cbz	r4, 8009cc0 <__assert_func+0x24>
 8009cac:	4b07      	ldr	r3, [pc, #28]	; (8009ccc <__assert_func+0x30>)
 8009cae:	9100      	str	r1, [sp, #0]
 8009cb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cb4:	4906      	ldr	r1, [pc, #24]	; (8009cd0 <__assert_func+0x34>)
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	f000 f80e 	bl	8009cd8 <fiprintf>
 8009cbc:	f000 f85f 	bl	8009d7e <abort>
 8009cc0:	4b04      	ldr	r3, [pc, #16]	; (8009cd4 <__assert_func+0x38>)
 8009cc2:	461c      	mov	r4, r3
 8009cc4:	e7f3      	b.n	8009cae <__assert_func+0x12>
 8009cc6:	bf00      	nop
 8009cc8:	20000010 	.word	0x20000010
 8009ccc:	0800a20d 	.word	0x0800a20d
 8009cd0:	0800a21a 	.word	0x0800a21a
 8009cd4:	0800a248 	.word	0x0800a248

08009cd8 <fiprintf>:
 8009cd8:	b40e      	push	{r1, r2, r3}
 8009cda:	b503      	push	{r0, r1, lr}
 8009cdc:	4601      	mov	r1, r0
 8009cde:	ab03      	add	r3, sp, #12
 8009ce0:	4805      	ldr	r0, [pc, #20]	; (8009cf8 <fiprintf+0x20>)
 8009ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ce6:	6800      	ldr	r0, [r0, #0]
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	f7ff fe95 	bl	8009a18 <_vfiprintf_r>
 8009cee:	b002      	add	sp, #8
 8009cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cf4:	b003      	add	sp, #12
 8009cf6:	4770      	bx	lr
 8009cf8:	20000010 	.word	0x20000010

08009cfc <_fstat_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	4d07      	ldr	r5, [pc, #28]	; (8009d1c <_fstat_r+0x20>)
 8009d00:	2300      	movs	r3, #0
 8009d02:	4604      	mov	r4, r0
 8009d04:	4608      	mov	r0, r1
 8009d06:	4611      	mov	r1, r2
 8009d08:	602b      	str	r3, [r5, #0]
 8009d0a:	f7f7 ff2c 	bl	8001b66 <_fstat>
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	d102      	bne.n	8009d18 <_fstat_r+0x1c>
 8009d12:	682b      	ldr	r3, [r5, #0]
 8009d14:	b103      	cbz	r3, 8009d18 <_fstat_r+0x1c>
 8009d16:	6023      	str	r3, [r4, #0]
 8009d18:	bd38      	pop	{r3, r4, r5, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20015294 	.word	0x20015294

08009d20 <_isatty_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4d06      	ldr	r5, [pc, #24]	; (8009d3c <_isatty_r+0x1c>)
 8009d24:	2300      	movs	r3, #0
 8009d26:	4604      	mov	r4, r0
 8009d28:	4608      	mov	r0, r1
 8009d2a:	602b      	str	r3, [r5, #0]
 8009d2c:	f7f7 ff2b 	bl	8001b86 <_isatty>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d102      	bne.n	8009d3a <_isatty_r+0x1a>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	b103      	cbz	r3, 8009d3a <_isatty_r+0x1a>
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	20015294 	.word	0x20015294

08009d40 <__ascii_mbtowc>:
 8009d40:	b082      	sub	sp, #8
 8009d42:	b901      	cbnz	r1, 8009d46 <__ascii_mbtowc+0x6>
 8009d44:	a901      	add	r1, sp, #4
 8009d46:	b142      	cbz	r2, 8009d5a <__ascii_mbtowc+0x1a>
 8009d48:	b14b      	cbz	r3, 8009d5e <__ascii_mbtowc+0x1e>
 8009d4a:	7813      	ldrb	r3, [r2, #0]
 8009d4c:	600b      	str	r3, [r1, #0]
 8009d4e:	7812      	ldrb	r2, [r2, #0]
 8009d50:	1e10      	subs	r0, r2, #0
 8009d52:	bf18      	it	ne
 8009d54:	2001      	movne	r0, #1
 8009d56:	b002      	add	sp, #8
 8009d58:	4770      	bx	lr
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	e7fb      	b.n	8009d56 <__ascii_mbtowc+0x16>
 8009d5e:	f06f 0001 	mvn.w	r0, #1
 8009d62:	e7f8      	b.n	8009d56 <__ascii_mbtowc+0x16>

08009d64 <__ascii_wctomb>:
 8009d64:	b149      	cbz	r1, 8009d7a <__ascii_wctomb+0x16>
 8009d66:	2aff      	cmp	r2, #255	; 0xff
 8009d68:	bf85      	ittet	hi
 8009d6a:	238a      	movhi	r3, #138	; 0x8a
 8009d6c:	6003      	strhi	r3, [r0, #0]
 8009d6e:	700a      	strbls	r2, [r1, #0]
 8009d70:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d74:	bf98      	it	ls
 8009d76:	2001      	movls	r0, #1
 8009d78:	4770      	bx	lr
 8009d7a:	4608      	mov	r0, r1
 8009d7c:	4770      	bx	lr

08009d7e <abort>:
 8009d7e:	b508      	push	{r3, lr}
 8009d80:	2006      	movs	r0, #6
 8009d82:	f000 f82b 	bl	8009ddc <raise>
 8009d86:	2001      	movs	r0, #1
 8009d88:	f7f7 feba 	bl	8001b00 <_exit>

08009d8c <_raise_r>:
 8009d8c:	291f      	cmp	r1, #31
 8009d8e:	b538      	push	{r3, r4, r5, lr}
 8009d90:	4604      	mov	r4, r0
 8009d92:	460d      	mov	r5, r1
 8009d94:	d904      	bls.n	8009da0 <_raise_r+0x14>
 8009d96:	2316      	movs	r3, #22
 8009d98:	6003      	str	r3, [r0, #0]
 8009d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009da2:	b112      	cbz	r2, 8009daa <_raise_r+0x1e>
 8009da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009da8:	b94b      	cbnz	r3, 8009dbe <_raise_r+0x32>
 8009daa:	4620      	mov	r0, r4
 8009dac:	f000 f830 	bl	8009e10 <_getpid_r>
 8009db0:	462a      	mov	r2, r5
 8009db2:	4601      	mov	r1, r0
 8009db4:	4620      	mov	r0, r4
 8009db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dba:	f000 b817 	b.w	8009dec <_kill_r>
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d00a      	beq.n	8009dd8 <_raise_r+0x4c>
 8009dc2:	1c59      	adds	r1, r3, #1
 8009dc4:	d103      	bne.n	8009dce <_raise_r+0x42>
 8009dc6:	2316      	movs	r3, #22
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	2001      	movs	r0, #1
 8009dcc:	e7e7      	b.n	8009d9e <_raise_r+0x12>
 8009dce:	2400      	movs	r4, #0
 8009dd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	4798      	blx	r3
 8009dd8:	2000      	movs	r0, #0
 8009dda:	e7e0      	b.n	8009d9e <_raise_r+0x12>

08009ddc <raise>:
 8009ddc:	4b02      	ldr	r3, [pc, #8]	; (8009de8 <raise+0xc>)
 8009dde:	4601      	mov	r1, r0
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	f7ff bfd3 	b.w	8009d8c <_raise_r>
 8009de6:	bf00      	nop
 8009de8:	20000010 	.word	0x20000010

08009dec <_kill_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	; (8009e0c <_kill_r+0x20>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	f7f7 fe71 	bl	8001ae0 <_kill>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d102      	bne.n	8009e08 <_kill_r+0x1c>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	b103      	cbz	r3, 8009e08 <_kill_r+0x1c>
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20015294 	.word	0x20015294

08009e10 <_getpid_r>:
 8009e10:	f7f7 be5e 	b.w	8001ad0 <_getpid>

08009e14 <_init>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr

08009e20 <_fini>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	bf00      	nop
 8009e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e26:	bc08      	pop	{r3}
 8009e28:	469e      	mov	lr, r3
 8009e2a:	4770      	bx	lr
